<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2013 sp1 (x64) - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="osdm_oc" xmlns:n2="osdm_ad" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="#all">
	<xsl:output version="4.0" method="html" indent="no" encoding="UTF-8" use-character-maps="spaces" doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd"/>
	<xsl:character-map name="spaces">
		<xsl:output-character character="&#160;" string="&amp;nbsp;"/>
	</xsl:character-map>
	<xsl:param name="altova:bGeneratingFromPxf" select="false()"/>
	<xsl:param name="SV_OutputFormat" select="'HTML'"/>
	<xsl:param name="SV_BaseOutputFileName" as="xs:string?">
		<xsl:sequence select="for $i in altovaext:get-base-output-uri(), $j in tokenize( $i, &apos;[/\\]&apos; )[last()] return replace( $j, &apos;\.[^\.\s#%;]*$&apos;, &apos;&apos; )" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>
	</xsl:param>
	<xsl:param name="SV_GeneratedFileNamePrefix" select="if ( $SV_BaseOutputFileName ) then $SV_BaseOutputFileName else &apos;ObjectsComparison&apos;" as="xs:string?"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:variable name="altova:CssImages" select="()"/>
	<xsl:template match="/">
		<xsl:call-template name="altova:Root"/>
	</xsl:template>
	<xsl:template name="altova:Root">
		<html>
			<head>
				<title/>
				<meta name="generator" content="Altova StyleVision Enterprise Edition 2013 sp1 (x64) (http://www.altova.com)"/>
				<meta http-equiv="X-UA-Compatible" content="IE=7"/>
				<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>
				<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>
				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(-90deg) translate(-100%, 0%); -ms-transform-origin: 0% 0%;}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(90deg) translate(0%, -100%); -ms-transform-origin: 0% 0%;}</style>
				<xsl:comment>&lt;![endif]</xsl:comment>
				<style type="text/css">@page { margin-left:2cm; margin-right:2cm; margin-top:2cm; margin-bottom:2cm } @media print { br.altova-page-break { page-break-before: always; } }</style>
			</head>
			<body style="empty-cells:show; font-family:Tahoma; font-size:xx-small; text-align:left; vertical-align:top; word-wrap:break-word; ">
				<xsl:for-each select="$XML">
					<xsl:for-each select="n1:root">
						<br/>
						<center>
							<xsl:for-each select="n1:ReportCaption">
								<span style="font-size:medium; font-weight:bold; ">
									<xsl:apply-templates/>
								</span>
							</xsl:for-each>
						</center>
						<br/>
						<br/>
						<xsl:if test="string-length(n1:DesignName) &gt; 0">
							<xsl:variable name="altova:table">
								<table style="width:17cm; " border="0" cellpadding="3" cellspacing="0">
									<xsl:variable name="altova:CurrContextGrid_0" select="."/>
									<xsl:variable name="altova:ColumnData"/>
									<tbody>
										<tr>
											<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; font-weight:bold; width:4cm; ">
												<span>
													<xsl:text>Design Name</xsl:text>
												</span>
											</td>
											<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; width:13cm; ">
												<xsl:choose>
													<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
														<xsl:for-each select="n1:DesignName">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:when>
													<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
														<xsl:choose>
															<xsl:when test="string-length(n1:DesignName) &gt; 0">
																<xsl:for-each select="n1:DesignName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:otherwise>
																<span>
																	<xsl:text>&#160;</xsl:text>
																</span>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:when>
													<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
														<xsl:for-each select="n1:DesignName">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:when>
													<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
														<xsl:for-each select="n1:DesignName">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:when>
													<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
														<xsl:for-each select="n1:DesignName">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:when>
												</xsl:choose>
											</td>
										</tr>
										<tr>
											<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; font-weight:bold; width:4cm; ">
												<span>
													<xsl:text>Source Model</xsl:text>
												</span>
											</td>
											<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:13cm; ">
												<xsl:choose>
													<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
														<xsl:for-each select="n1:SourceModelName">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:when>
													<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
														<xsl:choose>
															<xsl:when test="string-length(n1:SourceModelName) &gt; 0">
																<xsl:for-each select="n1:SourceModelName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:otherwise>
																<span>
																	<xsl:text>&#160;</xsl:text>
																</span>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:when>
													<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
														<xsl:for-each select="n1:SourceModelName">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:when>
													<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
														<xsl:for-each select="n1:SourceModelName">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:when>
													<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
														<xsl:for-each select="n1:SourceModelName">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:when>
												</xsl:choose>
											</td>
										</tr>
										<tr>
											<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; font-weight:bold; width:4cm; ">
												<span>
													<xsl:text>Target Model</xsl:text>
												</span>
											</td>
											<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:13cm; ">
												<xsl:choose>
													<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
														<xsl:for-each select="n1:TargetModelName">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:when>
													<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
														<xsl:choose>
															<xsl:when test="string-length(n1:TargetModelName) &gt; 0">
																<xsl:for-each select="n1:TargetModelName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:otherwise>
																<span>
																	<xsl:text>&#160;</xsl:text>
																</span>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:when>
													<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
														<xsl:choose>
															<xsl:when test="count(n1:VersionComment/n1:VersionCommentDetails/n1:VersionCommentRow) &gt; 0">
																<xsl:for-each select="n1:TargetModelName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:otherwise/>
														</xsl:choose>
													</xsl:when>
													<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
														<xsl:for-each select="n1:TargetModelName">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:when>
													<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
														<xsl:for-each select="n1:TargetModelName">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:when>
												</xsl:choose>
											</td>
										</tr>
									</tbody>
								</table>
							</xsl:variable>
							<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
							<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							</xsl:apply-templates>
						</xsl:if>
						<br/>
						<xsl:choose>
							<xsl:when test="n1:SeparateObjByStatus = &apos;Y&apos;">
								<xsl:choose>
									<xsl:when test="n1:IsDMDImport = &apos;Y&apos;">
										<xsl:if test="count(//n1:Object[@Status=&apos;Modified&apos;]) &gt; 0">
											<br/>
											<span style="font-family:Tahoma; font-size:x-small; font-style:italic; ">
												<xsl:text>Modified objects</xsl:text>
											</span>
											<xsl:variable name="altova:table">
												<table border="0" cellpadding="3" cellspacing="0">
													<xsl:variable name="altova:CurrContextGrid_1" select="."/>
													<xsl:variable name="altova:ColumnData"/>
													<thead style="background-color:#d9f5ff; white-space:nowrap; ">
														<tr>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:4cm; ">
																<span>
																	<xsl:text>Model Name</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:4cm; ">
																<span>
																	<xsl:text>Sorce Name</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:4cm; ">
																<span>
																	<xsl:text>Target Name</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:3cm; ">
																<span>
																	<xsl:text>Type</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:2cm; ">
																<span>
																	<xsl:text>Status</xsl:text>
																</span>
															</th>
														</tr>
													</thead>
													<tbody>
														<xsl:for-each select="n1:ObjectsCollection">
															<xsl:for-each select="n1:ObjectDetails">
																<xsl:for-each select="n1:Object[@Status = &apos;Modified&apos;]">
																	<tr>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:4cm; ">
																			<xsl:for-each select="@DMDImpModelName">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																			<br/>
																		</td>
																		<td style="background-color:#ecfefa; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:4cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@SourceValue) &gt; 0">
																							<xsl:for-each select="@SourceValue">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:4cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@TargetValue) &gt; 0">
																							<xsl:for-each select="@TargetValue">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:3cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@Type) &gt; 0">
																							<xsl:for-each select="@Type">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:2cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@Status) &gt; 0">
																							<xsl:for-each select="@Status">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																	</tr>
																	<xsl:for-each select="n1:PropertiesCollection">
																		<xsl:choose>
																			<xsl:when test="count( n1:PropertyDetails ) &gt;0">
																				<tr>
																					<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; width:4cm; "/>
																					<td colspan="4" style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:4cm; ">
																						<xsl:variable name="altova:table">
																							<table border="0" cellpadding="0" cellspacing="0">
																								<xsl:variable name="altova:CurrContextGrid_2" select="."/>
																								<xsl:variable name="altova:ColumnData"/>
																								<tbody>
																									<tr>
																										<td style="width:3cm; "/>
																										<td style="width:13cm; ">
																											<xsl:variable name="altova:table">
																												<table style="font-style:italic; width:12cm; " border="0" cellpadding="3" cellspacing="0">
																													<xsl:variable name="altova:CurrContextGrid_3" select="."/>
																													<xsl:variable name="altova:ColumnData"/>
																													<tbody>
																														<tr style="height:0.01cm; ">
																															<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; width:4cm; "/>
																															<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; width:4cm; "/>
																															<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; width:4cm; "/>
																														</tr>
																														<xsl:for-each select="n1:PropertyDetails">
																															<tr>
																																<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; border-left-color:black; border-left-style:dotted; border-left-width:thin; border-right-color:black; border-right-style:dotted; border-right-width:thin; width:4cm; ">
																																	<xsl:choose>
																																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																			<xsl:for-each select="n1:PropertyName">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																			<xsl:choose>
																																				<xsl:when test="string-length(n1:PropertyName) &gt; 0">
																																					<xsl:for-each select="n1:PropertyName">
																																						<xsl:apply-templates/>
																																						<br/>
																																					</xsl:for-each>
																																				</xsl:when>
																																				<xsl:otherwise>
																																					<span>
																																						<xsl:text>&#160;</xsl:text>
																																					</span>
																																				</xsl:otherwise>
																																			</xsl:choose>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																			<xsl:for-each select="n1:PropertyName">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																			<xsl:for-each select="n1:PropertyName">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																			<xsl:for-each select="n1:PropertyName">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																	</xsl:choose>
																																</td>
																																<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; border-right-color:black; border-right-style:dotted; border-right-width:thin; width:4cm; ">
																																	<xsl:choose>
																																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																			<xsl:for-each select="n1:PropertyOldValue">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																			<xsl:choose>
																																				<xsl:when test="string-length(n1:PropertyOldValue) &gt; 0">
																																					<xsl:for-each select="n1:PropertyOldValue">
																																						<xsl:apply-templates/>
																																						<br/>
																																					</xsl:for-each>
																																				</xsl:when>
																																				<xsl:otherwise>
																																					<span>
																																						<xsl:text>&#160;</xsl:text>
																																					</span>
																																				</xsl:otherwise>
																																			</xsl:choose>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																			<xsl:for-each select="n1:PropertyOldValue">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																			<xsl:for-each select="n1:PropertyOldValue">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																			<xsl:for-each select="n1:PropertyOldValue">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																	</xsl:choose>
																																</td>
																																<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; border-right-color:black; border-right-style:dotted; border-right-width:thin; width:4cm; ">
																																	<xsl:choose>
																																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																			<xsl:for-each select="n1:PropertyNewValue">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																			<xsl:choose>
																																				<xsl:when test="string-length(n1:PropertyNewValue) &gt; 0">
																																					<xsl:for-each select="n1:PropertyNewValue">
																																						<xsl:apply-templates/>
																																						<br/>
																																					</xsl:for-each>
																																				</xsl:when>
																																				<xsl:otherwise>
																																					<span>
																																						<xsl:text>&#160;</xsl:text>
																																					</span>
																																				</xsl:otherwise>
																																			</xsl:choose>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																			<xsl:for-each select="n1:PropertyNewValue">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																			<xsl:for-each select="n1:PropertyNewValue">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																			<xsl:for-each select="n1:PropertyNewValue">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																	</xsl:choose>
																																</td>
																															</tr>
																														</xsl:for-each>
																													</tbody>
																												</table>
																											</xsl:variable>
																											<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
																											<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
																											<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
																												<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
																											</xsl:apply-templates>
																										</td>
																									</tr>
																								</tbody>
																							</table>
																						</xsl:variable>
																						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
																						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
																						<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
																							<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
																						</xsl:apply-templates>
																					</td>
																				</tr>
																			</xsl:when>
																			<xsl:otherwise/>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</tbody>
												</table>
											</xsl:variable>
											<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
											<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
											<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
												<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
											</xsl:apply-templates>
										</xsl:if>
										<xsl:if test="count(//n1:Object[@Status=&apos;New&apos;]) &gt; 0">
											<br/>
											<span style="font-family:Tahoma; font-size:x-small; font-style:italic; ">
												<xsl:text>New objects</xsl:text>
											</span>
											<xsl:variable name="altova:table">
												<table border="0" cellpadding="3" cellspacing="0">
													<xsl:variable name="altova:CurrContextGrid_4" select="."/>
													<xsl:variable name="altova:ColumnData"/>
													<thead style="background-color:#d9f5ff; white-space:nowrap; ">
														<tr>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:4cm; ">
																<span>
																	<xsl:text>Model Name</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:4cm; ">
																<span>
																	<xsl:text>Sorce Name</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:4cm; ">
																<span>
																	<xsl:text>Target Name</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:3cm; ">
																<span>
																	<xsl:text>Type</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:2cm; ">
																<span>
																	<xsl:text>Status</xsl:text>
																</span>
															</th>
														</tr>
													</thead>
													<tbody>
														<xsl:for-each select="n1:ObjectsCollection">
															<xsl:for-each select="n1:ObjectDetails">
																<xsl:for-each select="n1:Object[@Status = &apos;New&apos;]">
																	<tr>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:4cm; ">
																			<xsl:for-each select="@DMDImpModelName">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																			<br/>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:4cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@SourceValue) &gt; 0">
																							<xsl:for-each select="@SourceValue">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:4cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@TargetValue) &gt; 0">
																							<xsl:for-each select="@TargetValue">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:3cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@Type) &gt; 0">
																							<xsl:for-each select="@Type">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:2cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@Status) &gt; 0">
																							<xsl:for-each select="@Status">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																	</tr>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</tbody>
												</table>
											</xsl:variable>
											<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
											<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
											<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
												<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
											</xsl:apply-templates>
										</xsl:if>
										<xsl:if test="count(//n1:Object[@Status=&apos;Deleted&apos;]) &gt; 0">
											<br/>
											<span style="font-family:Tahoma; font-size:x-small; font-style:italic; ">
												<xsl:text>Deleted objects</xsl:text>
											</span>
											<xsl:variable name="altova:table">
												<table border="0" cellpadding="3" cellspacing="0">
													<xsl:variable name="altova:CurrContextGrid_5" select="."/>
													<xsl:variable name="altova:ColumnData"/>
													<thead style="background-color:#d9f5ff; white-space:nowrap; ">
														<tr>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:4cm; ">
																<span>
																	<xsl:text>Model Name</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:4cm; ">
																<span>
																	<xsl:text>Sorce Name</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:4cm; ">
																<span>
																	<xsl:text>Target Name</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:3cm; ">
																<span>
																	<xsl:text>Type</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:2cm; ">
																<span>
																	<xsl:text>Status</xsl:text>
																</span>
															</th>
														</tr>
													</thead>
													<tbody>
														<xsl:for-each select="n1:ObjectsCollection">
															<xsl:for-each select="n1:ObjectDetails">
																<xsl:for-each select="n1:Object[@Status = &apos;Deleted&apos;]">
																	<tr>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:4cm; ">
																			<xsl:for-each select="@DMDImpModelName">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																			<br/>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:4cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@SourceValue) &gt; 0">
																							<xsl:for-each select="@SourceValue">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:4cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@TargetValue) &gt; 0">
																							<xsl:for-each select="@TargetValue">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:3cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@Type) &gt; 0">
																							<xsl:for-each select="@Type">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:2cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@Status) &gt; 0">
																							<xsl:for-each select="@Status">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																	</tr>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</tbody>
												</table>
											</xsl:variable>
											<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
											<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
											<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
												<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
											</xsl:apply-templates>
										</xsl:if>
									</xsl:when>
									<xsl:otherwise>
										<xsl:if test="count(//n1:Object[@Status=&apos;Modified&apos;]) &gt; 0">
											<br/>
											<span style="font-family:Tahoma; font-size:x-small; font-style:italic; ">
												<xsl:text>Modified objects</xsl:text>
											</span>
											<xsl:variable name="altova:table">
												<table border="0" cellpadding="3" cellspacing="0">
													<xsl:variable name="altova:CurrContextGrid_6" select="."/>
													<xsl:variable name="altova:ColumnData"/>
													<thead style="background-color:#d9f5ff; white-space:nowrap; ">
														<tr>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:6cm; ">
																<span>
																	<xsl:text>Sorce Name</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:6cm; ">
																<span>
																	<xsl:text>Target Name</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:3cm; ">
																<span>
																	<xsl:text>Type</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:2cm; ">
																<span>
																	<xsl:text>Status</xsl:text>
																</span>
															</th>
														</tr>
													</thead>
													<tbody>
														<xsl:for-each select="n1:ObjectsCollection">
															<xsl:for-each select="n1:ObjectDetails">
																<xsl:for-each select="n1:Object[@Status = &apos;Modified&apos;]">
																	<tr>
																		<td style="background-color:#ecfefa; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:6cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@SourceValue) &gt; 0">
																							<xsl:for-each select="@SourceValue">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:6cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@TargetValue) &gt; 0">
																							<xsl:for-each select="@TargetValue">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:3cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@Type) &gt; 0">
																							<xsl:for-each select="@Type">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:2cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@Status) &gt; 0">
																							<xsl:for-each select="@Status">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																	</tr>
																	<xsl:for-each select="n1:PropertiesCollection">
																		<xsl:choose>
																			<xsl:when test="count( n1:PropertyDetails ) &gt;0">
																				<tr>
																					<td colspan="4" style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:6cm; ">
																						<xsl:variable name="altova:table">
																							<table style="font-size:xx-small; " border="0" cellpadding="0" cellspacing="0">
																								<xsl:variable name="altova:CurrContextGrid_7" select="."/>
																								<xsl:variable name="altova:ColumnData"/>
																								<tbody>
																									<tr>
																										<td style="width:3cm; "/>
																										<td style="width:13cm; ">
																											<xsl:variable name="altova:table">
																												<table style="font-style:italic; width:12cm; " border="0" cellpadding="3" cellspacing="0">
																													<xsl:variable name="altova:CurrContextGrid_8" select="."/>
																													<xsl:variable name="altova:ColumnData"/>
																													<tbody>
																														<xsl:for-each select="n1:PropertyDetails">
																															<tr>
																																<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; border-left-color:black; border-left-style:dotted; border-left-width:thin; border-right-color:black; border-right-style:dotted; border-right-width:thin; border-top-color:black; border-top-style:dotted; border-top-width:thin; width:4cm; ">
																																	<xsl:choose>
																																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																			<xsl:for-each select="n1:PropertyName">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																			<xsl:choose>
																																				<xsl:when test="string-length(n1:PropertyName) &gt; 0">
																																					<xsl:for-each select="n1:PropertyName">
																																						<xsl:apply-templates/>
																																						<br/>
																																					</xsl:for-each>
																																				</xsl:when>
																																				<xsl:otherwise>
																																					<span>
																																						<xsl:text>&#160;</xsl:text>
																																					</span>
																																				</xsl:otherwise>
																																			</xsl:choose>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																			<xsl:for-each select="n1:PropertyName">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																			<xsl:for-each select="n1:PropertyName">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																			<xsl:for-each select="n1:PropertyName">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																	</xsl:choose>
																																</td>
																																<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; border-right-color:black; border-right-style:dotted; border-right-width:thin; border-top-color:black; border-top-style:dotted; border-top-width:thin; width:4cm; ">
																																	<xsl:choose>
																																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																			<xsl:for-each select="n1:PropertyOldValue">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																			<xsl:choose>
																																				<xsl:when test="string-length(n1:PropertyOldValue) &gt; 0">
																																					<xsl:for-each select="n1:PropertyOldValue">
																																						<xsl:apply-templates/>
																																						<br/>
																																					</xsl:for-each>
																																				</xsl:when>
																																				<xsl:otherwise>
																																					<span>
																																						<xsl:text>&#160;</xsl:text>
																																					</span>
																																				</xsl:otherwise>
																																			</xsl:choose>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																			<xsl:for-each select="n1:PropertyOldValue">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																			<xsl:for-each select="n1:PropertyOldValue">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																			<xsl:for-each select="n1:PropertyOldValue">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																	</xsl:choose>
																																</td>
																																<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; border-right-color:black; border-right-style:dotted; border-right-width:thin; border-top-color:black; border-top-style:dotted; border-top-width:thin; width:4cm; ">
																																	<xsl:choose>
																																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																			<xsl:for-each select="n1:PropertyNewValue">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																			<xsl:choose>
																																				<xsl:when test="string-length(n1:PropertyNewValue) &gt; 0">
																																					<xsl:for-each select="n1:PropertyNewValue">
																																						<xsl:apply-templates/>
																																						<br/>
																																					</xsl:for-each>
																																				</xsl:when>
																																				<xsl:otherwise>
																																					<span>
																																						<xsl:text>&#160;</xsl:text>
																																					</span>
																																				</xsl:otherwise>
																																			</xsl:choose>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																			<xsl:for-each select="n1:PropertyNewValue">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																			<xsl:for-each select="n1:PropertyNewValue">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																			<xsl:for-each select="n1:PropertyNewValue">
																																				<xsl:apply-templates/>
																																				<br/>
																																			</xsl:for-each>
																																		</xsl:when>
																																	</xsl:choose>
																																</td>
																															</tr>
																														</xsl:for-each>
																													</tbody>
																												</table>
																											</xsl:variable>
																											<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
																											<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
																											<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
																												<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
																											</xsl:apply-templates>
																										</td>
																									</tr>
																								</tbody>
																							</table>
																						</xsl:variable>
																						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
																						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
																						<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
																							<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
																						</xsl:apply-templates>
																					</td>
																				</tr>
																			</xsl:when>
																			<xsl:otherwise/>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</tbody>
												</table>
											</xsl:variable>
											<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
											<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
											<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
												<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
											</xsl:apply-templates>
										</xsl:if>
										<xsl:if test="count(//n1:Object[@Status=&apos;New&apos;]) &gt; 0">
											<br/>
											<span style="font-family:Tahoma; font-size:x-small; font-style:italic; ">
												<xsl:text>New objects</xsl:text>
											</span>
											<xsl:variable name="altova:table">
												<table border="0" cellpadding="3" cellspacing="0">
													<xsl:variable name="altova:CurrContextGrid_9" select="."/>
													<xsl:variable name="altova:ColumnData"/>
													<thead style="background-color:#d9f5ff; white-space:nowrap; ">
														<tr>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:6cm; ">
																<span>
																	<xsl:text>Sorce Name</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:6cm; ">
																<span>
																	<xsl:text>Target Name</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:3cm; ">
																<span>
																	<xsl:text>Type</xsl:text>
																</span>
															</th>
															<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:2cm; ">
																<span>
																	<xsl:text>Status</xsl:text>
																</span>
															</th>
														</tr>
													</thead>
													<tbody>
														<xsl:for-each select="n1:ObjectsCollection">
															<xsl:for-each select="n1:ObjectDetails">
																<xsl:for-each select="n1:Object[@Status = &apos;New&apos;]">
																	<tr>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:6cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@SourceValue) &gt; 0">
																							<xsl:for-each select="@SourceValue">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:6cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@TargetValue) &gt; 0">
																							<xsl:for-each select="@TargetValue">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:3cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@Type) &gt; 0">
																							<xsl:for-each select="@Type">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:2cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@Status) &gt; 0">
																							<xsl:for-each select="@Status">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																	</tr>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</tbody>
												</table>
											</xsl:variable>
											<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
											<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
											<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
												<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
											</xsl:apply-templates>
										</xsl:if>
										<xsl:if test="count(//n1:Object[@Status=&apos;Deleted&apos;]) &gt; 0">
											<br/>
											<span style="font-family:Tahoma; font-size:x-small; font-style:italic; ">
												<xsl:text>Deleted objects</xsl:text>
											</span>
											<xsl:variable name="altova:table">
												<table border="0" cellpadding="3" cellspacing="0">
													<xsl:variable name="altova:CurrContextGrid_10" select="."/>
													<xsl:variable name="altova:ColumnData"/>
													<thead style="white-space:nowrap; ">
														<tr>
															<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:6cm; ">
																<span>
																	<xsl:text>Sorce Name</xsl:text>
																</span>
															</th>
															<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:6cm; ">
																<span>
																	<xsl:text>Target Name</xsl:text>
																</span>
															</th>
															<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:3cm; ">
																<span>
																	<xsl:text>Type</xsl:text>
																</span>
															</th>
															<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:2cm; ">
																<span>
																	<xsl:text>Status</xsl:text>
																</span>
															</th>
														</tr>
													</thead>
													<tbody>
														<xsl:for-each select="n1:ObjectsCollection">
															<xsl:for-each select="n1:ObjectDetails">
																<xsl:for-each select="n1:Object[@Status = &apos;Deleted&apos;]">
																	<tr>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:6cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@SourceValue) &gt; 0">
																							<xsl:for-each select="@SourceValue">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@SourceValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:6cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@TargetValue) &gt; 0">
																							<xsl:for-each select="@TargetValue">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@TargetValue">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:3cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@Type) &gt; 0">
																							<xsl:for-each select="@Type">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@Type">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:2cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(@Status) &gt; 0">
																							<xsl:for-each select="@Status">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="@Status">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																	</tr>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</tbody>
												</table>
											</xsl:variable>
											<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
											<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
											<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
												<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
											</xsl:apply-templates>
										</xsl:if>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:when>
							<xsl:otherwise>
								<span style="font-size:xx-small; font-style:italic; ">
									<xsl:text>O</xsl:text>
								</span>
								<span style="font-family:Tahoma; font-size:xx-small; font-style:italic; ">
									<xsl:text>bject</xsl:text>
								</span>
								<span style="font-size:xx-small; font-style:italic; ">
									<xsl:text>s</xsl:text>
								</span>
								<xsl:choose>
									<xsl:when test="n1:IsDMDImport = &apos;Y&apos;">
										<xsl:variable name="altova:table">
											<table border="0" cellpadding="3" cellspacing="0">
												<xsl:variable name="altova:CurrContextGrid_11" select="."/>
												<xsl:variable name="altova:ColumnData"/>
												<thead style="background-color:#d9f5ff; white-space:nowrap; ">
													<tr>
														<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:4cm; ">
															<span>
																<xsl:text>Model Name</xsl:text>
															</span>
														</th>
														<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:4cm; ">
															<span>
																<xsl:text>Sorce Name</xsl:text>
															</span>
														</th>
														<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:4cm; ">
															<span>
																<xsl:text>Target Name</xsl:text>
															</span>
														</th>
														<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:3cm; ">
															<span>
																<xsl:text>Type</xsl:text>
															</span>
														</th>
														<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:2cm; ">
															<span>
																<xsl:text>Status</xsl:text>
															</span>
														</th>
													</tr>
												</thead>
												<tbody>
													<xsl:for-each select="n1:ObjectsCollection">
														<xsl:for-each select="n1:ObjectDetails">
															<xsl:for-each select="n1:Object">
																<tr>
																	<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:4cm; ">
																		<xsl:for-each select="@DMDImpModelName">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																		<br/>
																	</td>
																	<td style="background-color:#ecfefa; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:4cm; ">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="@SourceValue">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(@SourceValue) &gt; 0">
																						<xsl:for-each select="@SourceValue">
																							<span>
																								<xsl:value-of select="string(.)"/>
																							</span>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<span>
																							<xsl:text>&#160;</xsl:text>
																						</span>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="@SourceValue">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="@SourceValue">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="@SourceValue">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</td>
																	<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:4cm; ">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="@TargetValue">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(@TargetValue) &gt; 0">
																						<xsl:for-each select="@TargetValue">
																							<span>
																								<xsl:value-of select="string(.)"/>
																							</span>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<span>
																							<xsl:text>&#160;</xsl:text>
																						</span>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="@TargetValue">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="@TargetValue">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="@TargetValue">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</td>
																	<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:3cm; ">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="@Type">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(@Type) &gt; 0">
																						<xsl:for-each select="@Type">
																							<span>
																								<xsl:value-of select="string(.)"/>
																							</span>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<span>
																							<xsl:text>&#160;</xsl:text>
																						</span>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="@Type">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="@Type">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="@Type">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</td>
																	<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:2cm; ">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="@Status">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(@Status) &gt; 0">
																						<xsl:for-each select="@Status">
																							<span>
																								<xsl:value-of select="string(.)"/>
																							</span>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<span>
																							<xsl:text>&#160;</xsl:text>
																						</span>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="@Status">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="@Status">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="@Status">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</td>
																</tr>
																<xsl:for-each select="n1:PropertiesCollection">
																	<xsl:choose>
																		<xsl:when test="count( n1:PropertyDetails ) &gt;0">
																			<tr>
																				<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; width:4cm; "/>
																				<td colspan="4" style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:4cm; ">
																					<xsl:variable name="altova:table">
																						<table border="0" cellpadding="0" cellspacing="0">
																							<xsl:variable name="altova:CurrContextGrid_12" select="."/>
																							<xsl:variable name="altova:ColumnData"/>
																							<tbody>
																								<tr>
																									<td style="width:3cm; "/>
																									<td style="width:13cm; ">
																										<xsl:variable name="altova:table">
																											<table style="font-style:italic; width:12cm; " border="0" cellpadding="3" cellspacing="0">
																												<xsl:variable name="altova:CurrContextGrid_13" select="."/>
																												<xsl:variable name="altova:ColumnData"/>
																												<tbody>
																													<tr style="height:0.01cm; ">
																														<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; width:4cm; "/>
																														<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; width:4cm; "/>
																														<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; width:4cm; "/>
																													</tr>
																													<xsl:for-each select="n1:PropertyDetails">
																														<tr>
																															<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; border-left-color:black; border-left-style:dotted; border-left-width:thin; border-right-color:black; border-right-style:dotted; border-right-width:thin; width:4cm; ">
																																<xsl:choose>
																																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																		<xsl:for-each select="n1:PropertyName">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																		<xsl:choose>
																																			<xsl:when test="string-length(n1:PropertyName) &gt; 0">
																																				<xsl:for-each select="n1:PropertyName">
																																					<xsl:apply-templates/>
																																					<br/>
																																				</xsl:for-each>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<span>
																																					<xsl:text>&#160;</xsl:text>
																																				</span>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																		<xsl:for-each select="n1:PropertyName">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																		<xsl:for-each select="n1:PropertyName">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																		<xsl:for-each select="n1:PropertyName">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																</xsl:choose>
																															</td>
																															<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; border-right-color:black; border-right-style:dotted; border-right-width:thin; width:4cm; ">
																																<xsl:choose>
																																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																		<xsl:for-each select="n1:PropertyOldValue">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																		<xsl:choose>
																																			<xsl:when test="string-length(n1:PropertyOldValue) &gt; 0">
																																				<xsl:for-each select="n1:PropertyOldValue">
																																					<xsl:apply-templates/>
																																					<br/>
																																				</xsl:for-each>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<span>
																																					<xsl:text>&#160;</xsl:text>
																																				</span>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																		<xsl:for-each select="n1:PropertyOldValue">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																		<xsl:for-each select="n1:PropertyOldValue">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																		<xsl:for-each select="n1:PropertyOldValue">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																</xsl:choose>
																															</td>
																															<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; border-right-color:black; border-right-style:dotted; border-right-width:thin; width:4cm; ">
																																<xsl:choose>
																																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																		<xsl:for-each select="n1:PropertyNewValue">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																		<xsl:choose>
																																			<xsl:when test="string-length(n1:PropertyNewValue) &gt; 0">
																																				<xsl:for-each select="n1:PropertyNewValue">
																																					<xsl:apply-templates/>
																																					<br/>
																																				</xsl:for-each>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<span>
																																					<xsl:text>&#160;</xsl:text>
																																				</span>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																		<xsl:for-each select="n1:PropertyNewValue">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																		<xsl:for-each select="n1:PropertyNewValue">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																		<xsl:for-each select="n1:PropertyNewValue">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																</xsl:choose>
																															</td>
																														</tr>
																													</xsl:for-each>
																												</tbody>
																											</table>
																										</xsl:variable>
																										<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
																										<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
																										<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
																											<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
																										</xsl:apply-templates>
																									</td>
																								</tr>
																							</tbody>
																						</table>
																					</xsl:variable>
																					<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
																					<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
																					<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
																						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
																					</xsl:apply-templates>
																				</td>
																			</tr>
																		</xsl:when>
																		<xsl:otherwise/>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</tbody>
											</table>
										</xsl:variable>
										<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
										<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
										<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
											<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
										</xsl:apply-templates>
									</xsl:when>
									<xsl:otherwise>
										<xsl:variable name="altova:table">
											<table border="0" cellpadding="3" cellspacing="0">
												<xsl:variable name="altova:CurrContextGrid_14" select="."/>
												<xsl:variable name="altova:ColumnData"/>
												<thead style="background-color:#d9f5ff; white-space:nowrap; ">
													<tr>
														<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:6cm; ">
															<span>
																<xsl:text>Sorce Name</xsl:text>
															</span>
														</th>
														<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:6cm; ">
															<span>
																<xsl:text>Target Name</xsl:text>
															</span>
														</th>
														<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:3cm; ">
															<span>
																<xsl:text>Type</xsl:text>
															</span>
														</th>
														<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:2cm; ">
															<span>
																<xsl:text>Status</xsl:text>
															</span>
														</th>
													</tr>
												</thead>
												<tbody>
													<xsl:for-each select="n1:ObjectsCollection">
														<xsl:for-each select="n1:ObjectDetails">
															<xsl:for-each select="n1:Object">
																<tr>
																	<td style="background-color:#ecfefa; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:6cm; ">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="@SourceValue">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(@SourceValue) &gt; 0">
																						<xsl:for-each select="@SourceValue">
																							<span>
																								<xsl:value-of select="string(.)"/>
																							</span>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<span>
																							<xsl:text>&#160;</xsl:text>
																						</span>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="@SourceValue">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="@SourceValue">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="@SourceValue">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</td>
																	<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:6cm; ">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="@TargetValue">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(@TargetValue) &gt; 0">
																						<xsl:for-each select="@TargetValue">
																							<span>
																								<xsl:value-of select="string(.)"/>
																							</span>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<span>
																							<xsl:text>&#160;</xsl:text>
																						</span>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="@TargetValue">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="@TargetValue">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="@TargetValue">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</td>
																	<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:3cm; ">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="@Type">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(@Type) &gt; 0">
																						<xsl:for-each select="@Type">
																							<span>
																								<xsl:value-of select="string(.)"/>
																							</span>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<span>
																							<xsl:text>&#160;</xsl:text>
																						</span>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="@Type">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="@Type">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="@Type">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</td>
																	<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:2cm; ">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="@Status">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(@Status) &gt; 0">
																						<xsl:for-each select="@Status">
																							<span>
																								<xsl:value-of select="string(.)"/>
																							</span>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<span>
																							<xsl:text>&#160;</xsl:text>
																						</span>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="@Status">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="@Status">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="@Status">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</td>
																</tr>
																<xsl:for-each select="n1:PropertiesCollection">
																	<xsl:choose>
																		<xsl:when test="count( n1:PropertyDetails ) &gt;0">
																			<tr>
																				<td colspan="4" style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:6cm; ">
																					<xsl:variable name="altova:table">
																						<table style="font-size:xx-small; " border="0" cellpadding="0" cellspacing="0">
																							<xsl:variable name="altova:CurrContextGrid_15" select="."/>
																							<xsl:variable name="altova:ColumnData"/>
																							<tbody>
																								<tr>
																									<td style="width:3cm; "/>
																									<td style="width:13cm; ">
																										<xsl:variable name="altova:table">
																											<table style="font-style:italic; width:12cm; " border="0" cellpadding="3" cellspacing="0">
																												<xsl:variable name="altova:CurrContextGrid_16" select="."/>
																												<xsl:variable name="altova:ColumnData"/>
																												<tbody>
																													<xsl:for-each select="n1:PropertyDetails">
																														<tr>
																															<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; border-left-color:black; border-left-style:dotted; border-left-width:thin; border-right-color:black; border-right-style:dotted; border-right-width:thin; border-top-color:black; border-top-style:dotted; border-top-width:thin; width:4cm; ">
																																<xsl:choose>
																																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																		<xsl:for-each select="n1:PropertyName">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																		<xsl:choose>
																																			<xsl:when test="string-length(n1:PropertyName) &gt; 0">
																																				<xsl:for-each select="n1:PropertyName">
																																					<xsl:apply-templates/>
																																					<br/>
																																				</xsl:for-each>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<span>
																																					<xsl:text>&#160;</xsl:text>
																																				</span>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																		<xsl:for-each select="n1:PropertyName">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																		<xsl:for-each select="n1:PropertyName">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																		<xsl:for-each select="n1:PropertyName">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																</xsl:choose>
																															</td>
																															<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; border-right-color:black; border-right-style:dotted; border-right-width:thin; border-top-color:black; border-top-style:dotted; border-top-width:thin; width:4cm; ">
																																<xsl:choose>
																																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																		<xsl:for-each select="n1:PropertyOldValue">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																		<xsl:choose>
																																			<xsl:when test="string-length(n1:PropertyOldValue) &gt; 0">
																																				<xsl:for-each select="n1:PropertyOldValue">
																																					<xsl:apply-templates/>
																																					<br/>
																																				</xsl:for-each>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<span>
																																					<xsl:text>&#160;</xsl:text>
																																				</span>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																		<xsl:for-each select="n1:PropertyOldValue">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																		<xsl:for-each select="n1:PropertyOldValue">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																		<xsl:for-each select="n1:PropertyOldValue">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																</xsl:choose>
																															</td>
																															<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; border-right-color:black; border-right-style:dotted; border-right-width:thin; border-top-color:black; border-top-style:dotted; border-top-width:thin; width:4cm; ">
																																<xsl:choose>
																																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																		<xsl:for-each select="n1:PropertyNewValue">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																		<xsl:choose>
																																			<xsl:when test="string-length(n1:PropertyNewValue) &gt; 0">
																																				<xsl:for-each select="n1:PropertyNewValue">
																																					<xsl:apply-templates/>
																																					<br/>
																																				</xsl:for-each>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<span>
																																					<xsl:text>&#160;</xsl:text>
																																				</span>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																		<xsl:for-each select="n1:PropertyNewValue">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																		<xsl:for-each select="n1:PropertyNewValue">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																		<xsl:for-each select="n1:PropertyNewValue">
																																			<xsl:apply-templates/>
																																			<br/>
																																		</xsl:for-each>
																																	</xsl:when>
																																</xsl:choose>
																															</td>
																														</tr>
																													</xsl:for-each>
																												</tbody>
																											</table>
																										</xsl:variable>
																										<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
																										<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
																										<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
																											<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
																										</xsl:apply-templates>
																									</td>
																								</tr>
																							</tbody>
																						</table>
																					</xsl:variable>
																					<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
																					<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
																					<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
																						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
																					</xsl:apply-templates>
																				</td>
																			</tr>
																		</xsl:when>
																		<xsl:otherwise/>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</tbody>
											</table>
										</xsl:variable>
										<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
										<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
										<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
											<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
										</xsl:apply-templates>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:for-each>
				</xsl:for-each>
				<br/>
			</body>
		</html>
	</xsl:template>
	<xsl:function name="altova:is-cell-empty" as="xs:boolean">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="altova:is-node-empty( $altova:cell )"/>
	</xsl:function>
	<xsl:function name="altova:is-node-empty" as="xs:boolean">
		<xsl:param name="altova:node" as="element()"/>
		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( ( boolean( $altova:child/self::text() ) and string-length( $altova:child ) = 0 ) or ( ( boolean( $altova:child/self::div ) or boolean( $altova:child/self::span ) or boolean( $altova:child/self::a ) ) and altova:is-node-empty( $altova:child ) ) )"/>
	</xsl:function>
	<xsl:function name="altova:col-span" as="xs:integer">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="if ( exists( $altova:cell/@colspan ) ) then xs:integer( $altova:cell/@colspan ) else 1"/>
	</xsl:function>
	<xsl:template match="@* | node()" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current">
				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="tbody" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:choose>
			<xsl:when test="empty(tr)">
				<xsl:copy>
					<tr>
						<td/>
					</tr>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="th | td" mode="altova:generate-table">
		<xsl:choose>
			<xsl:when test="altova:is-cell-empty( . )">
				<xsl:copy>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:text>&#160;</xsl:text>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId) gt 1">
				<xsl:message select="concat('Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId) lt 1">
				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>
				<xsl:sequence select="'altova:no-value'"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-pixel" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="substring-before($normLength, 'px')"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * $altova:nPxPerIn"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * $altova:nPxPerIn div 2.54"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'mm')) * $altova:nPxPerIn div 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * $altova:nPxPerIn div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * $altova:nPxPerIn div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$normLength"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-mm" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'px')) div $altova:nPxPerIn * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * 10"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="substring-before($normLength, 'mm') "/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * 25.4 div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * 25.4 div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="number($normLength) div $altova:nPxPerIn * 25.4"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
</xsl:stylesheet>
