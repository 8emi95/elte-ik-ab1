<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2013 (x64) - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="osdm_e" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="#all">
	<xsl:output version="4.0" method="html" indent="no" encoding="UTF-8" use-character-maps="spaces" doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd"/>
	<xsl:character-map name="spaces">
		<xsl:output-character character="&#160;" string="&amp;nbsp;"/>
	</xsl:character-map>
	<xsl:param name="altova:bGeneratingFromPxf" select="false()"/>
	<xsl:param name="SV_OutputFormat" select="'HTML'"/>
	<xsl:param name="SV_BaseOutputFileName" as="xs:string?">
		<xsl:sequence select="for $i in altovaext:get-base-output-uri(), $j in tokenize( $i, &apos;[/\\]&apos; )[last()] return replace( $j, &apos;\.[^\.\s#%;]*$&apos;, &apos;&apos; )" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>
	</xsl:param>
	<xsl:param name="SV_GeneratedFileNamePrefix" select="if ( $SV_BaseOutputFileName ) then $SV_BaseOutputFileName else &apos;SingleEntityDetails&apos;" as="xs:string?"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:variable name="altova:CssImages" select="()"/>
	<xsl:template match="/">
		<xsl:call-template name="altova:Root"/>
	</xsl:template>
	<xsl:template name="altova:Root">
		<html>
			<head>
				<title/>
				<meta name="generator" content="Altova StyleVision Enterprise Edition 2013 (x64) (http://www.altova.com)"/>
				<meta http-equiv="X-UA-Compatible" content="IE=7"/>
				<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>
				<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>
				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(-90deg) translate(-100%, 0%); -ms-transform-origin: 0% 0%;}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(90deg) translate(0%, -100%); -ms-transform-origin: 0% 0%;}</style>
				<xsl:comment>&lt;![endif]</xsl:comment>
				<style type="text/css">@page { margin-left:2cm; margin-right:2cm; margin-top:2cm; margin-bottom:2cm } @media print { br.altova-page-break { page-break-before: always; } }</style>
			</head>
			<body style="empty-cells:show; font-family:Tahoma; font-size:xx-small; text-align:left; vertical-align:top; word-wrap:break-word; ">
				<xsl:for-each select="$XML">
					<xsl:for-each select="n1:root">
						<br/>
						<center>
							<xsl:for-each select="n1:ReportCaption">
								<span style="font-size:medium; font-weight:bold; ">
									<xsl:apply-templates/>
								</span>
							</xsl:for-each>
						</center>
						<br/>
						<br/>
						<xsl:variable name="altova:table">
							<table style="width:20cm; " border="0" cellpadding="3" cellspacing="0">
								<xsl:variable name="altova:CurrContextGrid_0" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<tr>
										<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; width:4cm; ">
											<span>
												<xsl:text>Design Name</xsl:text>
											</span>
										</th>
										<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; width:16cm; ">
											<xsl:choose>
												<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
													<xsl:for-each select="n1:DesignName">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
													<xsl:choose>
														<xsl:when test="string-length(n1:DesignName) &gt; 0">
															<xsl:for-each select="n1:DesignName">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise>
															<span>
																<xsl:text>&#160;</xsl:text>
															</span>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
													<xsl:for-each select="n1:DesignName">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
													<xsl:for-each select="n1:DesignName">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
													<xsl:for-each select="n1:DesignName">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
											</xsl:choose>
										</td>
									</tr>
									<tr>
										<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:4cm; ">
											<span>
												<xsl:text>Version Date</xsl:text>
											</span>
										</th>
										<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:16cm; ">
											<xsl:choose>
												<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
													<xsl:for-each select="n1:VersionDate">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
													<xsl:choose>
														<xsl:when test="string-length(n1:VersionDate) &gt; 0">
															<xsl:for-each select="n1:VersionDate">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise>
															<span>
																<xsl:text>&#160;</xsl:text>
															</span>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
													<xsl:for-each select="n1:VersionDate">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
													<xsl:for-each select="n1:VersionDate">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
													<xsl:for-each select="n1:VersionDate">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
											</xsl:choose>
										</td>
									</tr>
									<tr>
										<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:4cm; ">
											<span>
												<xsl:text>Version Comment</xsl:text>
											</span>
										</th>
										<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:16cm; ">
											<xsl:choose>
												<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
													<xsl:for-each select="n1:VersionComment">
														<xsl:for-each select="n1:VersionCommentDetails">
															<xsl:for-each select="n1:VersionCommentRow">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
													<xsl:choose>
														<xsl:when test="count(n1:VersionComment/n1:VersionCommentDetails/n1:VersionCommentRow) &gt; 0">
															<xsl:for-each select="n1:VersionComment">
																<xsl:for-each select="n1:VersionCommentDetails">
																	<xsl:for-each select="n1:VersionCommentRow">
																		<xsl:apply-templates/>
																		<br/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise>
															<span>
																<xsl:text>&#160;</xsl:text>
															</span>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
													<xsl:choose>
														<xsl:when test="count(n1:VersionComment/n1:VersionCommentDetails/n1:VersionCommentRow) &gt; 0">
															<xsl:for-each select="n1:VersionComment">
																<xsl:for-each select="n1:VersionCommentDetails">
																	<xsl:for-each select="n1:VersionCommentRow">
																		<xsl:apply-templates/>
																		<br/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise/>
													</xsl:choose>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
													<xsl:for-each select="n1:VersionComment">
														<xsl:for-each select="n1:VersionCommentDetails">
															<xsl:for-each select="n1:VersionCommentRow">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
													<xsl:for-each select="n1:VersionComment">
														<xsl:for-each select="n1:VersionCommentDetails">
															<xsl:for-each select="n1:VersionCommentRow">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:when>
											</xsl:choose>
										</td>
									</tr>
									<tr>
										<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:4cm; ">
											<span>
												<xsl:text>Model Name</xsl:text>
											</span>
										</th>
										<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:16cm; ">
											<xsl:choose>
												<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
													<xsl:for-each select="n1:ModelName">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
													<xsl:choose>
														<xsl:when test="string-length(n1:ModelName) &gt; 0">
															<xsl:for-each select="n1:ModelName">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise>
															<span>
																<xsl:text>&#160;</xsl:text>
															</span>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
													<xsl:for-each select="n1:ModelName">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
													<xsl:for-each select="n1:ModelName">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
													<xsl:for-each select="n1:ModelName">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
											</xsl:choose>
										</td>
									</tr>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
							<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
						</xsl:apply-templates>
						<span>
							<xsl:text>&#160;</xsl:text>
						</span>
						<xsl:variable name="altova:table">
							<table style="width:25cm; " border="0" cellpadding="0" cellspacing="0">
								<xsl:variable name="altova:CurrContextGrid_1" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<tr>
										<td style="width:15cm; ">
											<xsl:variable name="altova:table">
												<table style="width:15cm; " border="0" cellpadding="3" cellspacing="0">
													<xsl:variable name="altova:CurrContextGrid_2" select="."/>
													<xsl:variable name="altova:ColumnData"/>
													<tbody>
														<tr>
															<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; width:4cm; ">
																<span>
																	<xsl:text>Entity Name</xsl:text>
																</span>
															</th>
															<td style="background-color:#a5e7ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; width:11cm; ">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<h1>
																			<xsl:for-each select="n1:EntityName">
																				<span style="font-size:xx-small; ">
																					<xsl:apply-templates/>
																				</span>
																			</xsl:for-each>
																		</h1>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:EntityName) &gt; 0">
																				<h1>
																					<xsl:for-each select="n1:EntityName">
																						<span style="font-size:xx-small; ">
																							<xsl:apply-templates/>
																						</span>
																					</xsl:for-each>
																				</h1>
																			</xsl:when>
																			<xsl:otherwise>
																				<span style="font-size:x-small; ">
																					<xsl:text>&#160;</xsl:text>
																				</span>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<h1>
																			<xsl:for-each select="n1:EntityName">
																				<span style="font-size:xx-small; ">
																					<xsl:apply-templates/>
																				</span>
																			</xsl:for-each>
																		</h1>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<h1>
																			<xsl:for-each select="n1:EntityName">
																				<span style="font-size:xx-small; ">
																					<xsl:apply-templates/>
																				</span>
																			</xsl:for-each>
																		</h1>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<h1>
																			<xsl:for-each select="n1:EntityName">
																				<span style="font-size:xx-small; ">
																					<xsl:apply-templates/>
																				</span>
																			</xsl:for-each>
																		</h1>
																	</xsl:when>
																</xsl:choose>
															</td>
														</tr>
														<tr>
															<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:4cm; ">
																<span>
																	<xsl:text>Preferred Abbreviation</xsl:text>
																</span>
															</th>
															<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:11cm; ">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:Abbreviation">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:Abbreviation) &gt; 0">
																				<xsl:for-each select="n1:Abbreviation">
																					<xsl:apply-templates/>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<span>
																					<xsl:text>&#160;</xsl:text>
																				</span>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:Abbreviation">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:Abbreviation">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:Abbreviation">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</td>
														</tr>
														<tr>
															<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:4cm; ">
																<span>
																	<xsl:text>Classification Type Name</xsl:text>
																</span>
															</th>
															<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:11cm; ">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:ClassificationTypeName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:ClassificationTypeName) &gt; 0">
																				<xsl:for-each select="n1:ClassificationTypeName">
																					<xsl:apply-templates/>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<span>
																					<xsl:text>&#160;</xsl:text>
																				</span>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:ClassificationTypeName">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:ClassificationTypeName">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:ClassificationTypeName">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</td>
														</tr>
														<tr>
															<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:4cm; ">
																<span>
																	<xsl:text>Object Type Name</xsl:text>
																</span>
															</th>
															<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:11cm; ">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:ObjectTypeName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:ObjectTypeName) &gt; 0">
																				<xsl:for-each select="n1:ObjectTypeName">
																					<xsl:apply-templates/>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<span>
																					<xsl:text>&#160;</xsl:text>
																				</span>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:ObjectTypeName">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:ObjectTypeName">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:ObjectTypeName">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</td>
														</tr>
														<tr>
															<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:4cm; ">
																<span>
																	<xsl:text>Super Type</xsl:text>
																</span>
															</th>
															<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:11cm; ">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:SuperType">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:SuperType) &gt; 0">
																				<xsl:for-each select="n1:SuperType">
																					<xsl:apply-templates/>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<span>
																					<xsl:text>&#160;</xsl:text>
																				</span>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:SuperType">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:SuperType">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:SuperType">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</td>
														</tr>
														<tr>
															<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:4cm; ">
																<span>
																	<xsl:text>Synonyms</xsl:text>
																</span>
															</th>
															<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:11cm; ">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:Synonyms">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:Synonyms) &gt; 0">
																				<xsl:for-each select="n1:Synonyms">
																					<xsl:apply-templates/>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<span>
																					<xsl:text>&#160;</xsl:text>
																				</span>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:Synonyms">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:Synonyms">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:Synonyms">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</td>
														</tr>
													</tbody>
												</table>
											</xsl:variable>
											<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
											<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
											<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
												<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
											</xsl:apply-templates>
										</td>
										<td style="width:1cm; "/>
										<td style="font-size:xx-small; vertical-align:top; width:8cm; ">
											<xsl:if test="count( n1:MappedTablesCollection )">
												<span style="font-size:xx-small; font-style:italic; ">
													<xsl:text>Mapped Tables</xsl:text>
												</span>
												<br/>
												<xsl:variable name="altova:table">
													<table style="width:8cm; " border="0" cellpadding="3" cellspacing="0" width="100%">
														<xsl:variable name="altova:CurrContextGrid_3" select="."/>
														<xsl:variable name="altova:ColumnData"/>
														<tbody>
															<tr style="background-color:#d9f5ff; ">
																<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; font-weight:bold; text-align:center; width:8cm; ">
																	<span>
																		<xsl:text>Table Name</xsl:text>
																	</span>
																</td>
															</tr>
															<xsl:for-each select="n1:MappedTablesCollection">
																<xsl:for-each select="n1:MappedTablesDetails">
																	<tr>
																		<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:left; width:8cm; ">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:TableName">
																						<xsl:apply-templates/>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:TableName) &gt; 0">
																							<xsl:for-each select="n1:TableName">
																								<xsl:apply-templates/>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:TableName">
																						<xsl:apply-templates/>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:TableName">
																						<xsl:apply-templates/>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:TableName">
																						<xsl:apply-templates/>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</td>
																	</tr>
																</xsl:for-each>
															</xsl:for-each>
														</tbody>
													</table>
												</xsl:variable>
												<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
												<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
												<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
													<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
												</xsl:apply-templates>
											</xsl:if>
										</td>
									</tr>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
							<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
						</xsl:apply-templates>
						<span>
							<xsl:text>&#160;</xsl:text>
						</span>
						<xsl:if test="count( n1:DescriptionNotes )">
							<br/>
							<xsl:for-each select="n1:DescriptionNotes">
								<xsl:variable name="altova:table">
									<table style="width:20cm; " border="0" cellpadding="3" cellspacing="0">
										<xsl:variable name="altova:CurrContextGrid_4" select="."/>
										<xsl:variable name="altova:ColumnData"/>
										<tbody>
											<tr>
												<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; width:4cm; ">
													<span>
														<xsl:text>Description</xsl:text>
													</span>
												</th>
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; width:16cm; ">
													<xsl:choose>
														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
															<xsl:for-each select="n1:Description">
																<xsl:for-each select="n1:DescriptionDetails">
																	<xsl:for-each select="n1:DescriptionRow">
																		<xsl:apply-templates/>
																		<br/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
															<xsl:choose>
																<xsl:when test="count(n1:Description/n1:DescriptionDetails/n1:DescriptionRow) &gt; 0">
																	<xsl:for-each select="n1:Description">
																		<xsl:for-each select="n1:DescriptionDetails">
																			<xsl:for-each select="n1:DescriptionRow">
																				<xsl:apply-templates/>
																				<br/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
															<xsl:choose>
																<xsl:when test="count(n1:Description/n1:DescriptionDetails/n1:DescriptionRow) &gt; 0">
																	<xsl:for-each select="n1:Description">
																		<xsl:for-each select="n1:DescriptionDetails">
																			<xsl:for-each select="n1:DescriptionRow">
																				<xsl:apply-templates/>
																				<br/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise/>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
															<xsl:for-each select="n1:Description">
																<xsl:for-each select="n1:DescriptionDetails">
																	<xsl:for-each select="n1:DescriptionRow">
																		<xsl:apply-templates/>
																		<br/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
															<xsl:for-each select="n1:Description">
																<xsl:for-each select="n1:DescriptionDetails">
																	<xsl:for-each select="n1:DescriptionRow">
																		<xsl:apply-templates/>
																		<br/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
											<tr>
												<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:4cm; ">
													<span>
														<xsl:text>Notes</xsl:text>
													</span>
												</th>
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:16cm; ">
													<xsl:choose>
														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
															<xsl:for-each select="n1:Notes">
																<xsl:for-each select="n1:NotesDetails">
																	<xsl:for-each select="n1:NoteRow">
																		<xsl:apply-templates/>
																		<br/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
															<xsl:choose>
																<xsl:when test="count(n1:Notes/n1:NotesDetails/n1:NoteRow) &gt; 0">
																	<xsl:for-each select="n1:Notes">
																		<xsl:for-each select="n1:NotesDetails">
																			<xsl:for-each select="n1:NoteRow">
																				<xsl:apply-templates/>
																				<br/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
															<xsl:choose>
																<xsl:when test="count(n1:Notes/n1:NotesDetails/n1:NoteRow) &gt; 0">
																	<xsl:for-each select="n1:Notes">
																		<xsl:for-each select="n1:NotesDetails">
																			<xsl:for-each select="n1:NoteRow">
																				<xsl:apply-templates/>
																				<br/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise/>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
															<xsl:for-each select="n1:Notes">
																<xsl:for-each select="n1:NotesDetails">
																	<xsl:for-each select="n1:NoteRow">
																		<xsl:apply-templates/>
																		<br/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
															<xsl:for-each select="n1:Notes">
																<xsl:for-each select="n1:NotesDetails">
																	<xsl:for-each select="n1:NoteRow">
																		<xsl:apply-templates/>
																		<br/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
										</tbody>
									</table>
								</xsl:variable>
								<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
								<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
								<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
									<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								</xsl:apply-templates>
							</xsl:for-each>
						</xsl:if>
						<span>
							<xsl:text>&#160;</xsl:text>
						</span>
						<xsl:if test="count( n1:QuantitativeInfoCollection )">
							<br/>
							<xsl:for-each select="n1:QuantitativeInfoCollection">
								<xsl:variable name="altova:table">
									<table style="width:8cm; " border="0" cellpadding="3" cellspacing="0">
										<xsl:variable name="altova:CurrContextGrid_5" select="."/>
										<xsl:variable name="altova:ColumnData"/>
										<tbody>
											<tr>
												<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; width:4cm; ">
													<span>
														<xsl:text>Number Of Attributes</xsl:text>
													</span>
												</th>
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:right; width:4cm; ">
													<xsl:choose>
														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
															<xsl:for-each select="n1:NumberOfAttributes">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
															<xsl:choose>
																<xsl:when test="string-length(n1:NumberOfAttributes) &gt; 0">
																	<xsl:for-each select="n1:NumberOfAttributes">
																		<xsl:apply-templates/>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
															<xsl:for-each select="n1:NumberOfAttributes">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
															<xsl:for-each select="n1:NumberOfAttributes">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
															<xsl:for-each select="n1:NumberOfAttributes">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
											<tr>
												<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:4cm; ">
													<span>
														<xsl:text>Number Of Rows Min.</xsl:text>
													</span>
												</th>
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:right; width:4cm; ">
													<xsl:choose>
														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
															<xsl:for-each select="n1:NumberOfRowsMin">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
															<xsl:choose>
																<xsl:when test="string-length(n1:NumberOfRowsMin) &gt; 0">
																	<xsl:for-each select="n1:NumberOfRowsMin">
																		<xsl:apply-templates/>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
															<xsl:for-each select="n1:NumberOfRowsMin">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
															<xsl:for-each select="n1:NumberOfRowsMin">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
															<xsl:for-each select="n1:NumberOfRowsMin">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
											<tr>
												<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:4cm; ">
													<span>
														<xsl:text>Number Of Rows Max.</xsl:text>
													</span>
												</th>
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:right; width:4cm; ">
													<xsl:choose>
														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
															<xsl:for-each select="n1:NumberOfRowsMax">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
															<xsl:choose>
																<xsl:when test="string-length(n1:NumberOfRowsMax) &gt; 0">
																	<xsl:for-each select="n1:NumberOfRowsMax">
																		<xsl:apply-templates/>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
															<xsl:for-each select="n1:NumberOfRowsMax">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
															<xsl:for-each select="n1:NumberOfRowsMax">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
															<xsl:for-each select="n1:NumberOfRowsMax">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
											<tr>
												<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:4cm; ">
													<span>
														<xsl:text>Expected Number Of Rows</xsl:text>
													</span>
												</th>
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:right; width:4cm; ">
													<xsl:choose>
														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
															<xsl:for-each select="n1:ExpectedNumberOfRows">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
															<xsl:choose>
																<xsl:when test="string-length(n1:ExpectedNumberOfRows) &gt; 0">
																	<xsl:for-each select="n1:ExpectedNumberOfRows">
																		<xsl:apply-templates/>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
															<xsl:for-each select="n1:ExpectedNumberOfRows">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
															<xsl:for-each select="n1:ExpectedNumberOfRows">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
															<xsl:for-each select="n1:ExpectedNumberOfRows">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
											<tr>
												<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:4cm; ">
													<span>
														<xsl:text>Expected Growth</xsl:text>
													</span>
												</th>
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:right; width:4cm; ">
													<xsl:choose>
														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
															<xsl:for-each select="n1:ExpectedGrowth">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
															<xsl:choose>
																<xsl:when test="string-length(n1:ExpectedGrowth) &gt; 0">
																	<xsl:for-each select="n1:ExpectedGrowth">
																		<xsl:apply-templates/>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
															<xsl:for-each select="n1:ExpectedGrowth">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
															<xsl:for-each select="n1:ExpectedGrowth">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
															<xsl:for-each select="n1:ExpectedGrowth">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
											<tr>
												<th style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:4cm; ">
													<span>
														<xsl:text>Growth Interval</xsl:text>
													</span>
												</th>
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:right; width:4cm; ">
													<xsl:choose>
														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
															<xsl:for-each select="n1:GrowthInterval">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
															<xsl:choose>
																<xsl:when test="string-length(n1:GrowthInterval) &gt; 0">
																	<xsl:for-each select="n1:GrowthInterval">
																		<xsl:apply-templates/>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
															<xsl:for-each select="n1:GrowthInterval">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
															<xsl:for-each select="n1:GrowthInterval">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
															<xsl:for-each select="n1:GrowthInterval">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
										</tbody>
									</table>
								</xsl:variable>
								<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
								<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
								<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
									<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								</xsl:apply-templates>
							</xsl:for-each>
						</xsl:if>
						<xsl:if test="count( n1:DiagramsCollection)">
							<br/>
							<span style="font-size:xx-small; font-style:italic; ">
								<xsl:text>Used In Diagrams</xsl:text>
							</span>
							<br/>
							<xsl:variable name="altova:table">
								<table style="width:8cm; " border="0" cellpadding="3" cellspacing="0" width="100%">
									<xsl:variable name="altova:CurrContextGrid_6" select="."/>
									<xsl:variable name="altova:ColumnData"/>
									<tbody>
										<tr style="background-color:#d9f5ff; ">
											<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; font-weight:bold; text-align:center; width:8cm; ">
												<span>
													<xsl:text>Diagram Name</xsl:text>
												</span>
											</td>
										</tr>
										<xsl:for-each select="n1:DiagramsCollection">
											<tr>
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:left; width:8cm; ">
													<xsl:for-each select="n1:DiagramName">
														<a>
															<xsl:choose>
																<xsl:when test="not(string(.))">
																	<xsl:attribute name="href">
																		<xsl:text>#</xsl:text>
																	</xsl:attribute>
																</xsl:when>
																<xsl:when test="substring(string(.), 1, 1) = '#'">
																	<xsl:attribute name="href">
																		<xsl:value-of select="."/>
																	</xsl:attribute>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:attribute name="href">
																		<xsl:if test="substring(string(.), 2, 1) = ':'">
																			<xsl:text>file:///</xsl:text>
																		</xsl:if>
																		<xsl:value-of select="translate(string(.), '&#x5c;', '/')"/>
																	</xsl:attribute>
																</xsl:otherwise>
															</xsl:choose>
															<span>
																<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>
															</span>
															<br/>
														</a>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</tbody>
								</table>
							</xsl:variable>
							<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
							<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							</xsl:apply-templates>
						</xsl:if>
						<xsl:if test="count( n1:AttributesCollection )">
							<br/>
							<span style="font-size:xx-small; font-style:italic; ">
								<xsl:text>Attributes</xsl:text>
							</span>
							<xsl:variable name="altova:table">
								<table style="width:25cm; " border="0" cellpadding="3" cellspacing="0">
									<xsl:variable name="altova:CurrContextGrid_7" select="."/>
									<xsl:variable name="altova:ColumnData"/>
									<thead style="background-color:#d9f5ff; text-align:center; ">
										<tr>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:1cm; ">
												<span>
													<xsl:text>No</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:5cm; ">
												<span>
													<xsl:text>Attribute Name</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:0.80cm; ">
												<span>
													<xsl:text>PK</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:0.80cm; ">
												<span>
													<xsl:text>FK</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:0.80cm; ">
												<span>
													<xsl:text>M</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:4.0cm; ">
												<span>
													<xsl:text>Data Type</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:1cm; ">
												<span>
													<xsl:text>DT </xsl:text>
												</span>
												<br/>
												<span>
													<xsl:text>kind</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:2.9cm; ">
												<span>
													<xsl:text>Domain Name</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:2.9cm; ">
												<span>
													<xsl:text>Formula</xsl:text>
												</span>
												<br/>
												<span>
													<xsl:text>(Default Value)</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:2.9cm; ">
												<span>
													<xsl:text>Preferred Abbreviation</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:2.9cm; ">
												<span>
													<xsl:text>Synonyms</xsl:text>
												</span>
											</th>
										</tr>
									</thead>
									<tbody>
										<xsl:for-each select="n1:AttributesCollection">
											<xsl:for-each select="n1:AttributeDetails">
												<tr>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:right; vertical-align:top; width:1cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:Sequence">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:Sequence) &gt; 0">
																		<xsl:for-each select="n1:Sequence">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:Sequence">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:Sequence">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:Sequence">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; vertical-align:top; width:5cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:AttributeName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:AttributeName) &gt; 0">
																		<xsl:for-each select="n1:AttributeName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:AttributeName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:AttributeName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:AttributeName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; vertical-align:top; width:0.80cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:PK">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:PK) &gt; 0">
																		<xsl:for-each select="n1:PK">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:PK">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:PK">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:PK">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; vertical-align:top; width:0.80cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:FK">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:FK) &gt; 0">
																		<xsl:for-each select="n1:FK">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:FK">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:FK">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:FK">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; vertical-align:top; width:0.80cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:M">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:M) &gt; 0">
																		<xsl:for-each select="n1:M">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:M">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:M">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:M">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:left; vertical-align:top; width:4.0cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:DataType">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:DataType) &gt; 0">
																		<xsl:for-each select="n1:DataType">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:DataType">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:DataType">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:DataType">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; vertical-align:top; width:1cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:DataTypeKind">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:DataTypeKind) &gt; 0">
																		<xsl:for-each select="n1:DataTypeKind">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:DataTypeKind">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:DataTypeKind">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:DataTypeKind">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; vertical-align:top; width:2.9cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:DomainName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:DomainName) &gt; 0">
																		<xsl:for-each select="n1:DomainName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:DomainName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:DomainName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:DomainName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; vertical-align:top; width:2.9cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:Formula">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:Formula) &gt; 0">
																		<xsl:for-each select="n1:Formula">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:Formula">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:Formula">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:Formula">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; vertical-align:top; width:2.9cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:PreferredAbbreviation">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:PreferredAbbreviation) &gt; 0">
																		<xsl:for-each select="n1:PreferredAbbreviation">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:PreferredAbbreviation">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:PreferredAbbreviation">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:PreferredAbbreviation">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; vertical-align:top; width:2.9cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:AttributeSynonyms">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:AttributeSynonyms) &gt; 0">
																		<xsl:for-each select="n1:AttributeSynonyms">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:AttributeSynonyms">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:AttributeSynonyms">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:AttributeSynonyms">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</tbody>
								</table>
							</xsl:variable>
							<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
							<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							</xsl:apply-templates>
						</xsl:if>
						<xsl:if test="count( n1:AttributesCommentsCollection )">
							<br/>
							<span style="font-size:xx-small; font-style:italic; ">
								<xsl:text>Attributes Comments</xsl:text>
							</span>
							<xsl:variable name="altova:table">
								<table style="width:25cm; " border="0" cellpadding="3" cellspacing="0">
									<xsl:variable name="altova:CurrContextGrid_8" select="."/>
									<xsl:variable name="altova:ColumnData"/>
									<thead style="background-color:#d9f5ff; ">
										<tr>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:1cm; ">
												<span>
													<xsl:text>No</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:6cm; ">
												<span>
													<xsl:text>Attribute Name</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:9cm; ">
												<span>
													<xsl:text>Description</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:9cm; ">
												<span>
													<xsl:text>Notes</xsl:text>
												</span>
											</th>
										</tr>
									</thead>
									<tbody>
										<xsl:for-each select="n1:AttributesCommentsCollection">
											<xsl:for-each select="n1:AttributeCommentsDetails">
												<tr>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:right; vertical-align:top; width:1cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:AttributeCommentsSequence">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:AttributeCommentsSequence) &gt; 0">
																		<xsl:for-each select="n1:AttributeCommentsSequence">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:AttributeCommentsSequence">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:AttributeCommentsSequence">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:AttributeCommentsSequence">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; vertical-align:top; width:6cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:AttributeCommentsName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:AttributeCommentsName) &gt; 0">
																		<xsl:for-each select="n1:AttributeCommentsName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:AttributeCommentsName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:AttributeCommentsName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:AttributeCommentsName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; vertical-align:top; width:9cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:AttributeDescription">
																	<xsl:for-each select="n1:AttributeDescriptionDetails">
																		<xsl:for-each select="n1:AttributeDescriptionRow">
																			<xsl:apply-templates/>
																			<br/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="count(n1:AttributeDescription/n1:AttributeDescriptionDetails/n1:AttributeDescriptionRow) &gt; 0">
																		<xsl:for-each select="n1:AttributeDescription">
																			<xsl:for-each select="n1:AttributeDescriptionDetails">
																				<xsl:for-each select="n1:AttributeDescriptionRow">
																					<xsl:apply-templates/>
																					<br/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:choose>
																	<xsl:when test="count(n1:AttributeDescription/n1:AttributeDescriptionDetails/n1:AttributeDescriptionRow) &gt; 0">
																		<xsl:for-each select="n1:AttributeDescription">
																			<xsl:for-each select="n1:AttributeDescriptionDetails">
																				<xsl:for-each select="n1:AttributeDescriptionRow">
																					<xsl:apply-templates/>
																					<br/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise/>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:AttributeDescription">
																	<xsl:for-each select="n1:AttributeDescriptionDetails">
																		<xsl:for-each select="n1:AttributeDescriptionRow">
																			<xsl:apply-templates/>
																			<br/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:AttributeDescription">
																	<xsl:for-each select="n1:AttributeDescriptionDetails">
																		<xsl:for-each select="n1:AttributeDescriptionRow">
																			<xsl:apply-templates/>
																			<br/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; vertical-align:top; width:9cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:AttributeNotes">
																	<xsl:for-each select="n1:AttributeNotesDetails">
																		<xsl:for-each select="n1:AttributeNoteRow">
																			<xsl:apply-templates/>
																			<br/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="count(n1:AttributeNotes/n1:AttributeNotesDetails/n1:AttributeNoteRow) &gt; 0">
																		<xsl:for-each select="n1:AttributeNotes">
																			<xsl:for-each select="n1:AttributeNotesDetails">
																				<xsl:for-each select="n1:AttributeNoteRow">
																					<xsl:apply-templates/>
																					<br/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:choose>
																	<xsl:when test="count(n1:AttributeNotes/n1:AttributeNotesDetails/n1:AttributeNoteRow) &gt; 0">
																		<xsl:for-each select="n1:AttributeNotes">
																			<xsl:for-each select="n1:AttributeNotesDetails">
																				<xsl:for-each select="n1:AttributeNoteRow">
																					<xsl:apply-templates/>
																					<br/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise/>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:AttributeNotes">
																	<xsl:for-each select="n1:AttributeNotesDetails">
																		<xsl:for-each select="n1:AttributeNoteRow">
																			<xsl:apply-templates/>
																			<br/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:AttributeNotes">
																	<xsl:for-each select="n1:AttributeNotesDetails">
																		<xsl:for-each select="n1:AttributeNoteRow">
																			<xsl:apply-templates/>
																			<br/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</tbody>
								</table>
							</xsl:variable>
							<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
							<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							</xsl:apply-templates>
						</xsl:if>
						<xsl:if test="count( n1:ConstraintsCollection )">
							<br/>
							<span style="font-size:xx-small; font-style:italic; ">
								<xsl:text>Constraints</xsl:text>
							</span>
							<xsl:variable name="altova:table">
								<table style="width:25cm; " border="0" cellpadding="3" cellspacing="0" width="100%">
									<xsl:variable name="altova:CurrContextGrid_9" select="."/>
									<xsl:variable name="altova:ColumnData"/>
									<thead style="background-color:#d9f5ff; ">
										<tr>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:3cm; ">
												<span style="font-size:xx-small; ">
													<xsl:text>Type</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:3cm; ">
												<span style="font-size:xx-small; ">
													<xsl:text>Attribute / Constraint Name</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:19cm; ">
												<span style="font-size:xx-small; ">
													<xsl:text>Details</xsl:text>
												</span>
											</th>
										</tr>
									</thead>
									<tbody>
										<xsl:for-each select="n1:ConstraintsCollection">
											<xsl:for-each select="n1:ConstraintDetails">
												<tr>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; vertical-align:top; width:3cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:ContstraintType">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:ContstraintType) &gt; 0">
																		<xsl:for-each select="n1:ContstraintType">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span style="font-size:xx-small; ">
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:ContstraintType">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:ContstraintType">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:ContstraintType">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; vertical-align:top; width:3cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:ALCConstraintName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:ALCConstraintName) &gt; 0">
																		<xsl:for-each select="n1:ALCConstraintName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span style="font-size:xx-small; ">
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:ALCConstraintName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:ALCConstraintName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:ALCConstraintName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; vertical-align:top; width:19cm; ">
														<xsl:if test="count( n1:RangesCollection ) != 0">
															<xsl:variable name="altova:table">
																<table style="width:18.5cm; " border="0" cellpadding="3" cellspacing="0">
																	<xsl:variable name="altova:CurrContextGrid_10" select="."/>
																	<xsl:variable name="altova:ColumnData"/>
																	<thead style="background-color:#d9f5ff; ">
																		<tr>
																			<th colspan="3" style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:3cm; ">
																				<span style="font-size:xx-small; ">
																					<xsl:text>Ranges</xsl:text>
																				</span>
																			</th>
																		</tr>
																		<tr>
																			<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; width:3cm; ">
																				<span style="font-size:xx-small; ">
																					<xsl:text>Begin Value</xsl:text>
																				</span>
																			</th>
																			<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; width:3cm; ">
																				<span style="font-size:xx-small; ">
																					<xsl:text>End Value</xsl:text>
																				</span>
																			</th>
																			<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; width:12.5cm; ">
																				<span style="font-size:xx-small; ">
																					<xsl:text>Description</xsl:text>
																				</span>
																			</th>
																		</tr>
																	</thead>
																	<tbody>
																		<xsl:for-each select="n1:RangesCollection">
																			<xsl:for-each select="n1:RangeDetails">
																				<tr>
																					<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:right; width:3cm; ">
																						<xsl:choose>
																							<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																								<xsl:for-each select="n1:RangeBeginValue">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																								<xsl:choose>
																									<xsl:when test="string-length(n1:RangeBeginValue) &gt; 0">
																										<xsl:for-each select="n1:RangeBeginValue">
																											<xsl:apply-templates/>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:otherwise>
																										<span style="font-size:xx-small; ">
																											<xsl:text>&#160;</xsl:text>
																										</span>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																								<xsl:for-each select="n1:RangeBeginValue">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																								<xsl:for-each select="n1:RangeBeginValue">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																								<xsl:for-each select="n1:RangeBeginValue">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																						</xsl:choose>
																					</td>
																					<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:right; width:3cm; ">
																						<xsl:choose>
																							<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																								<xsl:for-each select="n1:RangeEndValue">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																								<xsl:choose>
																									<xsl:when test="string-length(n1:RangeEndValue) &gt; 0">
																										<xsl:for-each select="n1:RangeEndValue">
																											<xsl:apply-templates/>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:otherwise>
																										<span style="font-size:xx-small; ">
																											<xsl:text>&#160;</xsl:text>
																										</span>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																								<xsl:for-each select="n1:RangeEndValue">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																								<xsl:for-each select="n1:RangeEndValue">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																								<xsl:for-each select="n1:RangeEndValue">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																						</xsl:choose>
																					</td>
																					<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:12.5cm; ">
																						<xsl:choose>
																							<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																								<xsl:for-each select="n1:RangeShortDescription">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																								<xsl:choose>
																									<xsl:when test="string-length(n1:RangeShortDescription) &gt; 0">
																										<xsl:for-each select="n1:RangeShortDescription">
																											<xsl:apply-templates/>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:otherwise>
																										<span style="font-size:xx-small; ">
																											<xsl:text>&#160;</xsl:text>
																										</span>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																								<xsl:for-each select="n1:RangeShortDescription">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																								<xsl:for-each select="n1:RangeShortDescription">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																								<xsl:for-each select="n1:RangeShortDescription">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																						</xsl:choose>
																					</td>
																				</tr>
																			</xsl:for-each>
																		</xsl:for-each>
																	</tbody>
																</table>
															</xsl:variable>
															<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
															<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
															<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
																<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															</xsl:apply-templates>
														</xsl:if>
														<xsl:if test="count( n1:ValueListsCollection ) != 0">
															<xsl:variable name="altova:table">
																<table style="width:18.5cm; " border="0" cellpadding="3" cellspacing="0">
																	<xsl:variable name="altova:CurrContextGrid_11" select="."/>
																	<xsl:variable name="altova:ColumnData"/>
																	<thead style="background-color:#d9f5ff; ">
																		<tr>
																			<th colspan="2" style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:3cm; ">
																				<span style="font-size:xx-small; ">
																					<xsl:text>Value List</xsl:text>
																				</span>
																			</th>
																		</tr>
																		<tr>
																			<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; width:3cm; ">
																				<span style="font-size:xx-small; ">
																					<xsl:text>Value</xsl:text>
																				</span>
																			</th>
																			<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; width:15.5cm; ">
																				<span style="font-size:xx-small; ">
																					<xsl:text>Description</xsl:text>
																				</span>
																			</th>
																		</tr>
																	</thead>
																	<tbody>
																		<xsl:for-each select="n1:ValueListsCollection">
																			<xsl:for-each select="n1:ValueListDetails">
																				<tr>
																					<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:3cm; ">
																						<xsl:choose>
																							<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																								<xsl:for-each select="n1:VLValue">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																								<xsl:choose>
																									<xsl:when test="string-length(n1:VLValue) &gt; 0">
																										<xsl:for-each select="n1:VLValue">
																											<xsl:apply-templates/>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:otherwise>
																										<span style="font-size:xx-small; ">
																											<xsl:text>&#160;</xsl:text>
																										</span>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																								<xsl:for-each select="n1:VLValue">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																								<xsl:for-each select="n1:VLValue">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																								<xsl:for-each select="n1:VLValue">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																						</xsl:choose>
																					</td>
																					<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:15.5cm; ">
																						<xsl:choose>
																							<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																								<xsl:for-each select="n1:VLShortDescription">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																								<xsl:choose>
																									<xsl:when test="string-length(n1:VLShortDescription) &gt; 0">
																										<xsl:for-each select="n1:VLShortDescription">
																											<xsl:apply-templates/>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:otherwise>
																										<span style="font-size:xx-small; ">
																											<xsl:text>&#160;</xsl:text>
																										</span>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																								<xsl:for-each select="n1:VLShortDescription">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																								<xsl:for-each select="n1:VLShortDescription">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																								<xsl:for-each select="n1:VLShortDescription">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																						</xsl:choose>
																					</td>
																				</tr>
																			</xsl:for-each>
																		</xsl:for-each>
																	</tbody>
																</table>
															</xsl:variable>
															<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
															<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
															<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
																<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															</xsl:apply-templates>
														</xsl:if>
														<xsl:if test="count( n1:CheckConstraintsCollection ) != 0">
															<xsl:variable name="altova:table">
																<table style="width:18.5cm; " border="0" cellpadding="3" cellspacing="0">
																	<xsl:variable name="altova:CurrContextGrid_12" select="."/>
																	<xsl:variable name="altova:ColumnData"/>
																	<thead style="background-color:#d9f5ff; ">
																		<tr>
																			<th colspan="2" style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:15.5cm; ">
																				<span style="font-size:xx-small; ">
																					<xsl:text>Check Constraint</xsl:text>
																				</span>
																			</th>
																		</tr>
																		<tr>
																			<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; width:15.5cm; ">
																				<span style="font-size:xx-small; ">
																					<xsl:text>Text</xsl:text>
																				</span>
																			</th>
																			<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; width:3cm; ">
																				<span style="font-size:xx-small; ">
																					<xsl:text>DB Type</xsl:text>
																				</span>
																			</th>
																		</tr>
																	</thead>
																	<tbody>
																		<xsl:for-each select="n1:CheckConstraintsCollection">
																			<xsl:for-each select="n1:CheckConstraintDetails">
																				<tr>
																					<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:15.5cm; ">
																						<xsl:choose>
																							<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																								<xsl:for-each select="n1:CheckConstraintText">
																									<xsl:for-each select="n1:CheckConstraintTextDetails">
																										<xsl:for-each select="n1:CheckConstraintTextRow">
																											<xsl:apply-templates/>
																											<br/>
																										</xsl:for-each>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																								<xsl:choose>
																									<xsl:when test="count(n1:CheckConstraintText/n1:CheckConstraintTextDetails/n1:CheckConstraintTextRow) &gt; 0">
																										<xsl:for-each select="n1:CheckConstraintText">
																											<xsl:for-each select="n1:CheckConstraintTextDetails">
																												<xsl:for-each select="n1:CheckConstraintTextRow">
																													<xsl:apply-templates/>
																													<br/>
																												</xsl:for-each>
																											</xsl:for-each>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:otherwise>
																										<span style="font-size:xx-small; ">
																											<xsl:text>&#160;</xsl:text>
																										</span>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																								<xsl:choose>
																									<xsl:when test="count(n1:CheckConstraintText/n1:CheckConstraintTextDetails/n1:CheckConstraintTextRow) &gt; 0">
																										<xsl:for-each select="n1:CheckConstraintText">
																											<xsl:for-each select="n1:CheckConstraintTextDetails">
																												<xsl:for-each select="n1:CheckConstraintTextRow">
																													<xsl:apply-templates/>
																													<br/>
																												</xsl:for-each>
																											</xsl:for-each>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:otherwise/>
																								</xsl:choose>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																								<xsl:for-each select="n1:CheckConstraintText">
																									<xsl:for-each select="n1:CheckConstraintTextDetails">
																										<xsl:for-each select="n1:CheckConstraintTextRow">
																											<xsl:apply-templates/>
																											<br/>
																										</xsl:for-each>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																								<xsl:for-each select="n1:CheckConstraintText">
																									<xsl:for-each select="n1:CheckConstraintTextDetails">
																										<xsl:for-each select="n1:CheckConstraintTextRow">
																											<xsl:apply-templates/>
																											<br/>
																										</xsl:for-each>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:when>
																						</xsl:choose>
																					</td>
																					<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:3cm; ">
																						<xsl:choose>
																							<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																								<xsl:for-each select="n1:DatabaseType">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																								<xsl:choose>
																									<xsl:when test="string-length(n1:DatabaseType) &gt; 0">
																										<xsl:for-each select="n1:DatabaseType">
																											<xsl:apply-templates/>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:otherwise>
																										<span style="font-size:xx-small; ">
																											<xsl:text>&#160;</xsl:text>
																										</span>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																								<xsl:for-each select="n1:DatabaseType">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																								<xsl:for-each select="n1:DatabaseType">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																								<xsl:for-each select="n1:DatabaseType">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</xsl:when>
																						</xsl:choose>
																					</td>
																				</tr>
																			</xsl:for-each>
																		</xsl:for-each>
																	</tbody>
																</table>
															</xsl:variable>
															<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
															<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
															<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
																<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															</xsl:apply-templates>
														</xsl:if>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</tbody>
								</table>
							</xsl:variable>
							<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
							<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							</xsl:apply-templates>
						</xsl:if>
						<xsl:if test="count( n1:IdentifiersCollection )">
							<br/>
							<span style="font-size:xx-small; font-style:italic; ">
								<xsl:text>Identifiers</xsl:text>
							</span>
							<xsl:variable name="altova:table">
								<table style="width:25cm; " border="0" cellpadding="3" cellspacing="0">
									<xsl:variable name="altova:CurrContextGrid_13" select="."/>
									<xsl:variable name="altova:ColumnData"/>
									<thead style="background-color:#d9f5ff; ">
										<tr>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:7cm; ">
												<span>
													<xsl:text>Name</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:2cm; ">
												<span>
													<xsl:text>Primary</xsl:text>
												</span>
												<br/>
												<span>
													<xsl:text>Identifyer</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:6cm; ">
												<span>
													<xsl:text>Element Name</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:2cm; ">
												<span>
													<xsl:text>Element</xsl:text>
												</span>
												<br/>
												<span>
													<xsl:text>Type</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:4cm; ">
												<span>
													<xsl:text>Source Label</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:4cm; ">
												<span>
													<xsl:text>Target Label</xsl:text>
												</span>
											</th>
										</tr>
									</thead>
									<tbody>
										<xsl:for-each select="n1:IdentifiersCollection">
											<xsl:for-each select="n1:IdentifierDetails">
												<tr>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:7cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:IdentifierName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:IdentifierName) &gt; 0">
																		<xsl:for-each select="n1:IdentifierName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:IdentifierName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:IdentifierName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:IdentifierName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; width:2cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:PrimaryIdentifier">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:PrimaryIdentifier) &gt; 0">
																		<xsl:for-each select="n1:PrimaryIdentifier">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:PrimaryIdentifier">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:PrimaryIdentifier">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:PrimaryIdentifier">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:6cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:ElementName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:ElementName) &gt; 0">
																		<xsl:for-each select="n1:ElementName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:ElementName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:ElementName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:ElementName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; width:2cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:ElementType">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:ElementType) &gt; 0">
																		<xsl:for-each select="n1:ElementType">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:ElementType">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:ElementType">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:ElementType">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:4cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:SourceLabel">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:SourceLabel) &gt; 0">
																		<xsl:for-each select="n1:SourceLabel">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:SourceLabel">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:SourceLabel">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:SourceLabel">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:4cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:TargetLabel">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:TargetLabel) &gt; 0">
																		<xsl:for-each select="n1:TargetLabel">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:TargetLabel">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:TargetLabel">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:TargetLabel">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</tbody>
								</table>
							</xsl:variable>
							<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
							<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							</xsl:apply-templates>
						</xsl:if>
						<xsl:if test="count( n1:RelationshipsCollection )">
							<br/>
							<span style="font-style:italic; ">
								<xsl:text>Has </xsl:text>
							</span>
							<span style="font-size:xx-small; font-style:italic; ">
								<xsl:text>Relationships </xsl:text>
							</span>
							<span style="font-style:italic; ">
								<xsl:text>With</xsl:text>
							</span>
							<xsl:variable name="altova:table">
								<table style="width:25cm; " border="0" cellpadding="3" cellspacing="0">
									<xsl:variable name="altova:CurrContextGrid_14" select="."/>
									<xsl:variable name="altova:ColumnData"/>
									<thead style="background-color:#d9f5ff; text-align:center; ">
										<tr>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:5cm; ">
												<span>
													<xsl:text>Entity Name</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:4cm; ">
												<span>
													<xsl:text>Role</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:4cm; ">
												<span>
													<xsl:text>Other Role</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:2cm; ">
												<span>
													<xsl:text>In Arc</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:2.5cm; ">
												<span>
													<xsl:text>Cardinality</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:2.5cm; ">
												<span>
													<xsl:text>Dominant</xsl:text>
												</span>
												<br/>
												<span>
													<xsl:text>Role</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:2.5cm; ">
												<span>
													<xsl:text>Identifying</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:2.5cm; ">
												<span>
													<xsl:text>Transferable</xsl:text>
												</span>
											</th>
										</tr>
									</thead>
									<tbody>
										<xsl:for-each select="n1:RelationshipsCollection">
											<xsl:for-each select="n1:RelationshipDetails">
												<tr>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:left; vertical-align:top; width:5cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:SourceName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:SourceName) &gt; 0">
																		<xsl:for-each select="n1:SourceName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:SourceName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:SourceName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:SourceName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; vertical-align:top; width:4cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:SourceRole">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:SourceRole) &gt; 0">
																		<xsl:for-each select="n1:SourceRole">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:SourceRole">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:SourceRole">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:SourceRole">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; vertical-align:top; width:4cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:TargetRole">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:TargetRole) &gt; 0">
																		<xsl:for-each select="n1:TargetRole">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:TargetRole">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:TargetRole">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:TargetRole">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; vertical-align:top; width:2cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:InArc">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:InArc) &gt; 0">
																		<xsl:for-each select="n1:InArc">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:InArc">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:InArc">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:InArc">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; vertical-align:top; width:2.5cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:Cardinality">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:Cardinality) &gt; 0">
																		<xsl:for-each select="n1:Cardinality">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:Cardinality">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:Cardinality">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:Cardinality">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; vertical-align:top; width:2.5cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:DominantRole">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:DominantRole) &gt; 0">
																		<xsl:for-each select="n1:DominantRole">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:DominantRole">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:DominantRole">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:DominantRole">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; vertical-align:top; width:2.5cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:Identifying">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:Identifying) &gt; 0">
																		<xsl:for-each select="n1:Identifying">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:Identifying">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:Identifying">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:Identifying">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; vertical-align:top; width:2.5cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:Transferable">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:Transferable) &gt; 0">
																		<xsl:for-each select="n1:Transferable">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:Transferable">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:Transferable">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:Transferable">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</tbody>
								</table>
							</xsl:variable>
							<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
							<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							</xsl:apply-templates>
						</xsl:if>
						<xsl:if test="count( n1:IncomingProcessesCollection )">
							<br/>
							<span style="font-size:xx-small; font-style:italic; ">
								<xsl:text>Incoming </xsl:text>
							</span>
							<span style="font-style:italic; ">
								<xsl:text>Processes</xsl:text>
							</span>
							<xsl:variable name="altova:table">
								<table style="width:25cm; " border="0" cellpadding="3" cellspacing="0">
									<xsl:variable name="altova:CurrContextGrid_15" select="."/>
									<xsl:variable name="altova:ColumnData"/>
									<thead style="background-color:#d9f5ff; ">
										<tr>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:7.5cm; ">
												<span>
													<xsl:text>Process Name</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:7.5cm; ">
												<span>
													<xsl:text>Flow Name</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:2.5cm; ">
												<span>
													<xsl:text>CRUD Code</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:7.5cm; ">
												<span>
													<xsl:text>DFD Name</xsl:text>
												</span>
											</th>
										</tr>
									</thead>
									<tbody>
										<xsl:for-each select="n1:IncomingProcessesCollection">
											<xsl:for-each select="n1:IncomingProcessDetails">
												<tr>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:7.5cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:IncomingProcessName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:IncomingProcessName) &gt; 0">
																		<xsl:for-each select="n1:IncomingProcessName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:IncomingProcessName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:IncomingProcessName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:IncomingProcessName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:7.5cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:IncomingFlowName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:IncomingFlowName) &gt; 0">
																		<xsl:for-each select="n1:IncomingFlowName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:IncomingFlowName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:IncomingFlowName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:IncomingFlowName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; width:2.5cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:IncomingCRUDCode">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:IncomingCRUDCode) &gt; 0">
																		<xsl:for-each select="n1:IncomingCRUDCode">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:IncomingCRUDCode">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:IncomingCRUDCode">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:IncomingCRUDCode">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:7.5cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:IncomingDFDName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:IncomingDFDName) &gt; 0">
																		<xsl:for-each select="n1:IncomingDFDName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:IncomingDFDName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:IncomingDFDName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:IncomingDFDName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</tbody>
								</table>
							</xsl:variable>
							<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
							<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							</xsl:apply-templates>
						</xsl:if>
						<xsl:if test="count( n1:OutgoingProcessesCollection ) !=0">
							<br/>
							<span style="font-size:xx-small; font-style:italic; ">
								<xsl:text>Outgoing Processes</xsl:text>
							</span>
							<xsl:variable name="altova:table">
								<table style="width:25cm; " border="0" cellpadding="3" cellspacing="0">
									<xsl:variable name="altova:CurrContextGrid_16" select="."/>
									<xsl:variable name="altova:ColumnData"/>
									<thead style="background-color:#d9f5ff; ">
										<tr>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:7.5cm; ">
												<span>
													<xsl:text>Process Name</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:7.5cm; ">
												<span>
													<xsl:text>Flow Name</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:2.5cm; ">
												<span>
													<xsl:text>CRUD Code</xsl:text>
												</span>
											</th>
											<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:7.5cm; ">
												<span>
													<xsl:text>DFD Name</xsl:text>
												</span>
											</th>
										</tr>
									</thead>
									<tbody>
										<xsl:for-each select="n1:OutgoingProcessesCollection">
											<xsl:for-each select="n1:OugoingProcessDetails">
												<tr>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:7.5cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:OutgoingProcessName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:OutgoingProcessName) &gt; 0">
																		<xsl:for-each select="n1:OutgoingProcessName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:OutgoingProcessName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:OutgoingProcessName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:OutgoingProcessName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:7.5cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:OutgoingFlowName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:OutgoingFlowName) &gt; 0">
																		<xsl:for-each select="n1:OutgoingFlowName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:OutgoingFlowName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:OutgoingFlowName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:OutgoingFlowName">
																	<span>
																		<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																	</span>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:center; width:2.5cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:OutgoingCRUDCode">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:OutgoingCRUDCode) &gt; 0">
																		<xsl:for-each select="n1:OutgoingCRUDCode">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:OutgoingCRUDCode">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:OutgoingCRUDCode">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:OutgoingCRUDCode">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:7.5cm; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:OutgoingDFDName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:OutgoingDFDName) &gt; 0">
																		<xsl:for-each select="n1:OutgoingDFDName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:OutgoingDFDName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:OutgoingDFDName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:OutgoingDFDName">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</tr>
											</xsl:for-each>
										</xsl:for-each>
									</tbody>
								</table>
							</xsl:variable>
							<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
							<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							</xsl:apply-templates>
						</xsl:if>
					</xsl:for-each>
				</xsl:for-each>
			</body>
		</html>
	</xsl:template>
	<xsl:function name="altova:is-cell-empty" as="xs:boolean">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="altova:is-node-empty( $altova:cell )"/>
	</xsl:function>
	<xsl:function name="altova:is-node-empty" as="xs:boolean">
		<xsl:param name="altova:node" as="element()"/>
		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( ( boolean( $altova:child/self::text() ) and string-length( $altova:child ) = 0 ) or ( ( boolean( $altova:child/self::div ) or boolean( $altova:child/self::span ) or boolean( $altova:child/self::a ) ) and altova:is-node-empty( $altova:child ) ) )"/>
	</xsl:function>
	<xsl:function name="altova:col-span" as="xs:integer">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="if ( exists( $altova:cell/@colspan ) ) then xs:integer( $altova:cell/@colspan ) else 1"/>
	</xsl:function>
	<xsl:template match="@* | node()" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current">
				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="tbody" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:choose>
			<xsl:when test="empty(tr)">
				<xsl:copy>
					<tr>
						<td/>
					</tr>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="th | td" mode="altova:generate-table">
		<xsl:choose>
			<xsl:when test="altova:is-cell-empty( . )">
				<xsl:copy>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:text>&#160;</xsl:text>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId) gt 1">
				<xsl:message select="concat('Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId) lt 1">
				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>
				<xsl:sequence select="'altova:no-value'"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-pixel" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="substring-before($normLength, 'px')"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * $altova:nPxPerIn"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * $altova:nPxPerIn div 2.54"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'mm')) * $altova:nPxPerIn div 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * $altova:nPxPerIn div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * $altova:nPxPerIn div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$normLength"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-mm" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'px')) div $altova:nPxPerIn * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * 10"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="substring-before($normLength, 'mm') "/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * 25.4 div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * 25.4 div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="number($normLength) div $altova:nPxPerIn * 25.4"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
</xsl:stylesheet>
