<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2013 sp1 (x64) - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="osdm_srs" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="#all">
	<xsl:output version="4.0" method="html" indent="no" encoding="UTF-8" use-character-maps="spaces" doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd"/>
	<xsl:character-map name="spaces">
		<xsl:output-character character="&#160;" string="&amp;nbsp;"/>
	</xsl:character-map>
	<xsl:param name="altova:bGeneratingFromPxf" select="false()"/>
	<xsl:param name="SV_OutputFormat" select="'HTML'"/>
	<xsl:param name="SV_BaseOutputFileName" as="xs:string?">
		<xsl:sequence select="for $i in altovaext:get-base-output-uri(), $j in tokenize( $i, &apos;[/\\]&apos; )[last()] return replace( $j, &apos;\.[^\.\s#%;]*$&apos;, &apos;&apos; )" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>
	</xsl:param>
	<xsl:param name="SV_GeneratedFileNamePrefix" select="if ( $SV_BaseOutputFileName ) then $SV_BaseOutputFileName else &apos;SearchResults&apos;" as="xs:string?"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:variable name="altova:CssImages" select="()"/>
	<xsl:template match="/">
		<xsl:call-template name="altova:Root"/>
	</xsl:template>
	<xsl:template name="altova:Root">
		<html>
			<head>
				<title/>
				<meta name="generator" content="Altova StyleVision Enterprise Edition 2013 sp1 (x64) (http://www.altova.com)"/>
				<meta http-equiv="X-UA-Compatible" content="IE=7"/>
				<style type="text/css">
					<xsl:comment>* { border-collapse:collapse;
empty-cells:show;
table-layout:inherit;
white-space:pre-wrap;
 }</xsl:comment>
				</style>
				<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>
				<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>
				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(-90deg) translate(-100%, 0%); -ms-transform-origin: 0% 0%;}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(90deg) translate(0%, -100%); -ms-transform-origin: 0% 0%;}</style>
				<xsl:comment>&lt;![endif]</xsl:comment>
				<style type="text/css">@page { margin-left:1.52cm; margin-right:1.52cm; margin-top:2.01cm; margin-bottom:2.01cm } @media print { br.altova-page-break { page-break-before: always; } }</style>
			</head>
			<body style="font-family:Tahoma; font-size:xx-small; font-weight:normal; ">
				<br/>
				<center>
					<xsl:for-each select="$XML">
						<xsl:for-each select="n1:root">
							<xsl:for-each select="n1:Title">
								<span style="font-size:medium; font-weight:bold; ">
									<xsl:apply-templates/>
								</span>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</center>
				<br/>
				<xsl:for-each select="$XML">
					<br/>
					<xsl:if test="n1:root/n1:ShowFilter = &apos;true&apos;">
						<xsl:variable name="altova:table">
							<table style="width:8cm; " border="0" cellpadding="3" cellspacing="0">
								<xsl:variable name="altova:CurrContextGrid_0" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<tr>
										<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-weight:bold; width:4cm; ">
											<span>
												<xsl:text>Pattern</xsl:text>
											</span>
										</td>
										<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:left; width:4cm; ">
											<xsl:for-each select="n1:root">
												<xsl:for-each select="n1:Pattern">
													<xsl:apply-templates/>
												</xsl:for-each>
											</xsl:for-each>
										</td>
									</tr>
									<tr>
										<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-weight:bold; width:4cm; ">
											<span>
												<xsl:text>Filter</xsl:text>
											</span>
										</td>
										<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; text-align:left; width:4cm; ">
											<xsl:for-each select="n1:root">
												<xsl:for-each select="n1:Filter">
													<xsl:apply-templates/>
												</xsl:for-each>
											</xsl:for-each>
										</td>
									</tr>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
							<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
						</xsl:apply-templates>
					</xsl:if>
					<br/>
					<br class="altova-page-break" clear="all"/>
					<xsl:for-each select="n1:root">
						<br/>
						<xsl:variable name="altova:table">
							<table style="empty-cells:show; width:{n1:TW}; " border="0" cellpadding="3" cellspacing="0">
								<xsl:variable name="altova:CurrContextGrid_1" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<xsl:for-each select="n1:ObjectsCollection">
										<tr style="background-color:#d9f5ff; ">
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column1/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column1/n1:width}; ">
													<xsl:for-each select="n1:Column1">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column2/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column2/n1:width}; ">
													<xsl:for-each select="n1:Column2">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column3/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column3/n1:width}; ">
													<xsl:for-each select="n1:Column3">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column4/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column4/n1:width}; ">
													<xsl:for-each select="n1:Column4">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column5/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column5/n1:width}; ">
													<xsl:for-each select="n1:Column5">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column6/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column6/n1:width}; ">
													<xsl:for-each select="n1:Column6">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column7/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column7/n1:width}; ">
													<xsl:for-each select="n1:Column7">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column8/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column8/n1:width}; ">
													<xsl:for-each select="n1:Column8">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column9/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column9/n1:width}; ">
													<xsl:for-each select="n1:Column9">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column10/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column10/n1:width}; ">
													<xsl:for-each select="n1:Column10">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column11/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column11/n1:width}; ">
													<xsl:for-each select="n1:Column11">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column12/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column12/n1:width}; ">
													<xsl:for-each select="n1:Column12">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column13/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column13/n1:width}; ">
													<xsl:for-each select="n1:Column13">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column14/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column14/n1:width}; ">
													<xsl:for-each select="n1:Column14">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column15/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column15/n1:width}; ">
													<xsl:for-each select="n1:Column15">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column16/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column17/n1:width}; ">
													<xsl:for-each select="n1:Column16">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column17/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column17/n1:width}; ">
													<xsl:for-each select="n1:Column17">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column18/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column18/n1:width}; ">
													<xsl:for-each select="n1:Column18">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column19/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column19/n1:width}; ">
													<xsl:for-each select="n1:Column19">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column20/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column20/n1:width}; ">
													<xsl:for-each select="n1:Column20">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column21/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column21/n1:width}; ">
													<xsl:for-each select="n1:Column21">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column22/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column22/n1:width}; ">
													<xsl:for-each select="n1:Column22">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column23/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column23/n1:width}; ">
													<xsl:for-each select="n1:Column23">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column24/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column24/n1:show}; ">
													<xsl:for-each select="n1:Column24">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column25/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column25/n1:width}; ">
													<xsl:for-each select="n1:Column25">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column26/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column26/n1:width}; ">
													<xsl:for-each select="n1:Column26">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column27/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column27/n1:width}; ">
													<xsl:for-each select="n1:Column27">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column28/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column28/n1:width}; ">
													<xsl:for-each select="n1:Column28">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column29/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column29/n1:width}; ">
													<xsl:for-each select="n1:Column29">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
											<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column30/n1:show = &apos;Y&apos;)">
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; text-align:center; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column30/n1:width}; ">
													<xsl:for-each select="n1:Column30">
														<xsl:for-each select="n1:customName">
															<span style="font-weight:bold; ">
																<xsl:apply-templates/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</xsl:if>
										</tr>
										<xsl:for-each select="n1:ObjectDetails">
											<xsl:variable name="v_Property1_Value" select="n1:Property1"/>
											<xsl:variable name="v_Property2_Value" select="n1:Property2"/>
											<xsl:variable name="v_Property3_Value" select="n1:Property3"/>
											<xsl:variable name="v_Property4_Value" select="n1:Property4"/>
											<xsl:variable name="v_Property5_Value" select="n1:Property5"/>
											<xsl:variable name="v_Property6_Value" select="n1:Property6"/>
											<xsl:variable name="v_Property7_Value" select="n1:Property7"/>
											<xsl:variable name="v_Property8_Value" select="n1:Property8"/>
											<xsl:variable name="v_Property9_Value" select="n1:Property9"/>
											<xsl:variable name="v_Property10_Value" select="n1:Property10"/>
											<xsl:variable name="v_Property11_Value" select="n1:Property11"/>
											<xsl:variable name="v_Property12_Value" select="n1:Property12"/>
											<xsl:variable name="v_Property13_Value" select="n1:Property13"/>
											<xsl:variable name="v_Property14_Value" select="n1:Property14"/>
											<xsl:variable name="v_Property15_Value" select="n1:Property15"/>
											<xsl:variable name="v_Property16_Value" select="n1:Property16"/>
											<xsl:variable name="v_Property17_Value" select="n1:Property17"/>
											<xsl:variable name="v_Property18_Value" select="n1:Property18"/>
											<xsl:variable name="v_Property19_Value" select="n1:Property19"/>
											<xsl:variable name="v_Property20_Value" select="n1:Property20"/>
											<xsl:variable name="v_Property21_Value" select="n1:Property21"/>
											<xsl:variable name="v_Property22_Value" select="n1:Property22"/>
											<xsl:variable name="v_Property23_Value" select="n1:Property23"/>
											<xsl:variable name="v_Property24_Value" select="n1:Property24"/>
											<xsl:variable name="v_Property25_Value" select="n1:Property25"/>
											<xsl:variable name="v_Property26_Value" select="n1:Property26"/>
											<xsl:variable name="v_Property27_Value" select="n1:Property27"/>
											<xsl:variable name="v_Property28_Value" select="n1:Property28"/>
											<xsl:variable name="v_Property29_Value" select="n1:Property29"/>
											<xsl:variable name="v_Property30_Value" select="n1:Property30"/>
											<tr>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column1/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column1/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property1_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(
$v_Property1_Value
) &gt; 0">
																		<xsl:for-each select="$v_Property1_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property1_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property1_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property1_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column2/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column2/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property2_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property2_Value) &gt; 0">
																		<xsl:for-each select="$v_Property2_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property2_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property2_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property2_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column3/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column3/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property3_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property3_Value) &gt; 0">
																		<xsl:for-each select="$v_Property3_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property3_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property3_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property3_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column4/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column4/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property4_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property4_Value) &gt; 0">
																		<xsl:for-each select="$v_Property4_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property4_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property4_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property4_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column5/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column5/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property5_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property5_Value) &gt; 0">
																		<xsl:for-each select="$v_Property5_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property5_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property5_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property5_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column6/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column6/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property6_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property6_Value) &gt; 0">
																		<xsl:for-each select="$v_Property6_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property6_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property6_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property6_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column7/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column7/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property7_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property7_Value) &gt; 0">
																		<xsl:for-each select="$v_Property7_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property7_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property7_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property7_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column8/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column8/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property8_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property8_Value) &gt; 0">
																		<xsl:for-each select="$v_Property8_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property8_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property8_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property8_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column9/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column9/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property9_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property9_Value) &gt; 0">
																		<xsl:for-each select="$v_Property9_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property9_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property9_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property9_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column10/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column10/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property10_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property10_Value) &gt; 0">
																		<xsl:for-each select="$v_Property10_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property10_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property10_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property10_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column11/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column11/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property11_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property11_Value) &gt; 0">
																		<xsl:for-each select="$v_Property11_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property11_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property11_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property11_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column12/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column12/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property12_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property12_Value) &gt; 0">
																		<xsl:for-each select="$v_Property12_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property12_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property12_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property12_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column13/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column13/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property13_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property13_Value) &gt; 0">
																		<xsl:for-each select="$v_Property13_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property13_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property13_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property13_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column14/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column14/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property14_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property14_Value) &gt; 0">
																		<xsl:for-each select="$v_Property14_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property14_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property14_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property14_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column15/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column15/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property15_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property15_Value) &gt; 0">
																		<xsl:for-each select="$v_Property15_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property15_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property15_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property15_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column16/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column17/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property16_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property16_Value) &gt; 0">
																		<xsl:for-each select="$v_Property16_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property16_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property16_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property16_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column17/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column17/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property17_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property17_Value) &gt; 0">
																		<xsl:for-each select="$v_Property17_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property17_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property17_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property17_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column18/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column18/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property18_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property18_Value) &gt; 0">
																		<xsl:for-each select="$v_Property18_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property18_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property18_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property18_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column19/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column19/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property19_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property19_Value) &gt; 0">
																		<xsl:for-each select="$v_Property19_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property19_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property19_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property19_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column20/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column20/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property20_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property20_Value) &gt; 0">
																		<xsl:for-each select="$v_Property20_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property20_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property20_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property20_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column21/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column21/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property21_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property21_Value) &gt; 0">
																		<xsl:for-each select="$v_Property21_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property21_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property21_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property21_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column22/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column22/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property22_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property22_Value) &gt; 0">
																		<xsl:for-each select="$v_Property22_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property22_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property22_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property22_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column23/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column23/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property23_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property23_Value) &gt; 0">
																		<xsl:for-each select="$v_Property23_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property23_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property23_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property23_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column24/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column24/n1:show}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property24_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property24_Value) &gt; 0">
																		<xsl:for-each select="$v_Property24_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property24_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property24_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property24_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column25/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column25/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property25_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property25_Value) &gt; 0">
																		<xsl:for-each select="$v_Property25_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property25_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property25_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property25_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column26/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column26/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property26_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property26_Value) &gt; 0">
																		<xsl:for-each select="$v_Property26_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property26_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property26_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property26_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column27/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column27/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property27_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property27_Value) &gt; 0">
																		<xsl:for-each select="$v_Property27_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property27_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property27_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property27_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column28/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column28/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property28_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property28_Value) &gt; 0">
																		<xsl:for-each select="$v_Property28_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property28_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property28_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property28_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column29/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column29/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property29_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property29_Value) &gt; 0">
																		<xsl:for-each select="$v_Property29_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property29_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property29_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property29_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
												<xsl:if test="$altova:CurrContextGrid_1/(n1:ObjectsCollection/n1:Column30/n1:show = &apos;Y&apos;)">
													<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; width:{$XML/n1:root/n1:ObjectsCollection/n1:Column30/n1:width}; ">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="$v_Property30_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length($v_Property30_Value) &gt; 0">
																		<xsl:for-each select="$v_Property30_Value">
																			<xsl:choose>
																				<xsl:when test=". instance of element() or . instance of document-node()">
																					<xsl:apply-templates/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="."/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="$v_Property30_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="$v_Property30_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="$v_Property30_Value">
																	<xsl:choose>
																		<xsl:when test=". instance of element() or . instance of document-node()">
																			<xsl:apply-templates/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="."/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</td>
												</xsl:if>
											</tr>
										</xsl:for-each>
									</xsl:for-each>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
							<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
						</xsl:apply-templates>
					</xsl:for-each>
				</xsl:for-each>
			</body>
		</html>
	</xsl:template>
	<xsl:function name="altova:is-cell-empty" as="xs:boolean">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="altova:is-node-empty( $altova:cell )"/>
	</xsl:function>
	<xsl:function name="altova:is-node-empty" as="xs:boolean">
		<xsl:param name="altova:node" as="element()"/>
		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( ( boolean( $altova:child/self::text() ) and string-length( $altova:child ) = 0 ) or ( ( boolean( $altova:child/self::div ) or boolean( $altova:child/self::span ) or boolean( $altova:child/self::a ) ) and altova:is-node-empty( $altova:child ) ) )"/>
	</xsl:function>
	<xsl:function name="altova:col-span" as="xs:integer">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="if ( exists( $altova:cell/@colspan ) ) then xs:integer( $altova:cell/@colspan ) else 1"/>
	</xsl:function>
	<xsl:template match="@* | node()" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current">
				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="tbody" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:choose>
			<xsl:when test="empty(tr)">
				<xsl:copy>
					<tr>
						<td/>
					</tr>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="th | td" mode="altova:generate-table">
		<xsl:choose>
			<xsl:when test="altova:is-cell-empty( . )">
				<xsl:copy>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:text>&#160;</xsl:text>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId) gt 1">
				<xsl:message select="concat('Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId) lt 1">
				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>
				<xsl:sequence select="'altova:no-value'"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-pixel" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="substring-before($normLength, 'px')"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * $altova:nPxPerIn"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * $altova:nPxPerIn div 2.54"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'mm')) * $altova:nPxPerIn div 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * $altova:nPxPerIn div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * $altova:nPxPerIn div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$normLength"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-mm" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'px')) div $altova:nPxPerIn * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * 10"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="substring-before($normLength, 'mm') "/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * 25.4 div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * 25.4 div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="number($normLength) div $altova:nPxPerIn * 25.4"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
</xsl:stylesheet>
