<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2013 (x64) - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="osdm_e" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="altova altovaext clitype fn iso4217 ix java link n1 sps xbrldi xbrli xlink xs xsd xsi">
	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>
	<xsl:param name="SV_OutputFormat" select="'PDF'"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="fo:layout-master-set">
		<fo:layout-master-set>
			<fo:simple-page-master master-name="page-master-0-even" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-odd" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-even-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-odd-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-even-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-odd-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:page-sequence-master master-name="page-master-0">
				<fo:repeatable-page-master-alternatives>
					<fo:conditional-page-master-reference master-reference="page-master-0-even-first" odd-or-even="even" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-odd-first" odd-or-even="odd" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-even-last" odd-or-even="even" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-odd-last" odd-or-even="odd" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-even" odd-or-even="even"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-odd" odd-or-even="odd"/>
				</fo:repeatable-page-master-alternatives>
			</fo:page-sequence-master>
		</fo:layout-master-set>
	</xsl:variable>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:template match="/">
		<fo:root>
			<xsl:copy-of select="$fo:layout-master-set"/>
			<fo:declarations>
				<x:xmpmeta xmlns:x="adobe:ns:meta/">
					<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
						<rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
							<xmp:CreatorTool>Altova StyleVision Enterprise Edition 2013 (x64) (http://www.altova.com)</xmp:CreatorTool>
						</rdf:Description>
					</rdf:RDF>
				</x:xmpmeta>
			</fo:declarations>
			<fo:page-sequence force-page-count="no-force" master-reference="page-master-0" initial-page-number="auto" format="1">
				<fo:static-content flow-name="odd-page-footer">
					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">
						<fo:block font-family="Tahoma" font-size="xx-small">
							<fo:inline-container>
								<fo:block>
									<xsl:text>&#x200B;</xsl:text>
								</fo:block>
							</fo:inline-container>
							<fo:table font-size="xx-small" width="25cm" table-layout="fixed" border-spacing="0">
								<fo:table-column column-width="18cm"/>
								<fo:table-column column-width="7cm"/>
								<xsl:variable name="altova:CurrContextGrid_1" select="."/>
								<fo:table-body start-indent="0pt">
									<xsl:variable name="altova:tablerows">
										<fo:table-row>
											<fo:table-cell padding="3" display-align="center">
												<fo:block-container overflow="hidden">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Oracle Data Modeler</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:block-container>
											</fo:table-cell>
											<fo:table-cell padding="3" display-align="center">
												<fo:block-container overflow="hidden">
													<fo:block text-align="right">
														<fo:inline>
															<xsl:text>Page: </xsl:text>
														</fo:inline>
														<fo:page-number/>
														<fo:inline>
															<xsl:text> / </xsl:text>
														</fo:inline>
														<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>
													</fo:block>
												</fo:block-container>
											</fo:table-cell>
										</fo:table-row>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="string($altova:tablerows)">
											<xsl:copy-of select="$altova:tablerows"/>
										</xsl:when>
										<xsl:otherwise>
											<fo:table-row>
												<fo:table-cell>
													<fo:block/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-body>
							</fo:table>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:static-content flow-name="even-page-footer">
					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">
						<fo:block font-family="Tahoma" font-size="xx-small">
							<fo:inline-container>
								<fo:block>
									<xsl:text>&#x200B;</xsl:text>
								</fo:block>
							</fo:inline-container>
							<fo:table font-size="xx-small" width="25cm" table-layout="fixed" border-spacing="0">
								<fo:table-column column-width="18cm"/>
								<fo:table-column column-width="7cm"/>
								<xsl:variable name="altova:CurrContextGrid_1" select="."/>
								<fo:table-body start-indent="0pt">
									<xsl:variable name="altova:tablerows">
										<fo:table-row>
											<fo:table-cell padding="3" display-align="center">
												<fo:block-container overflow="hidden">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Oracle Data Modeler</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:block-container>
											</fo:table-cell>
											<fo:table-cell padding="3" display-align="center">
												<fo:block-container overflow="hidden">
													<fo:block text-align="right">
														<fo:inline>
															<xsl:text>Page: </xsl:text>
														</fo:inline>
														<fo:page-number/>
														<fo:inline>
															<xsl:text> / </xsl:text>
														</fo:inline>
														<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>
													</fo:block>
												</fo:block-container>
											</fo:table-cell>
										</fo:table-row>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="string($altova:tablerows)">
											<xsl:copy-of select="$altova:tablerows"/>
										</xsl:when>
										<xsl:otherwise>
											<fo:table-row>
												<fo:table-cell>
													<fo:block/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-body>
							</fo:table>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:flow flow-name="xsl-region-body">
					<fo:block font-family="Tahoma" font-size="xx-small" empty-cells="show" text-align="left" display-align="before">
						<xsl:for-each select="$XML">
							<xsl:for-each select="n1:root">
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<fo:block margin-right="100% - 100%" text-align="center" space-before="0" space-after="0" margin="0pt">
									<xsl:for-each select="n1:ReportCaption">
										<xsl:variable name="value-of-template_2">
											<xsl:apply-templates/>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="contains(string($value-of-template_2),'&#x200B;')">
												<fo:block font-size="medium" font-weight="bold">
													<xsl:copy-of select="$value-of-template_2"/>
												</fo:block>
											</xsl:when>
											<xsl:otherwise>
												<fo:inline font-size="medium" font-weight="bold">
													<xsl:copy-of select="$value-of-template_2"/>
												</fo:inline>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</fo:block>
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<fo:table width="20cm" table-layout="fixed" border-spacing="0">
									<fo:table-column column-width="4cm"/>
									<fo:table-column column-width="16cm"/>
									<xsl:variable name="altova:CurrContextGrid_3" select="."/>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<fo:inline>
																<xsl:text>Design Name</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<xsl:choose>
																<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																	<xsl:for-each select="n1:DesignName">
																		<xsl:variable name="value-of-template_4">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_4),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_4"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_4"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																	<xsl:choose>
																		<xsl:when test="string-length(n1:DesignName) &gt; 0">
																			<xsl:for-each select="n1:DesignName">
																				<xsl:variable name="value-of-template_5">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_5),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_5"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_5"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:text>&#160;</xsl:text>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																	<xsl:for-each select="n1:DesignName">
																		<xsl:variable name="value-of-template_6">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_6),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_6"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_6"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																	<xsl:for-each select="n1:DesignName">
																		<xsl:variable name="value-of-template_7">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_7),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_7"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_7"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																	<xsl:for-each select="n1:DesignName">
																		<xsl:variable name="value-of-template_8">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_8),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_8"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_8"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
															</xsl:choose>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<fo:inline>
																<xsl:text>Version Date</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<xsl:choose>
																<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																	<xsl:for-each select="n1:VersionDate">
																		<xsl:variable name="value-of-template_9">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_9),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_9"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_9"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																	<xsl:choose>
																		<xsl:when test="string-length(n1:VersionDate) &gt; 0">
																			<xsl:for-each select="n1:VersionDate">
																				<xsl:variable name="value-of-template_10">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_10),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_10"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_10"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:text>&#160;</xsl:text>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																	<xsl:for-each select="n1:VersionDate">
																		<xsl:variable name="value-of-template_11">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_11),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_11"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_11"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																	<xsl:for-each select="n1:VersionDate">
																		<xsl:variable name="value-of-template_12">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_12),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_12"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_12"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																	<xsl:for-each select="n1:VersionDate">
																		<xsl:variable name="value-of-template_13">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_13),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_13"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_13"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
															</xsl:choose>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<fo:inline>
																<xsl:text>Version Comment</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<xsl:choose>
																<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																	<xsl:for-each select="n1:VersionComment">
																		<xsl:for-each select="n1:VersionCommentDetails">
																			<xsl:for-each select="n1:VersionCommentRow">
																				<xsl:variable name="value-of-template_14">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_14),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_14"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_14"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																	<xsl:choose>
																		<xsl:when test="count(n1:VersionComment/n1:VersionCommentDetails/n1:VersionCommentRow) &gt; 0">
																			<xsl:for-each select="n1:VersionComment">
																				<xsl:for-each select="n1:VersionCommentDetails">
																					<xsl:for-each select="n1:VersionCommentRow">
																						<xsl:variable name="value-of-template_15">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_15),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_15"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_15"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																						<fo:block/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:text>&#160;</xsl:text>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																	<xsl:choose>
																		<xsl:when test="count(n1:VersionComment/n1:VersionCommentDetails/n1:VersionCommentRow) &gt; 0">
																			<xsl:for-each select="n1:VersionComment">
																				<xsl:for-each select="n1:VersionCommentDetails">
																					<xsl:for-each select="n1:VersionCommentRow">
																						<xsl:variable name="value-of-template_16">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_16),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_16"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_16"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																						<fo:block/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:otherwise/>
																	</xsl:choose>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																	<xsl:for-each select="n1:VersionComment">
																		<xsl:for-each select="n1:VersionCommentDetails">
																			<xsl:for-each select="n1:VersionCommentRow">
																				<xsl:variable name="value-of-template_17">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_17),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_17"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_17"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																	<xsl:for-each select="n1:VersionComment">
																		<xsl:for-each select="n1:VersionCommentDetails">
																			<xsl:for-each select="n1:VersionCommentRow">
																				<xsl:variable name="value-of-template_18">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_18),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_18"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_18"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
															</xsl:choose>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<fo:inline>
																<xsl:text>Model Name</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<xsl:choose>
																<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																	<xsl:for-each select="n1:ModelName">
																		<xsl:variable name="value-of-template_19">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_19),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_19"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_19"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																	<xsl:choose>
																		<xsl:when test="string-length(n1:ModelName) &gt; 0">
																			<xsl:for-each select="n1:ModelName">
																				<xsl:variable name="value-of-template_20">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_20),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_20"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_20"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:text>&#160;</xsl:text>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																	<xsl:for-each select="n1:ModelName">
																		<xsl:variable name="value-of-template_21">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_21),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_21"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_21"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																	<xsl:for-each select="n1:ModelName">
																		<xsl:variable name="value-of-template_22">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_22),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_22"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_22"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																	<xsl:for-each select="n1:ModelName">
																		<xsl:variable name="value-of-template_23">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_23),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_23"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_23"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
															</xsl:choose>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows)">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
								<fo:inline>
									<xsl:text>&#160;</xsl:text>
								</fo:inline>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<fo:table width="25cm" table-layout="fixed" border-spacing="0">
									<fo:table-column column-width="15cm"/>
									<fo:table-column column-width="1cm"/>
									<fo:table-column column-width="8cm"/>
									<xsl:variable name="altova:CurrContextGrid_24" select="."/>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row>
												<fo:table-cell padding="0" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<fo:inline-container>
																<fo:block>
																	<xsl:text>&#x200B;</xsl:text>
																</fo:block>
															</fo:inline-container>
															<fo:table width="15cm" table-layout="fixed" border-spacing="0">
																<fo:table-column column-width="4cm"/>
																<fo:table-column column-width="11cm"/>
																<xsl:variable name="altova:CurrContextGrid_25" select="."/>
																<fo:table-body start-indent="0pt">
																	<xsl:variable name="altova:tablerows">
																		<fo:table-row>
																			<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																				<fo:block-container overflow="hidden">
																					<fo:block text-align="left">
																						<fo:inline>
																							<xsl:text>Entity Name</xsl:text>
																						</fo:inline>
																					</fo:block>
																				</fo:block-container>
																			</fo:table-cell>
																			<fo:table-cell background-color="#a5e7ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																				<fo:block-container overflow="hidden">
																					<fo:block text-align="left">
																						<xsl:choose>
																							<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																								<fo:inline-container>
																									<fo:block>
																										<xsl:text>&#x200B;</xsl:text>
																									</fo:block>
																								</fo:inline-container>
																								<fo:block margin-right="100% - 100%" font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																									<xsl:for-each select="n1:EntityName">
																										<xsl:variable name="value-of-template_26">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_26),'&#x200B;')">
																												<fo:block font-size="xx-small">
																													<xsl:copy-of select="$value-of-template_26"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline font-size="xx-small">
																													<xsl:copy-of select="$value-of-template_26"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:for-each>
																								</fo:block>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																								<xsl:choose>
																									<xsl:when test="string-length(n1:EntityName) &gt; 0">
																										<fo:inline-container>
																											<fo:block>
																												<xsl:text>&#x200B;</xsl:text>
																											</fo:block>
																										</fo:inline-container>
																										<fo:block margin-right="100% - 100%" font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																											<xsl:for-each select="n1:EntityName">
																												<xsl:variable name="value-of-template_27">
																													<xsl:apply-templates/>
																												</xsl:variable>
																												<xsl:choose>
																													<xsl:when test="contains(string($value-of-template_27),'&#x200B;')">
																														<fo:block font-size="xx-small">
																															<xsl:copy-of select="$value-of-template_27"/>
																														</fo:block>
																													</xsl:when>
																													<xsl:otherwise>
																														<fo:inline font-size="xx-small">
																															<xsl:copy-of select="$value-of-template_27"/>
																														</fo:inline>
																													</xsl:otherwise>
																												</xsl:choose>
																											</xsl:for-each>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline font-size="x-small">
																											<xsl:text>&#160;</xsl:text>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																								<fo:inline-container>
																									<fo:block>
																										<xsl:text>&#x200B;</xsl:text>
																									</fo:block>
																								</fo:inline-container>
																								<fo:block margin-right="100% - 100%" font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																									<xsl:for-each select="n1:EntityName">
																										<xsl:variable name="value-of-template_28">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_28),'&#x200B;')">
																												<fo:block font-size="xx-small">
																													<xsl:copy-of select="$value-of-template_28"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline font-size="xx-small">
																													<xsl:copy-of select="$value-of-template_28"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:for-each>
																								</fo:block>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																								<fo:inline-container>
																									<fo:block>
																										<xsl:text>&#x200B;</xsl:text>
																									</fo:block>
																								</fo:inline-container>
																								<fo:block margin-right="100% - 100%" font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																									<xsl:for-each select="n1:EntityName">
																										<xsl:variable name="value-of-template_29">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_29),'&#x200B;')">
																												<fo:block font-size="xx-small">
																													<xsl:copy-of select="$value-of-template_29"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline font-size="xx-small">
																													<xsl:copy-of select="$value-of-template_29"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:for-each>
																								</fo:block>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																								<fo:inline-container>
																									<fo:block>
																										<xsl:text>&#x200B;</xsl:text>
																									</fo:block>
																								</fo:inline-container>
																								<fo:block margin-right="100% - 100%" font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																									<xsl:for-each select="n1:EntityName">
																										<xsl:variable name="value-of-template_30">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_30),'&#x200B;')">
																												<fo:block font-size="xx-small">
																													<xsl:copy-of select="$value-of-template_30"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline font-size="xx-small">
																													<xsl:copy-of select="$value-of-template_30"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:for-each>
																								</fo:block>
																							</xsl:when>
																						</xsl:choose>
																					</fo:block>
																				</fo:block-container>
																			</fo:table-cell>
																		</fo:table-row>
																		<fo:table-row>
																			<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																				<fo:block-container overflow="hidden">
																					<fo:block text-align="left">
																						<fo:inline>
																							<xsl:text>Preferred Abbreviation</xsl:text>
																						</fo:inline>
																					</fo:block>
																				</fo:block-container>
																			</fo:table-cell>
																			<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																				<fo:block-container overflow="hidden">
																					<fo:block text-align="left">
																						<xsl:choose>
																							<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																								<xsl:for-each select="n1:Abbreviation">
																									<xsl:variable name="value-of-template_31">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_31),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_31"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_31"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																								<xsl:choose>
																									<xsl:when test="string-length(n1:Abbreviation) &gt; 0">
																										<xsl:for-each select="n1:Abbreviation">
																											<xsl:variable name="value-of-template_32">
																												<xsl:apply-templates/>
																											</xsl:variable>
																											<xsl:choose>
																												<xsl:when test="contains(string($value-of-template_32),'&#x200B;')">
																													<fo:block>
																														<xsl:copy-of select="$value-of-template_32"/>
																													</fo:block>
																												</xsl:when>
																												<xsl:otherwise>
																													<fo:inline>
																														<xsl:copy-of select="$value-of-template_32"/>
																													</fo:inline>
																												</xsl:otherwise>
																											</xsl:choose>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:text>&#160;</xsl:text>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																								<xsl:for-each select="n1:Abbreviation">
																									<xsl:variable name="value-of-template_33">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_33),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_33"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_33"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																								<xsl:for-each select="n1:Abbreviation">
																									<xsl:variable name="value-of-template_34">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_34),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_34"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_34"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																								<xsl:for-each select="n1:Abbreviation">
																									<xsl:variable name="value-of-template_35">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_35),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_35"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_35"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																						</xsl:choose>
																					</fo:block>
																				</fo:block-container>
																			</fo:table-cell>
																		</fo:table-row>
																		<fo:table-row>
																			<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																				<fo:block-container overflow="hidden">
																					<fo:block text-align="left">
																						<fo:inline>
																							<xsl:text>Classification Type Name</xsl:text>
																						</fo:inline>
																					</fo:block>
																				</fo:block-container>
																			</fo:table-cell>
																			<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																				<fo:block-container overflow="hidden">
																					<fo:block text-align="left">
																						<xsl:choose>
																							<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																								<xsl:for-each select="n1:ClassificationTypeName">
																									<xsl:variable name="value-of-template_36">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_36),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_36"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_36"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																								<xsl:choose>
																									<xsl:when test="string-length(n1:ClassificationTypeName) &gt; 0">
																										<xsl:for-each select="n1:ClassificationTypeName">
																											<xsl:variable name="value-of-template_37">
																												<xsl:apply-templates/>
																											</xsl:variable>
																											<xsl:choose>
																												<xsl:when test="contains(string($value-of-template_37),'&#x200B;')">
																													<fo:block>
																														<xsl:copy-of select="$value-of-template_37"/>
																													</fo:block>
																												</xsl:when>
																												<xsl:otherwise>
																													<fo:inline>
																														<xsl:copy-of select="$value-of-template_37"/>
																													</fo:inline>
																												</xsl:otherwise>
																											</xsl:choose>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:text>&#160;</xsl:text>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																								<xsl:for-each select="n1:ClassificationTypeName">
																									<xsl:variable name="value-of-template_38">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_38),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_38"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_38"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																								<xsl:for-each select="n1:ClassificationTypeName">
																									<xsl:variable name="value-of-template_39">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_39),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_39"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_39"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																								<xsl:for-each select="n1:ClassificationTypeName">
																									<xsl:variable name="value-of-template_40">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_40),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_40"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_40"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																						</xsl:choose>
																					</fo:block>
																				</fo:block-container>
																			</fo:table-cell>
																		</fo:table-row>
																		<fo:table-row>
																			<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																				<fo:block-container overflow="hidden">
																					<fo:block text-align="left">
																						<fo:inline>
																							<xsl:text>Object Type Name</xsl:text>
																						</fo:inline>
																					</fo:block>
																				</fo:block-container>
																			</fo:table-cell>
																			<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																				<fo:block-container overflow="hidden">
																					<fo:block text-align="left">
																						<xsl:choose>
																							<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																								<xsl:for-each select="n1:ObjectTypeName">
																									<xsl:variable name="value-of-template_41">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_41),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_41"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_41"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																								<xsl:choose>
																									<xsl:when test="string-length(n1:ObjectTypeName) &gt; 0">
																										<xsl:for-each select="n1:ObjectTypeName">
																											<xsl:variable name="value-of-template_42">
																												<xsl:apply-templates/>
																											</xsl:variable>
																											<xsl:choose>
																												<xsl:when test="contains(string($value-of-template_42),'&#x200B;')">
																													<fo:block>
																														<xsl:copy-of select="$value-of-template_42"/>
																													</fo:block>
																												</xsl:when>
																												<xsl:otherwise>
																													<fo:inline>
																														<xsl:copy-of select="$value-of-template_42"/>
																													</fo:inline>
																												</xsl:otherwise>
																											</xsl:choose>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:text>&#160;</xsl:text>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																								<xsl:for-each select="n1:ObjectTypeName">
																									<xsl:variable name="value-of-template_43">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_43),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_43"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_43"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																								<xsl:for-each select="n1:ObjectTypeName">
																									<xsl:variable name="value-of-template_44">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_44),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_44"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_44"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																								<xsl:for-each select="n1:ObjectTypeName">
																									<xsl:variable name="value-of-template_45">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_45),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_45"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_45"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																						</xsl:choose>
																					</fo:block>
																				</fo:block-container>
																			</fo:table-cell>
																		</fo:table-row>
																		<fo:table-row>
																			<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																				<fo:block-container overflow="hidden">
																					<fo:block text-align="left">
																						<fo:inline>
																							<xsl:text>Super Type</xsl:text>
																						</fo:inline>
																					</fo:block>
																				</fo:block-container>
																			</fo:table-cell>
																			<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																				<fo:block-container overflow="hidden">
																					<fo:block text-align="left">
																						<xsl:choose>
																							<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																								<xsl:for-each select="n1:SuperType">
																									<xsl:variable name="value-of-template_46">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_46),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_46"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_46"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																								<xsl:choose>
																									<xsl:when test="string-length(n1:SuperType) &gt; 0">
																										<xsl:for-each select="n1:SuperType">
																											<xsl:variable name="value-of-template_47">
																												<xsl:apply-templates/>
																											</xsl:variable>
																											<xsl:choose>
																												<xsl:when test="contains(string($value-of-template_47),'&#x200B;')">
																													<fo:block>
																														<xsl:copy-of select="$value-of-template_47"/>
																													</fo:block>
																												</xsl:when>
																												<xsl:otherwise>
																													<fo:inline>
																														<xsl:copy-of select="$value-of-template_47"/>
																													</fo:inline>
																												</xsl:otherwise>
																											</xsl:choose>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:text>&#160;</xsl:text>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																								<xsl:for-each select="n1:SuperType">
																									<xsl:variable name="value-of-template_48">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_48),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_48"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_48"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																								<xsl:for-each select="n1:SuperType">
																									<xsl:variable name="value-of-template_49">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_49),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_49"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_49"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																								<xsl:for-each select="n1:SuperType">
																									<xsl:variable name="value-of-template_50">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_50),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_50"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_50"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																						</xsl:choose>
																					</fo:block>
																				</fo:block-container>
																			</fo:table-cell>
																		</fo:table-row>
																		<fo:table-row>
																			<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																				<fo:block-container overflow="hidden">
																					<fo:block text-align="left">
																						<fo:inline>
																							<xsl:text>Synonyms</xsl:text>
																						</fo:inline>
																					</fo:block>
																				</fo:block-container>
																			</fo:table-cell>
																			<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																				<fo:block-container overflow="hidden">
																					<fo:block text-align="left">
																						<xsl:choose>
																							<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																								<xsl:for-each select="n1:Synonyms">
																									<xsl:variable name="value-of-template_51">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_51),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_51"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_51"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																								<xsl:choose>
																									<xsl:when test="string-length(n1:Synonyms) &gt; 0">
																										<xsl:for-each select="n1:Synonyms">
																											<xsl:variable name="value-of-template_52">
																												<xsl:apply-templates/>
																											</xsl:variable>
																											<xsl:choose>
																												<xsl:when test="contains(string($value-of-template_52),'&#x200B;')">
																													<fo:block>
																														<xsl:copy-of select="$value-of-template_52"/>
																													</fo:block>
																												</xsl:when>
																												<xsl:otherwise>
																													<fo:inline>
																														<xsl:copy-of select="$value-of-template_52"/>
																													</fo:inline>
																												</xsl:otherwise>
																											</xsl:choose>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:text>&#160;</xsl:text>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																								<xsl:for-each select="n1:Synonyms">
																									<xsl:variable name="value-of-template_53">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_53),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_53"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_53"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																								<xsl:for-each select="n1:Synonyms">
																									<xsl:variable name="value-of-template_54">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_54),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_54"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_54"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																								<xsl:for-each select="n1:Synonyms">
																									<xsl:variable name="value-of-template_55">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_55),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_55"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_55"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																						</xsl:choose>
																					</fo:block>
																				</fo:block-container>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="string($altova:tablerows)">
																			<xsl:copy-of select="$altova:tablerows"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:table-row>
																				<fo:table-cell>
																					<fo:block/>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:otherwise>
																	</xsl:choose>
																</fo:table-body>
															</fo:table>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
												<fo:table-cell padding="0" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left"/>
													</fo:block-container>
												</fo:table-cell>
												<fo:table-cell font-size="xx-small" padding="0" display-align="before">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<xsl:if test="count( n1:MappedTablesCollection )">
																<fo:inline font-size="xx-small" font-style="italic">
																	<xsl:text>Mapped Tables</xsl:text>
																</fo:inline>
																<fo:block/>
																<fo:inline-container>
																	<fo:block>
																		<xsl:text>&#x200B;</xsl:text>
																	</fo:block>
																</fo:inline-container>
																<fo:table width="8cm" table-layout="fixed" border-spacing="0">
																	<fo:table-column column-width="8cm"/>
																	<xsl:variable name="altova:CurrContextGrid_56" select="."/>
																	<fo:table-body start-indent="0pt">
																		<xsl:variable name="altova:tablerows">
																			<fo:table-row background-color="#d9f5ff">
																				<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
																					<fo:block-container overflow="hidden">
																						<fo:block text-align="center">
																							<fo:inline>
																								<xsl:text>Table Name</xsl:text>
																							</fo:inline>
																						</fo:block>
																					</fo:block-container>
																				</fo:table-cell>
																			</fo:table-row>
																			<xsl:for-each select="n1:MappedTablesCollection">
																				<xsl:for-each select="n1:MappedTablesDetails">
																					<fo:table-row>
																						<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																							<fo:block-container overflow="hidden">
																								<fo:block text-align="left">
																									<xsl:choose>
																										<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																											<xsl:for-each select="n1:TableName">
																												<xsl:variable name="value-of-template_57">
																													<xsl:apply-templates/>
																												</xsl:variable>
																												<xsl:choose>
																													<xsl:when test="contains(string($value-of-template_57),'&#x200B;')">
																														<fo:block>
																															<xsl:copy-of select="$value-of-template_57"/>
																														</fo:block>
																													</xsl:when>
																													<xsl:otherwise>
																														<fo:inline>
																															<xsl:copy-of select="$value-of-template_57"/>
																														</fo:inline>
																													</xsl:otherwise>
																												</xsl:choose>
																											</xsl:for-each>
																										</xsl:when>
																										<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																											<xsl:choose>
																												<xsl:when test="string-length(n1:TableName) &gt; 0">
																													<xsl:for-each select="n1:TableName">
																														<xsl:variable name="value-of-template_58">
																															<xsl:apply-templates/>
																														</xsl:variable>
																														<xsl:choose>
																															<xsl:when test="contains(string($value-of-template_58),'&#x200B;')">
																																<fo:block>
																																	<xsl:copy-of select="$value-of-template_58"/>
																																</fo:block>
																															</xsl:when>
																															<xsl:otherwise>
																																<fo:inline>
																																	<xsl:copy-of select="$value-of-template_58"/>
																																</fo:inline>
																															</xsl:otherwise>
																														</xsl:choose>
																													</xsl:for-each>
																												</xsl:when>
																												<xsl:otherwise>
																													<fo:inline>
																														<xsl:text>&#160;</xsl:text>
																													</fo:inline>
																												</xsl:otherwise>
																											</xsl:choose>
																										</xsl:when>
																										<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																											<xsl:for-each select="n1:TableName">
																												<xsl:variable name="value-of-template_59">
																													<xsl:apply-templates/>
																												</xsl:variable>
																												<xsl:choose>
																													<xsl:when test="contains(string($value-of-template_59),'&#x200B;')">
																														<fo:block>
																															<xsl:copy-of select="$value-of-template_59"/>
																														</fo:block>
																													</xsl:when>
																													<xsl:otherwise>
																														<fo:inline>
																															<xsl:copy-of select="$value-of-template_59"/>
																														</fo:inline>
																													</xsl:otherwise>
																												</xsl:choose>
																											</xsl:for-each>
																										</xsl:when>
																										<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																											<xsl:for-each select="n1:TableName">
																												<xsl:variable name="value-of-template_60">
																													<xsl:apply-templates/>
																												</xsl:variable>
																												<xsl:choose>
																													<xsl:when test="contains(string($value-of-template_60),'&#x200B;')">
																														<fo:block>
																															<xsl:copy-of select="$value-of-template_60"/>
																														</fo:block>
																													</xsl:when>
																													<xsl:otherwise>
																														<fo:inline>
																															<xsl:copy-of select="$value-of-template_60"/>
																														</fo:inline>
																													</xsl:otherwise>
																												</xsl:choose>
																											</xsl:for-each>
																										</xsl:when>
																										<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																											<xsl:for-each select="n1:TableName">
																												<xsl:variable name="value-of-template_61">
																													<xsl:apply-templates/>
																												</xsl:variable>
																												<xsl:choose>
																													<xsl:when test="contains(string($value-of-template_61),'&#x200B;')">
																														<fo:block>
																															<xsl:copy-of select="$value-of-template_61"/>
																														</fo:block>
																													</xsl:when>
																													<xsl:otherwise>
																														<fo:inline>
																															<xsl:copy-of select="$value-of-template_61"/>
																														</fo:inline>
																													</xsl:otherwise>
																												</xsl:choose>
																											</xsl:for-each>
																										</xsl:when>
																									</xsl:choose>
																								</fo:block>
																							</fo:block-container>
																						</fo:table-cell>
																					</fo:table-row>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="string($altova:tablerows)">
																				<xsl:copy-of select="$altova:tablerows"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:table-row>
																					<fo:table-cell>
																						<fo:block/>
																					</fo:table-cell>
																				</fo:table-row>
																			</xsl:otherwise>
																		</xsl:choose>
																	</fo:table-body>
																</fo:table>
															</xsl:if>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows)">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
								<fo:inline>
									<xsl:text>&#160;</xsl:text>
								</fo:inline>
								<xsl:if test="count( n1:DescriptionNotes )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<xsl:for-each select="n1:DescriptionNotes">
										<fo:inline-container>
											<fo:block>
												<xsl:text>&#x200B;</xsl:text>
											</fo:block>
										</fo:inline-container>
										<fo:table width="20cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="4cm"/>
											<fo:table-column column-width="16cm"/>
											<xsl:variable name="altova:CurrContextGrid_62" select="."/>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<fo:inline>
																		<xsl:text>Description</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:Description">
																				<xsl:for-each select="n1:DescriptionDetails">
																					<xsl:for-each select="n1:DescriptionRow">
																						<xsl:variable name="value-of-template_63">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_63),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_63"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_63"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																						<fo:block/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="count(n1:Description/n1:DescriptionDetails/n1:DescriptionRow) &gt; 0">
																					<xsl:for-each select="n1:Description">
																						<xsl:for-each select="n1:DescriptionDetails">
																							<xsl:for-each select="n1:DescriptionRow">
																								<xsl:variable name="value-of-template_64">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_64),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_64"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_64"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:choose>
																				<xsl:when test="count(n1:Description/n1:DescriptionDetails/n1:DescriptionRow) &gt; 0">
																					<xsl:for-each select="n1:Description">
																						<xsl:for-each select="n1:DescriptionDetails">
																							<xsl:for-each select="n1:DescriptionRow">
																								<xsl:variable name="value-of-template_65">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_65),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_65"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_65"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise/>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:Description">
																				<xsl:for-each select="n1:DescriptionDetails">
																					<xsl:for-each select="n1:DescriptionRow">
																						<xsl:variable name="value-of-template_66">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_66),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_66"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_66"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																						<fo:block/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:Description">
																				<xsl:for-each select="n1:DescriptionDetails">
																					<xsl:for-each select="n1:DescriptionRow">
																						<xsl:variable name="value-of-template_67">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_67),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_67"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_67"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																						<fo:block/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<fo:inline>
																		<xsl:text>Notes</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:Notes">
																				<xsl:for-each select="n1:NotesDetails">
																					<xsl:for-each select="n1:NoteRow">
																						<xsl:variable name="value-of-template_68">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_68),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_68"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_68"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																						<fo:block/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="count(n1:Notes/n1:NotesDetails/n1:NoteRow) &gt; 0">
																					<xsl:for-each select="n1:Notes">
																						<xsl:for-each select="n1:NotesDetails">
																							<xsl:for-each select="n1:NoteRow">
																								<xsl:variable name="value-of-template_69">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_69),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_69"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_69"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:choose>
																				<xsl:when test="count(n1:Notes/n1:NotesDetails/n1:NoteRow) &gt; 0">
																					<xsl:for-each select="n1:Notes">
																						<xsl:for-each select="n1:NotesDetails">
																							<xsl:for-each select="n1:NoteRow">
																								<xsl:variable name="value-of-template_70">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_70),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_70"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_70"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise/>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:Notes">
																				<xsl:for-each select="n1:NotesDetails">
																					<xsl:for-each select="n1:NoteRow">
																						<xsl:variable name="value-of-template_71">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_71),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_71"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_71"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																						<fo:block/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:Notes">
																				<xsl:for-each select="n1:NotesDetails">
																					<xsl:for-each select="n1:NoteRow">
																						<xsl:variable name="value-of-template_72">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_72),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_72"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_72"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																						<fo:block/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:for-each>
								</xsl:if>
								<fo:inline>
									<xsl:text>&#160;</xsl:text>
								</fo:inline>
								<xsl:if test="count( n1:QuantitativeInfoCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<xsl:for-each select="n1:QuantitativeInfoCollection">
										<fo:inline-container>
											<fo:block>
												<xsl:text>&#x200B;</xsl:text>
											</fo:block>
										</fo:inline-container>
										<fo:table width="8cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="4cm"/>
											<fo:table-column column-width="4cm"/>
											<xsl:variable name="altova:CurrContextGrid_73" select="."/>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<fo:inline>
																		<xsl:text>Number Of Attributes</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="right">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:NumberOfAttributes">
																				<xsl:variable name="value-of-template_74">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_74),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_74"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_74"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:NumberOfAttributes) &gt; 0">
																					<xsl:for-each select="n1:NumberOfAttributes">
																						<xsl:variable name="value-of-template_75">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_75),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_75"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_75"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:NumberOfAttributes">
																				<xsl:variable name="value-of-template_76">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_76),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_76"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_76"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:NumberOfAttributes">
																				<xsl:variable name="value-of-template_77">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_77),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_77"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_77"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:NumberOfAttributes">
																				<xsl:variable name="value-of-template_78">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_78),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_78"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_78"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<fo:inline>
																		<xsl:text>Number Of Rows Min.</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="right">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:NumberOfRowsMin">
																				<xsl:variable name="value-of-template_79">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_79),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_79"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_79"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:NumberOfRowsMin) &gt; 0">
																					<xsl:for-each select="n1:NumberOfRowsMin">
																						<xsl:variable name="value-of-template_80">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_80),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_80"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_80"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:NumberOfRowsMin">
																				<xsl:variable name="value-of-template_81">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_81),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_81"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_81"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:NumberOfRowsMin">
																				<xsl:variable name="value-of-template_82">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_82),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_82"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_82"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:NumberOfRowsMin">
																				<xsl:variable name="value-of-template_83">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_83),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_83"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_83"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<fo:inline>
																		<xsl:text>Number Of Rows Max.</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="right">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:NumberOfRowsMax">
																				<xsl:variable name="value-of-template_84">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_84),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_84"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_84"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:NumberOfRowsMax) &gt; 0">
																					<xsl:for-each select="n1:NumberOfRowsMax">
																						<xsl:variable name="value-of-template_85">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_85),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_85"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_85"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:NumberOfRowsMax">
																				<xsl:variable name="value-of-template_86">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_86),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_86"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_86"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:NumberOfRowsMax">
																				<xsl:variable name="value-of-template_87">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_87),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_87"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_87"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:NumberOfRowsMax">
																				<xsl:variable name="value-of-template_88">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_88),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_88"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_88"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<fo:inline>
																		<xsl:text>Expected Number Of Rows</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="right">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:ExpectedNumberOfRows">
																				<xsl:variable name="value-of-template_89">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_89),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_89"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_89"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:ExpectedNumberOfRows) &gt; 0">
																					<xsl:for-each select="n1:ExpectedNumberOfRows">
																						<xsl:variable name="value-of-template_90">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_90),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_90"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_90"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:ExpectedNumberOfRows">
																				<xsl:variable name="value-of-template_91">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_91),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_91"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_91"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:ExpectedNumberOfRows">
																				<xsl:variable name="value-of-template_92">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_92),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_92"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_92"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:ExpectedNumberOfRows">
																				<xsl:variable name="value-of-template_93">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_93),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_93"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_93"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<fo:inline>
																		<xsl:text>Expected Growth</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="right">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:ExpectedGrowth">
																				<xsl:variable name="value-of-template_94">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_94),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_94"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_94"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:ExpectedGrowth) &gt; 0">
																					<xsl:for-each select="n1:ExpectedGrowth">
																						<xsl:variable name="value-of-template_95">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_95),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_95"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_95"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:ExpectedGrowth">
																				<xsl:variable name="value-of-template_96">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_96),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_96"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_96"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:ExpectedGrowth">
																				<xsl:variable name="value-of-template_97">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_97),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_97"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_97"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:ExpectedGrowth">
																				<xsl:variable name="value-of-template_98">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_98),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_98"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_98"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<fo:inline>
																		<xsl:text>Growth Interval</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="right">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:GrowthInterval">
																				<xsl:variable name="value-of-template_99">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_99),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_99"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_99"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:GrowthInterval) &gt; 0">
																					<xsl:for-each select="n1:GrowthInterval">
																						<xsl:variable name="value-of-template_100">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_100),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_100"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_100"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:GrowthInterval">
																				<xsl:variable name="value-of-template_101">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_101),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_101"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_101"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:GrowthInterval">
																				<xsl:variable name="value-of-template_102">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_102),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_102"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_102"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:GrowthInterval">
																				<xsl:variable name="value-of-template_103">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_103),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_103"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_103"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:for-each>
								</xsl:if>
								<xsl:if test="count( n1:DiagramsCollection)">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Used In Diagrams</xsl:text>
									</fo:inline>
									<fo:block/>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<fo:table width="8cm" table-layout="fixed" border-spacing="0">
										<fo:table-column column-width="8cm"/>
										<xsl:variable name="altova:CurrContextGrid_104" select="."/>
										<fo:table-body start-indent="0pt">
											<xsl:variable name="altova:tablerows">
												<fo:table-row background-color="#d9f5ff">
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
														<fo:block-container overflow="hidden">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Diagram Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:block-container>
													</fo:table-cell>
												</fo:table-row>
												<xsl:for-each select="n1:DiagramsCollection">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<xsl:for-each select="n1:DiagramName">
																		<fo:basic-link text-decoration="underline" color="blue">
																			<xsl:variable name="altova:url" select="string(.)"/>
																			<xsl:choose>
																				<xsl:when test="not($altova:url)">
																					<xsl:attribute name="external-destination">
																						<xsl:text>url()</xsl:text>
																					</xsl:attribute>
																				</xsl:when>
																				<xsl:when test="substring($altova:url, 1, 1) = '#'">
																					<xsl:attribute name="internal-destination">
																						<xsl:value-of select="substring($altova:url, 2)"/>
																					</xsl:attribute>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:attribute name="external-destination">
																						<xsl:text>url(</xsl:text>
																						<xsl:choose>
																							<xsl:when test="starts-with($altova:url,'\\') or substring($altova:url,2,1)=':'">
																								<xsl:value-of select="concat('file:///',translate($altova:url,'\','/'))"/>
																							</xsl:when>
																							<xsl:otherwise>
																								<xsl:call-template name="altova:double-backslash">
																									<xsl:with-param name="text">
																										<xsl:value-of select="$altova:url"/>
																									</xsl:with-param>
																									<xsl:with-param name="text-length">
																										<xsl:value-of select="string-length($altova:url)"/>
																									</xsl:with-param>
																								</xsl:call-template>
																							</xsl:otherwise>
																						</xsl:choose>
																						<xsl:text>)</xsl:text>
																					</xsl:attribute>
																				</xsl:otherwise>
																			</xsl:choose>
																			<fo:inline>
																				<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>
																			</fo:inline>
																			<fo:block/>
																		</fo:basic-link>
																	</xsl:for-each>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
												</xsl:for-each>
											</xsl:variable>
											<xsl:choose>
												<xsl:when test="string($altova:tablerows)">
													<xsl:copy-of select="$altova:tablerows"/>
												</xsl:when>
												<xsl:otherwise>
													<fo:table-row>
														<fo:table-cell>
															<fo:block/>
														</fo:table-cell>
													</fo:table-row>
												</xsl:otherwise>
											</xsl:choose>
										</fo:table-body>
									</fo:table>
								</xsl:if>
								<xsl:if test="count( n1:AttributesCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Attributes</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:AttributesCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="1cm"/>
											<fo:table-column column-width="5cm"/>
											<fo:table-column column-width="0.800cm"/>
											<fo:table-column column-width="0.800cm"/>
											<fo:table-column column-width="0.800cm"/>
											<fo:table-column column-width="4cm"/>
											<fo:table-column column-width="1cm"/>
											<fo:table-column column-width="2.900cm"/>
											<fo:table-column column-width="2.900cm"/>
											<fo:table-column column-width="2.900cm"/>
											<fo:table-column column-width="2.900cm"/>
											<xsl:variable name="altova:CurrContextGrid_105" select="."/>
											<fo:table-header background-color="#d9f5ff" text-align="center" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>No</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Attribute Name</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>PK</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>FK</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>M</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Data Type</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>DT </xsl:text>
																	</fo:inline>
																	<fo:block/>
																	<fo:inline>
																		<xsl:text>kind</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Domain Name</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Formula</xsl:text>
																	</fo:inline>
																	<fo:block/>
																	<fo:inline>
																		<xsl:text>(Default Value)</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Preferred Abbreviation</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Synonyms</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:AttributesCollection">
														<xsl:for-each select="n1:AttributeDetails">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="right">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:Sequence">
																						<xsl:variable name="value-of-template_106">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_106),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_106"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_106"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:Sequence) &gt; 0">
																							<xsl:for-each select="n1:Sequence">
																								<xsl:variable name="value-of-template_107">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_107),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_107"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_107"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:Sequence">
																						<xsl:variable name="value-of-template_108">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_108),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_108"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_108"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:Sequence">
																						<xsl:variable name="value-of-template_109">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_109),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_109"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_109"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:Sequence">
																						<xsl:variable name="value-of-template_110">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_110),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_110"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_110"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:AttributeName">
																						<xsl:variable name="value-of-template_111">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_111),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_111"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_111"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:AttributeName) &gt; 0">
																							<xsl:for-each select="n1:AttributeName">
																								<xsl:variable name="value-of-template_112">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_112),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_112"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_112"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:AttributeName">
																						<xsl:variable name="value-of-template_113">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_113),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_113"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_113"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:AttributeName">
																						<xsl:variable name="value-of-template_114">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_114),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_114"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_114"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:AttributeName">
																						<xsl:variable name="value-of-template_115">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_115),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_115"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_115"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:PK">
																						<xsl:variable name="value-of-template_116">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_116),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_116"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_116"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:PK) &gt; 0">
																							<xsl:for-each select="n1:PK">
																								<xsl:variable name="value-of-template_117">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_117),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_117"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_117"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:PK">
																						<xsl:variable name="value-of-template_118">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_118),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_118"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_118"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:PK">
																						<xsl:variable name="value-of-template_119">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_119),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_119"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_119"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:PK">
																						<xsl:variable name="value-of-template_120">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_120),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_120"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_120"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:FK">
																						<xsl:variable name="value-of-template_121">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_121),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_121"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_121"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:FK) &gt; 0">
																							<xsl:for-each select="n1:FK">
																								<xsl:variable name="value-of-template_122">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_122),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_122"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_122"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:FK">
																						<xsl:variable name="value-of-template_123">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_123),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_123"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_123"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:FK">
																						<xsl:variable name="value-of-template_124">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_124),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_124"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_124"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:FK">
																						<xsl:variable name="value-of-template_125">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_125),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_125"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_125"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:M">
																						<xsl:variable name="value-of-template_126">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_126),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_126"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_126"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:M) &gt; 0">
																							<xsl:for-each select="n1:M">
																								<xsl:variable name="value-of-template_127">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_127),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_127"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_127"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:M">
																						<xsl:variable name="value-of-template_128">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_128),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_128"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_128"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:M">
																						<xsl:variable name="value-of-template_129">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_129),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_129"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_129"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:M">
																						<xsl:variable name="value-of-template_130">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_130),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_130"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_130"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:DataType">
																						<xsl:variable name="value-of-template_131">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_131),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_131"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_131"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:DataType) &gt; 0">
																							<xsl:for-each select="n1:DataType">
																								<xsl:variable name="value-of-template_132">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_132),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_132"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_132"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:DataType">
																						<xsl:variable name="value-of-template_133">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_133),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_133"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_133"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:DataType">
																						<xsl:variable name="value-of-template_134">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_134),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_134"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_134"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:DataType">
																						<xsl:variable name="value-of-template_135">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_135),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_135"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_135"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:DataTypeKind">
																						<xsl:variable name="value-of-template_136">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_136),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_136"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_136"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:DataTypeKind) &gt; 0">
																							<xsl:for-each select="n1:DataTypeKind">
																								<xsl:variable name="value-of-template_137">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_137),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_137"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_137"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:DataTypeKind">
																						<xsl:variable name="value-of-template_138">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_138),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_138"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_138"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:DataTypeKind">
																						<xsl:variable name="value-of-template_139">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_139),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_139"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_139"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:DataTypeKind">
																						<xsl:variable name="value-of-template_140">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_140),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_140"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_140"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:DomainName">
																						<xsl:variable name="value-of-template_141">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_141),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_141"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_141"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:DomainName) &gt; 0">
																							<xsl:for-each select="n1:DomainName">
																								<xsl:variable name="value-of-template_142">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_142),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_142"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_142"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:DomainName">
																						<xsl:variable name="value-of-template_143">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_143),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_143"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_143"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:DomainName">
																						<xsl:variable name="value-of-template_144">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_144),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_144"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_144"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:DomainName">
																						<xsl:variable name="value-of-template_145">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_145),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_145"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_145"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:Formula">
																						<xsl:variable name="value-of-template_146">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_146),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_146"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_146"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:Formula) &gt; 0">
																							<xsl:for-each select="n1:Formula">
																								<xsl:variable name="value-of-template_147">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_147),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_147"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_147"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:Formula">
																						<xsl:variable name="value-of-template_148">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_148),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_148"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_148"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:Formula">
																						<xsl:variable name="value-of-template_149">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_149),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_149"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_149"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:Formula">
																						<xsl:variable name="value-of-template_150">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_150),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_150"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_150"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:PreferredAbbreviation">
																						<xsl:variable name="value-of-template_151">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_151),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_151"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_151"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:PreferredAbbreviation) &gt; 0">
																							<xsl:for-each select="n1:PreferredAbbreviation">
																								<xsl:variable name="value-of-template_152">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_152),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_152"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_152"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:PreferredAbbreviation">
																						<xsl:variable name="value-of-template_153">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_153),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_153"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_153"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:PreferredAbbreviation">
																						<xsl:variable name="value-of-template_154">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_154),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_154"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_154"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:PreferredAbbreviation">
																						<xsl:variable name="value-of-template_155">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_155),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_155"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_155"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:AttributeSynonyms">
																						<xsl:variable name="value-of-template_156">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_156),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_156"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_156"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:AttributeSynonyms) &gt; 0">
																							<xsl:for-each select="n1:AttributeSynonyms">
																								<xsl:variable name="value-of-template_157">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_157),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_157"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_157"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:AttributeSynonyms">
																						<xsl:variable name="value-of-template_158">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_158),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_158"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_158"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:AttributeSynonyms">
																						<xsl:variable name="value-of-template_159">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_159),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_159"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_159"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:AttributeSynonyms">
																						<xsl:variable name="value-of-template_160">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_160),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_160"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_160"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
								<xsl:if test="count( n1:AttributesCommentsCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Attributes Comments</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:AttributesCommentsCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="1cm"/>
											<fo:table-column column-width="6cm"/>
											<fo:table-column column-width="9cm"/>
											<fo:table-column column-width="9cm"/>
											<xsl:variable name="altova:CurrContextGrid_161" select="."/>
											<fo:table-header background-color="#d9f5ff" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>No</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Attribute Name</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Description</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Notes</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:AttributesCommentsCollection">
														<xsl:for-each select="n1:AttributeCommentsDetails">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="right">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:AttributeCommentsSequence">
																						<xsl:variable name="value-of-template_162">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_162),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_162"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_162"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:AttributeCommentsSequence) &gt; 0">
																							<xsl:for-each select="n1:AttributeCommentsSequence">
																								<xsl:variable name="value-of-template_163">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_163),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_163"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_163"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:AttributeCommentsSequence">
																						<xsl:variable name="value-of-template_164">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_164),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_164"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_164"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:AttributeCommentsSequence">
																						<xsl:variable name="value-of-template_165">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_165),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_165"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_165"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:AttributeCommentsSequence">
																						<xsl:variable name="value-of-template_166">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_166),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_166"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_166"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:AttributeCommentsName">
																						<xsl:variable name="value-of-template_167">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_167),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_167"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_167"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:AttributeCommentsName) &gt; 0">
																							<xsl:for-each select="n1:AttributeCommentsName">
																								<xsl:variable name="value-of-template_168">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_168),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_168"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_168"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:AttributeCommentsName">
																						<xsl:variable name="value-of-template_169">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_169),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_169"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_169"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:AttributeCommentsName">
																						<xsl:variable name="value-of-template_170">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_170),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_170"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_170"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:AttributeCommentsName">
																						<xsl:variable name="value-of-template_171">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_171),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_171"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_171"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:AttributeDescription">
																						<xsl:for-each select="n1:AttributeDescriptionDetails">
																							<xsl:for-each select="n1:AttributeDescriptionRow">
																								<xsl:variable name="value-of-template_172">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_172),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_172"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_172"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="count(n1:AttributeDescription/n1:AttributeDescriptionDetails/n1:AttributeDescriptionRow) &gt; 0">
																							<xsl:for-each select="n1:AttributeDescription">
																								<xsl:for-each select="n1:AttributeDescriptionDetails">
																									<xsl:for-each select="n1:AttributeDescriptionRow">
																										<xsl:variable name="value-of-template_173">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_173),'&#x200B;')">
																												<fo:block>
																													<xsl:copy-of select="$value-of-template_173"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:copy-of select="$value-of-template_173"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																										<fo:block/>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:choose>
																						<xsl:when test="count(n1:AttributeDescription/n1:AttributeDescriptionDetails/n1:AttributeDescriptionRow) &gt; 0">
																							<xsl:for-each select="n1:AttributeDescription">
																								<xsl:for-each select="n1:AttributeDescriptionDetails">
																									<xsl:for-each select="n1:AttributeDescriptionRow">
																										<xsl:variable name="value-of-template_174">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_174),'&#x200B;')">
																												<fo:block>
																													<xsl:copy-of select="$value-of-template_174"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:copy-of select="$value-of-template_174"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																										<fo:block/>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise/>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:AttributeDescription">
																						<xsl:for-each select="n1:AttributeDescriptionDetails">
																							<xsl:for-each select="n1:AttributeDescriptionRow">
																								<xsl:variable name="value-of-template_175">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_175),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_175"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_175"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:AttributeDescription">
																						<xsl:for-each select="n1:AttributeDescriptionDetails">
																							<xsl:for-each select="n1:AttributeDescriptionRow">
																								<xsl:variable name="value-of-template_176">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_176),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_176"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_176"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:AttributeNotes">
																						<xsl:for-each select="n1:AttributeNotesDetails">
																							<xsl:for-each select="n1:AttributeNoteRow">
																								<xsl:variable name="value-of-template_177">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_177),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_177"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_177"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="count(n1:AttributeNotes/n1:AttributeNotesDetails/n1:AttributeNoteRow) &gt; 0">
																							<xsl:for-each select="n1:AttributeNotes">
																								<xsl:for-each select="n1:AttributeNotesDetails">
																									<xsl:for-each select="n1:AttributeNoteRow">
																										<xsl:variable name="value-of-template_178">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_178),'&#x200B;')">
																												<fo:block>
																													<xsl:copy-of select="$value-of-template_178"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:copy-of select="$value-of-template_178"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																										<fo:block/>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:choose>
																						<xsl:when test="count(n1:AttributeNotes/n1:AttributeNotesDetails/n1:AttributeNoteRow) &gt; 0">
																							<xsl:for-each select="n1:AttributeNotes">
																								<xsl:for-each select="n1:AttributeNotesDetails">
																									<xsl:for-each select="n1:AttributeNoteRow">
																										<xsl:variable name="value-of-template_179">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_179),'&#x200B;')">
																												<fo:block>
																													<xsl:copy-of select="$value-of-template_179"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:copy-of select="$value-of-template_179"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																										<fo:block/>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise/>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:AttributeNotes">
																						<xsl:for-each select="n1:AttributeNotesDetails">
																							<xsl:for-each select="n1:AttributeNoteRow">
																								<xsl:variable name="value-of-template_180">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_180),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_180"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_180"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:AttributeNotes">
																						<xsl:for-each select="n1:AttributeNotesDetails">
																							<xsl:for-each select="n1:AttributeNoteRow">
																								<xsl:variable name="value-of-template_181">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_181),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_181"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_181"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
								<xsl:if test="count( n1:ConstraintsCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Constraints</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:ConstraintsCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="3cm"/>
											<fo:table-column column-width="3cm"/>
											<fo:table-column column-width="19cm"/>
											<xsl:variable name="altova:CurrContextGrid_182" select="."/>
											<fo:table-header background-color="#d9f5ff" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Type</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Attribute / Constraint Name</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Details</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:ConstraintsCollection">
														<xsl:for-each select="n1:ConstraintDetails">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:ContstraintType">
																						<xsl:variable name="value-of-template_183">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_183),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_183"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_183"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:ContstraintType) &gt; 0">
																							<xsl:for-each select="n1:ContstraintType">
																								<xsl:variable name="value-of-template_184">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_184),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_184"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_184"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:ContstraintType">
																						<xsl:variable name="value-of-template_185">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_185),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_185"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_185"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:ContstraintType">
																						<xsl:variable name="value-of-template_186">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_186),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_186"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_186"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:ContstraintType">
																						<xsl:variable name="value-of-template_187">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_187),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_187"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_187"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:ALCConstraintName">
																						<xsl:variable name="value-of-template_188">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_188),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_188"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_188"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:ALCConstraintName) &gt; 0">
																							<xsl:for-each select="n1:ALCConstraintName">
																								<xsl:variable name="value-of-template_189">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_189),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_189"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_189"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:ALCConstraintName">
																						<xsl:variable name="value-of-template_190">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_190),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_190"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_190"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:ALCConstraintName">
																						<xsl:variable name="value-of-template_191">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_191),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_191"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_191"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:ALCConstraintName">
																						<xsl:variable name="value-of-template_192">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_192),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_192"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_192"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:if test="count( n1:RangesCollection ) != 0">
																				<fo:inline-container>
																					<fo:block>
																						<xsl:text>&#x200B;</xsl:text>
																					</fo:block>
																				</fo:inline-container>
																				<xsl:if test="n1:RangesCollection">
																					<fo:table width="18.5cm" table-layout="fixed" border-spacing="0">
																						<fo:table-column column-width="3cm"/>
																						<fo:table-column column-width="3cm"/>
																						<fo:table-column column-width="12.500cm"/>
																						<xsl:variable name="altova:CurrContextGrid_193" select="."/>
																						<fo:table-header background-color="#d9f5ff" start-indent="0pt">
																							<xsl:variable name="altova:tablerows">
																								<fo:table-row>
																									<fo:table-cell number-columns-spanned="3" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																										<fo:block-container overflow="hidden">
																											<fo:block text-align="center">
																												<fo:inline>
																													<xsl:text>Ranges</xsl:text>
																												</fo:inline>
																											</fo:block>
																										</fo:block-container>
																									</fo:table-cell>
																								</fo:table-row>
																								<fo:table-row>
																									<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																										<fo:block-container overflow="hidden">
																											<fo:block text-align="center">
																												<fo:inline>
																													<xsl:text>Begin Value</xsl:text>
																												</fo:inline>
																											</fo:block>
																										</fo:block-container>
																									</fo:table-cell>
																									<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																										<fo:block-container overflow="hidden">
																											<fo:block text-align="center">
																												<fo:inline>
																													<xsl:text>End Value</xsl:text>
																												</fo:inline>
																											</fo:block>
																										</fo:block-container>
																									</fo:table-cell>
																									<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																										<fo:block-container overflow="hidden">
																											<fo:block text-align="center">
																												<fo:inline>
																													<xsl:text>Description</xsl:text>
																												</fo:inline>
																											</fo:block>
																										</fo:block-container>
																									</fo:table-cell>
																								</fo:table-row>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($altova:tablerows)">
																									<xsl:copy-of select="$altova:tablerows"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:table-row>
																										<fo:table-cell>
																											<fo:block/>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:otherwise>
																							</xsl:choose>
																						</fo:table-header>
																						<fo:table-body start-indent="0pt">
																							<xsl:variable name="altova:tablerows">
																								<xsl:for-each select="n1:RangesCollection">
																									<xsl:for-each select="n1:RangeDetails">
																										<fo:table-row>
																											<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																												<fo:block-container overflow="hidden">
																													<fo:block text-align="right">
																														<xsl:choose>
																															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																<xsl:for-each select="n1:RangeBeginValue">
																																	<xsl:variable name="value-of-template_194">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_194),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_194"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_194"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																<xsl:choose>
																																	<xsl:when test="string-length(n1:RangeBeginValue) &gt; 0">
																																		<xsl:for-each select="n1:RangeBeginValue">
																																			<xsl:variable name="value-of-template_195">
																																				<xsl:apply-templates/>
																																			</xsl:variable>
																																			<xsl:choose>
																																				<xsl:when test="contains(string($value-of-template_195),'&#x200B;')">
																																					<fo:block>
																																						<xsl:copy-of select="$value-of-template_195"/>
																																					</fo:block>
																																				</xsl:when>
																																				<xsl:otherwise>
																																					<fo:inline>
																																						<xsl:copy-of select="$value-of-template_195"/>
																																					</fo:inline>
																																				</xsl:otherwise>
																																			</xsl:choose>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:text>&#160;</xsl:text>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																<xsl:for-each select="n1:RangeBeginValue">
																																	<xsl:variable name="value-of-template_196">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_196),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_196"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_196"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																<xsl:for-each select="n1:RangeBeginValue">
																																	<xsl:variable name="value-of-template_197">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_197),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_197"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_197"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																<xsl:for-each select="n1:RangeBeginValue">
																																	<xsl:variable name="value-of-template_198">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_198),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_198"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_198"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																														</xsl:choose>
																													</fo:block>
																												</fo:block-container>
																											</fo:table-cell>
																											<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																												<fo:block-container overflow="hidden">
																													<fo:block text-align="right">
																														<xsl:choose>
																															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																<xsl:for-each select="n1:RangeEndValue">
																																	<xsl:variable name="value-of-template_199">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_199),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_199"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_199"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																<xsl:choose>
																																	<xsl:when test="string-length(n1:RangeEndValue) &gt; 0">
																																		<xsl:for-each select="n1:RangeEndValue">
																																			<xsl:variable name="value-of-template_200">
																																				<xsl:apply-templates/>
																																			</xsl:variable>
																																			<xsl:choose>
																																				<xsl:when test="contains(string($value-of-template_200),'&#x200B;')">
																																					<fo:block>
																																						<xsl:copy-of select="$value-of-template_200"/>
																																					</fo:block>
																																				</xsl:when>
																																				<xsl:otherwise>
																																					<fo:inline>
																																						<xsl:copy-of select="$value-of-template_200"/>
																																					</fo:inline>
																																				</xsl:otherwise>
																																			</xsl:choose>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:text>&#160;</xsl:text>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																<xsl:for-each select="n1:RangeEndValue">
																																	<xsl:variable name="value-of-template_201">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_201),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_201"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_201"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																<xsl:for-each select="n1:RangeEndValue">
																																	<xsl:variable name="value-of-template_202">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_202),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_202"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_202"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																<xsl:for-each select="n1:RangeEndValue">
																																	<xsl:variable name="value-of-template_203">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_203),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_203"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_203"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																														</xsl:choose>
																													</fo:block>
																												</fo:block-container>
																											</fo:table-cell>
																											<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																												<fo:block-container overflow="hidden">
																													<fo:block text-align="left">
																														<xsl:choose>
																															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																<xsl:for-each select="n1:RangeShortDescription">
																																	<xsl:variable name="value-of-template_204">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_204),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_204"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_204"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																<xsl:choose>
																																	<xsl:when test="string-length(n1:RangeShortDescription) &gt; 0">
																																		<xsl:for-each select="n1:RangeShortDescription">
																																			<xsl:variable name="value-of-template_205">
																																				<xsl:apply-templates/>
																																			</xsl:variable>
																																			<xsl:choose>
																																				<xsl:when test="contains(string($value-of-template_205),'&#x200B;')">
																																					<fo:block>
																																						<xsl:copy-of select="$value-of-template_205"/>
																																					</fo:block>
																																				</xsl:when>
																																				<xsl:otherwise>
																																					<fo:inline>
																																						<xsl:copy-of select="$value-of-template_205"/>
																																					</fo:inline>
																																				</xsl:otherwise>
																																			</xsl:choose>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:text>&#160;</xsl:text>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																<xsl:for-each select="n1:RangeShortDescription">
																																	<xsl:variable name="value-of-template_206">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_206),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_206"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_206"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																<xsl:for-each select="n1:RangeShortDescription">
																																	<xsl:variable name="value-of-template_207">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_207),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_207"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_207"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																<xsl:for-each select="n1:RangeShortDescription">
																																	<xsl:variable name="value-of-template_208">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_208),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_208"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_208"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																														</xsl:choose>
																													</fo:block>
																												</fo:block-container>
																											</fo:table-cell>
																										</fo:table-row>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($altova:tablerows)">
																									<xsl:copy-of select="$altova:tablerows"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:table-row>
																										<fo:table-cell>
																											<fo:block/>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:otherwise>
																							</xsl:choose>
																						</fo:table-body>
																					</fo:table>
																				</xsl:if>
																			</xsl:if>
																			<xsl:if test="count( n1:ValueListsCollection ) != 0">
																				<fo:inline-container>
																					<fo:block>
																						<xsl:text>&#x200B;</xsl:text>
																					</fo:block>
																				</fo:inline-container>
																				<xsl:if test="n1:ValueListsCollection">
																					<fo:table width="18.5cm" table-layout="fixed" border-spacing="0">
																						<fo:table-column column-width="3cm"/>
																						<fo:table-column column-width="15.500cm"/>
																						<xsl:variable name="altova:CurrContextGrid_209" select="."/>
																						<fo:table-header background-color="#d9f5ff" start-indent="0pt">
																							<xsl:variable name="altova:tablerows">
																								<fo:table-row>
																									<fo:table-cell number-columns-spanned="2" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																										<fo:block-container overflow="hidden">
																											<fo:block text-align="center">
																												<fo:inline>
																													<xsl:text>Value List</xsl:text>
																												</fo:inline>
																											</fo:block>
																										</fo:block-container>
																									</fo:table-cell>
																								</fo:table-row>
																								<fo:table-row>
																									<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																										<fo:block-container overflow="hidden">
																											<fo:block text-align="center">
																												<fo:inline>
																													<xsl:text>Value</xsl:text>
																												</fo:inline>
																											</fo:block>
																										</fo:block-container>
																									</fo:table-cell>
																									<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																										<fo:block-container overflow="hidden">
																											<fo:block text-align="center">
																												<fo:inline>
																													<xsl:text>Description</xsl:text>
																												</fo:inline>
																											</fo:block>
																										</fo:block-container>
																									</fo:table-cell>
																								</fo:table-row>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($altova:tablerows)">
																									<xsl:copy-of select="$altova:tablerows"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:table-row>
																										<fo:table-cell>
																											<fo:block/>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:otherwise>
																							</xsl:choose>
																						</fo:table-header>
																						<fo:table-body start-indent="0pt">
																							<xsl:variable name="altova:tablerows">
																								<xsl:for-each select="n1:ValueListsCollection">
																									<xsl:for-each select="n1:ValueListDetails">
																										<fo:table-row>
																											<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																												<fo:block-container overflow="hidden">
																													<fo:block text-align="left">
																														<xsl:choose>
																															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																<xsl:for-each select="n1:VLValue">
																																	<xsl:variable name="value-of-template_210">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_210),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_210"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_210"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																<xsl:choose>
																																	<xsl:when test="string-length(n1:VLValue) &gt; 0">
																																		<xsl:for-each select="n1:VLValue">
																																			<xsl:variable name="value-of-template_211">
																																				<xsl:apply-templates/>
																																			</xsl:variable>
																																			<xsl:choose>
																																				<xsl:when test="contains(string($value-of-template_211),'&#x200B;')">
																																					<fo:block>
																																						<xsl:copy-of select="$value-of-template_211"/>
																																					</fo:block>
																																				</xsl:when>
																																				<xsl:otherwise>
																																					<fo:inline>
																																						<xsl:copy-of select="$value-of-template_211"/>
																																					</fo:inline>
																																				</xsl:otherwise>
																																			</xsl:choose>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:text>&#160;</xsl:text>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																<xsl:for-each select="n1:VLValue">
																																	<xsl:variable name="value-of-template_212">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_212),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_212"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_212"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																<xsl:for-each select="n1:VLValue">
																																	<xsl:variable name="value-of-template_213">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_213),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_213"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_213"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																<xsl:for-each select="n1:VLValue">
																																	<xsl:variable name="value-of-template_214">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_214),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_214"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_214"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																														</xsl:choose>
																													</fo:block>
																												</fo:block-container>
																											</fo:table-cell>
																											<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																												<fo:block-container overflow="hidden">
																													<fo:block text-align="left">
																														<xsl:choose>
																															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																<xsl:for-each select="n1:VLShortDescription">
																																	<xsl:variable name="value-of-template_215">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_215),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_215"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_215"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																<xsl:choose>
																																	<xsl:when test="string-length(n1:VLShortDescription) &gt; 0">
																																		<xsl:for-each select="n1:VLShortDescription">
																																			<xsl:variable name="value-of-template_216">
																																				<xsl:apply-templates/>
																																			</xsl:variable>
																																			<xsl:choose>
																																				<xsl:when test="contains(string($value-of-template_216),'&#x200B;')">
																																					<fo:block>
																																						<xsl:copy-of select="$value-of-template_216"/>
																																					</fo:block>
																																				</xsl:when>
																																				<xsl:otherwise>
																																					<fo:inline>
																																						<xsl:copy-of select="$value-of-template_216"/>
																																					</fo:inline>
																																				</xsl:otherwise>
																																			</xsl:choose>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:text>&#160;</xsl:text>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																<xsl:for-each select="n1:VLShortDescription">
																																	<xsl:variable name="value-of-template_217">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_217),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_217"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_217"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																<xsl:for-each select="n1:VLShortDescription">
																																	<xsl:variable name="value-of-template_218">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_218),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_218"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_218"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																<xsl:for-each select="n1:VLShortDescription">
																																	<xsl:variable name="value-of-template_219">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_219),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_219"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_219"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																														</xsl:choose>
																													</fo:block>
																												</fo:block-container>
																											</fo:table-cell>
																										</fo:table-row>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($altova:tablerows)">
																									<xsl:copy-of select="$altova:tablerows"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:table-row>
																										<fo:table-cell>
																											<fo:block/>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:otherwise>
																							</xsl:choose>
																						</fo:table-body>
																					</fo:table>
																				</xsl:if>
																			</xsl:if>
																			<xsl:if test="count( n1:CheckConstraintsCollection ) != 0">
																				<fo:inline-container>
																					<fo:block>
																						<xsl:text>&#x200B;</xsl:text>
																					</fo:block>
																				</fo:inline-container>
																				<xsl:if test="n1:CheckConstraintsCollection">
																					<fo:table width="18.5cm" table-layout="fixed" border-spacing="0">
																						<fo:table-column column-width="15.500cm"/>
																						<fo:table-column column-width="3cm"/>
																						<xsl:variable name="altova:CurrContextGrid_220" select="."/>
																						<fo:table-header background-color="#d9f5ff" start-indent="0pt">
																							<xsl:variable name="altova:tablerows">
																								<fo:table-row>
																									<fo:table-cell number-columns-spanned="2" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																										<fo:block-container overflow="hidden">
																											<fo:block text-align="center">
																												<fo:inline>
																													<xsl:text>Check Constraint</xsl:text>
																												</fo:inline>
																											</fo:block>
																										</fo:block-container>
																									</fo:table-cell>
																								</fo:table-row>
																								<fo:table-row>
																									<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																										<fo:block-container overflow="hidden">
																											<fo:block text-align="center">
																												<fo:inline>
																													<xsl:text>Text</xsl:text>
																												</fo:inline>
																											</fo:block>
																										</fo:block-container>
																									</fo:table-cell>
																									<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																										<fo:block-container overflow="hidden">
																											<fo:block text-align="center">
																												<fo:inline>
																													<xsl:text>DB Type</xsl:text>
																												</fo:inline>
																											</fo:block>
																										</fo:block-container>
																									</fo:table-cell>
																								</fo:table-row>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($altova:tablerows)">
																									<xsl:copy-of select="$altova:tablerows"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:table-row>
																										<fo:table-cell>
																											<fo:block/>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:otherwise>
																							</xsl:choose>
																						</fo:table-header>
																						<fo:table-body start-indent="0pt">
																							<xsl:variable name="altova:tablerows">
																								<xsl:for-each select="n1:CheckConstraintsCollection">
																									<xsl:for-each select="n1:CheckConstraintDetails">
																										<fo:table-row>
																											<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																												<fo:block-container overflow="hidden">
																													<fo:block text-align="left">
																														<xsl:choose>
																															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																<xsl:for-each select="n1:CheckConstraintText">
																																	<xsl:for-each select="n1:CheckConstraintTextDetails">
																																		<xsl:for-each select="n1:CheckConstraintTextRow">
																																			<xsl:variable name="value-of-template_221">
																																				<xsl:apply-templates/>
																																			</xsl:variable>
																																			<xsl:choose>
																																				<xsl:when test="contains(string($value-of-template_221),'&#x200B;')">
																																					<fo:block>
																																						<xsl:copy-of select="$value-of-template_221"/>
																																					</fo:block>
																																				</xsl:when>
																																				<xsl:otherwise>
																																					<fo:inline>
																																						<xsl:copy-of select="$value-of-template_221"/>
																																					</fo:inline>
																																				</xsl:otherwise>
																																			</xsl:choose>
																																			<fo:block/>
																																		</xsl:for-each>
																																	</xsl:for-each>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																<xsl:choose>
																																	<xsl:when test="count(n1:CheckConstraintText/n1:CheckConstraintTextDetails/n1:CheckConstraintTextRow) &gt; 0">
																																		<xsl:for-each select="n1:CheckConstraintText">
																																			<xsl:for-each select="n1:CheckConstraintTextDetails">
																																				<xsl:for-each select="n1:CheckConstraintTextRow">
																																					<xsl:variable name="value-of-template_222">
																																						<xsl:apply-templates/>
																																					</xsl:variable>
																																					<xsl:choose>
																																						<xsl:when test="contains(string($value-of-template_222),'&#x200B;')">
																																							<fo:block>
																																								<xsl:copy-of select="$value-of-template_222"/>
																																							</fo:block>
																																						</xsl:when>
																																						<xsl:otherwise>
																																							<fo:inline>
																																								<xsl:copy-of select="$value-of-template_222"/>
																																							</fo:inline>
																																						</xsl:otherwise>
																																					</xsl:choose>
																																					<fo:block/>
																																				</xsl:for-each>
																																			</xsl:for-each>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:text>&#160;</xsl:text>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																<xsl:choose>
																																	<xsl:when test="count(n1:CheckConstraintText/n1:CheckConstraintTextDetails/n1:CheckConstraintTextRow) &gt; 0">
																																		<xsl:for-each select="n1:CheckConstraintText">
																																			<xsl:for-each select="n1:CheckConstraintTextDetails">
																																				<xsl:for-each select="n1:CheckConstraintTextRow">
																																					<xsl:variable name="value-of-template_223">
																																						<xsl:apply-templates/>
																																					</xsl:variable>
																																					<xsl:choose>
																																						<xsl:when test="contains(string($value-of-template_223),'&#x200B;')">
																																							<fo:block>
																																								<xsl:copy-of select="$value-of-template_223"/>
																																							</fo:block>
																																						</xsl:when>
																																						<xsl:otherwise>
																																							<fo:inline>
																																								<xsl:copy-of select="$value-of-template_223"/>
																																							</fo:inline>
																																						</xsl:otherwise>
																																					</xsl:choose>
																																					<fo:block/>
																																				</xsl:for-each>
																																			</xsl:for-each>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:otherwise/>
																																</xsl:choose>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																<xsl:for-each select="n1:CheckConstraintText">
																																	<xsl:for-each select="n1:CheckConstraintTextDetails">
																																		<xsl:for-each select="n1:CheckConstraintTextRow">
																																			<xsl:variable name="value-of-template_224">
																																				<xsl:apply-templates/>
																																			</xsl:variable>
																																			<xsl:choose>
																																				<xsl:when test="contains(string($value-of-template_224),'&#x200B;')">
																																					<fo:block>
																																						<xsl:copy-of select="$value-of-template_224"/>
																																					</fo:block>
																																				</xsl:when>
																																				<xsl:otherwise>
																																					<fo:inline>
																																						<xsl:copy-of select="$value-of-template_224"/>
																																					</fo:inline>
																																				</xsl:otherwise>
																																			</xsl:choose>
																																			<fo:block/>
																																		</xsl:for-each>
																																	</xsl:for-each>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																<xsl:for-each select="n1:CheckConstraintText">
																																	<xsl:for-each select="n1:CheckConstraintTextDetails">
																																		<xsl:for-each select="n1:CheckConstraintTextRow">
																																			<xsl:variable name="value-of-template_225">
																																				<xsl:apply-templates/>
																																			</xsl:variable>
																																			<xsl:choose>
																																				<xsl:when test="contains(string($value-of-template_225),'&#x200B;')">
																																					<fo:block>
																																						<xsl:copy-of select="$value-of-template_225"/>
																																					</fo:block>
																																				</xsl:when>
																																				<xsl:otherwise>
																																					<fo:inline>
																																						<xsl:copy-of select="$value-of-template_225"/>
																																					</fo:inline>
																																				</xsl:otherwise>
																																			</xsl:choose>
																																			<fo:block/>
																																		</xsl:for-each>
																																	</xsl:for-each>
																																</xsl:for-each>
																															</xsl:when>
																														</xsl:choose>
																													</fo:block>
																												</fo:block-container>
																											</fo:table-cell>
																											<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																												<fo:block-container overflow="hidden">
																													<fo:block text-align="left">
																														<xsl:choose>
																															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																<xsl:for-each select="n1:DatabaseType">
																																	<xsl:variable name="value-of-template_226">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_226),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_226"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_226"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																<xsl:choose>
																																	<xsl:when test="string-length(n1:DatabaseType) &gt; 0">
																																		<xsl:for-each select="n1:DatabaseType">
																																			<xsl:variable name="value-of-template_227">
																																				<xsl:apply-templates/>
																																			</xsl:variable>
																																			<xsl:choose>
																																				<xsl:when test="contains(string($value-of-template_227),'&#x200B;')">
																																					<fo:block>
																																						<xsl:copy-of select="$value-of-template_227"/>
																																					</fo:block>
																																				</xsl:when>
																																				<xsl:otherwise>
																																					<fo:inline>
																																						<xsl:copy-of select="$value-of-template_227"/>
																																					</fo:inline>
																																				</xsl:otherwise>
																																			</xsl:choose>
																																		</xsl:for-each>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:text>&#160;</xsl:text>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																<xsl:for-each select="n1:DatabaseType">
																																	<xsl:variable name="value-of-template_228">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_228),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_228"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_228"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																<xsl:for-each select="n1:DatabaseType">
																																	<xsl:variable name="value-of-template_229">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_229),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_229"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_229"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																<xsl:for-each select="n1:DatabaseType">
																																	<xsl:variable name="value-of-template_230">
																																		<xsl:apply-templates/>
																																	</xsl:variable>
																																	<xsl:choose>
																																		<xsl:when test="contains(string($value-of-template_230),'&#x200B;')">
																																			<fo:block>
																																				<xsl:copy-of select="$value-of-template_230"/>
																																			</fo:block>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<fo:inline>
																																				<xsl:copy-of select="$value-of-template_230"/>
																																			</fo:inline>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</xsl:for-each>
																															</xsl:when>
																														</xsl:choose>
																													</fo:block>
																												</fo:block-container>
																											</fo:table-cell>
																										</fo:table-row>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($altova:tablerows)">
																									<xsl:copy-of select="$altova:tablerows"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:table-row>
																										<fo:table-cell>
																											<fo:block/>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:otherwise>
																							</xsl:choose>
																						</fo:table-body>
																					</fo:table>
																				</xsl:if>
																			</xsl:if>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
								<xsl:if test="count( n1:IdentifiersCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Identifiers</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:IdentifiersCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="7cm"/>
											<fo:table-column column-width="2cm"/>
											<fo:table-column column-width="6cm"/>
											<fo:table-column column-width="2cm"/>
											<fo:table-column column-width="4cm"/>
											<fo:table-column column-width="4cm"/>
											<xsl:variable name="altova:CurrContextGrid_231" select="."/>
											<fo:table-header background-color="#d9f5ff" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Name</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Primary</xsl:text>
																	</fo:inline>
																	<fo:block/>
																	<fo:inline>
																		<xsl:text>Identifyer</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Element Name</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Element</xsl:text>
																	</fo:inline>
																	<fo:block/>
																	<fo:inline>
																		<xsl:text>Type</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Source Label</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Target Label</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:IdentifiersCollection">
														<xsl:for-each select="n1:IdentifierDetails">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:IdentifierName">
																						<xsl:variable name="value-of-template_232">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_232),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_232"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_232"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:IdentifierName) &gt; 0">
																							<xsl:for-each select="n1:IdentifierName">
																								<xsl:variable name="value-of-template_233">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_233),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_233"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_233"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:IdentifierName">
																						<xsl:variable name="value-of-template_234">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_234),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_234"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_234"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:IdentifierName">
																						<xsl:variable name="value-of-template_235">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_235),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_235"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_235"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:IdentifierName">
																						<xsl:variable name="value-of-template_236">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_236),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_236"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_236"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:PrimaryIdentifier">
																						<xsl:variable name="value-of-template_237">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_237),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_237"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_237"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:PrimaryIdentifier) &gt; 0">
																							<xsl:for-each select="n1:PrimaryIdentifier">
																								<xsl:variable name="value-of-template_238">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_238),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_238"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_238"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:PrimaryIdentifier">
																						<xsl:variable name="value-of-template_239">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_239),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_239"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_239"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:PrimaryIdentifier">
																						<xsl:variable name="value-of-template_240">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_240),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_240"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_240"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:PrimaryIdentifier">
																						<xsl:variable name="value-of-template_241">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_241),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_241"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_241"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:ElementName">
																						<xsl:variable name="value-of-template_242">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_242),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_242"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_242"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:ElementName) &gt; 0">
																							<xsl:for-each select="n1:ElementName">
																								<xsl:variable name="value-of-template_243">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_243),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_243"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_243"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:ElementName">
																						<xsl:variable name="value-of-template_244">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_244),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_244"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_244"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:ElementName">
																						<xsl:variable name="value-of-template_245">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_245),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_245"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_245"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:ElementName">
																						<xsl:variable name="value-of-template_246">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_246),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_246"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_246"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:ElementType">
																						<xsl:variable name="value-of-template_247">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_247),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_247"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_247"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:ElementType) &gt; 0">
																							<xsl:for-each select="n1:ElementType">
																								<xsl:variable name="value-of-template_248">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_248),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_248"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_248"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:ElementType">
																						<xsl:variable name="value-of-template_249">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_249),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_249"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_249"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:ElementType">
																						<xsl:variable name="value-of-template_250">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_250),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_250"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_250"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:ElementType">
																						<xsl:variable name="value-of-template_251">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_251),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_251"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_251"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:SourceLabel">
																						<xsl:variable name="value-of-template_252">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_252),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_252"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_252"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:SourceLabel) &gt; 0">
																							<xsl:for-each select="n1:SourceLabel">
																								<xsl:variable name="value-of-template_253">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_253),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_253"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_253"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:SourceLabel">
																						<xsl:variable name="value-of-template_254">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_254),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_254"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_254"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:SourceLabel">
																						<xsl:variable name="value-of-template_255">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_255),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_255"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_255"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:SourceLabel">
																						<xsl:variable name="value-of-template_256">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_256),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_256"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_256"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:TargetLabel">
																						<xsl:variable name="value-of-template_257">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_257),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_257"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_257"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:TargetLabel) &gt; 0">
																							<xsl:for-each select="n1:TargetLabel">
																								<xsl:variable name="value-of-template_258">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_258),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_258"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_258"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:TargetLabel">
																						<xsl:variable name="value-of-template_259">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_259),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_259"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_259"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:TargetLabel">
																						<xsl:variable name="value-of-template_260">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_260),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_260"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_260"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:TargetLabel">
																						<xsl:variable name="value-of-template_261">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_261),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_261"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_261"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
								<xsl:if test="count( n1:RelationshipsCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Has Relationships With</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:RelationshipsCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="5cm"/>
											<fo:table-column column-width="4cm"/>
											<fo:table-column column-width="4cm"/>
											<fo:table-column column-width="2cm"/>
											<fo:table-column column-width="2.500cm"/>
											<fo:table-column column-width="2.500cm"/>
											<fo:table-column column-width="2.500cm"/>
											<fo:table-column column-width="2.500cm"/>
											<xsl:variable name="altova:CurrContextGrid_262" select="."/>
											<fo:table-header background-color="#d9f5ff" text-align="center" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Entity Name</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Role</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Other Role</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>In Arc</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Cardinality</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Dominant</xsl:text>
																	</fo:inline>
																	<fo:block/>
																	<fo:inline>
																		<xsl:text>Role</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Identifying</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Transferable</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:RelationshipsCollection">
														<xsl:for-each select="n1:RelationshipDetails">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:SourceName">
																						<xsl:variable name="value-of-template_263">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_263),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_263"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_263"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:SourceName) &gt; 0">
																							<xsl:for-each select="n1:SourceName">
																								<xsl:variable name="value-of-template_264">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_264),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_264"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_264"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:SourceName">
																						<xsl:variable name="value-of-template_265">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_265),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_265"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_265"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:SourceName">
																						<xsl:variable name="value-of-template_266">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_266),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_266"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_266"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:SourceName">
																						<xsl:variable name="value-of-template_267">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_267),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_267"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_267"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:SourceRole">
																						<xsl:variable name="value-of-template_268">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_268),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_268"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_268"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:SourceRole) &gt; 0">
																							<xsl:for-each select="n1:SourceRole">
																								<xsl:variable name="value-of-template_269">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_269),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_269"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_269"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:SourceRole">
																						<xsl:variable name="value-of-template_270">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_270),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_270"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_270"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:SourceRole">
																						<xsl:variable name="value-of-template_271">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_271),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_271"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_271"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:SourceRole">
																						<xsl:variable name="value-of-template_272">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_272),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_272"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_272"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:TargetRole">
																						<xsl:variable name="value-of-template_273">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_273),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_273"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_273"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:TargetRole) &gt; 0">
																							<xsl:for-each select="n1:TargetRole">
																								<xsl:variable name="value-of-template_274">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_274),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_274"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_274"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:TargetRole">
																						<xsl:variable name="value-of-template_275">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_275),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_275"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_275"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:TargetRole">
																						<xsl:variable name="value-of-template_276">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_276),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_276"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_276"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:TargetRole">
																						<xsl:variable name="value-of-template_277">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_277),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_277"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_277"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:InArc">
																						<xsl:variable name="value-of-template_278">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_278),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_278"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_278"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:InArc) &gt; 0">
																							<xsl:for-each select="n1:InArc">
																								<xsl:variable name="value-of-template_279">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_279),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_279"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_279"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:InArc">
																						<xsl:variable name="value-of-template_280">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_280),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_280"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_280"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:InArc">
																						<xsl:variable name="value-of-template_281">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_281),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_281"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_281"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:InArc">
																						<xsl:variable name="value-of-template_282">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_282),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_282"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_282"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:Cardinality">
																						<xsl:variable name="value-of-template_283">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_283),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_283"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_283"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:Cardinality) &gt; 0">
																							<xsl:for-each select="n1:Cardinality">
																								<xsl:variable name="value-of-template_284">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_284),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_284"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_284"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:Cardinality">
																						<xsl:variable name="value-of-template_285">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_285),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_285"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_285"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:Cardinality">
																						<xsl:variable name="value-of-template_286">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_286),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_286"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_286"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:Cardinality">
																						<xsl:variable name="value-of-template_287">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_287),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_287"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_287"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:DominantRole">
																						<xsl:variable name="value-of-template_288">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_288),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_288"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_288"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:DominantRole) &gt; 0">
																							<xsl:for-each select="n1:DominantRole">
																								<xsl:variable name="value-of-template_289">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_289),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_289"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_289"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:DominantRole">
																						<xsl:variable name="value-of-template_290">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_290),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_290"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_290"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:DominantRole">
																						<xsl:variable name="value-of-template_291">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_291),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_291"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_291"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:DominantRole">
																						<xsl:variable name="value-of-template_292">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_292),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_292"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_292"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:Identifying">
																						<xsl:variable name="value-of-template_293">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_293),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_293"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_293"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:Identifying) &gt; 0">
																							<xsl:for-each select="n1:Identifying">
																								<xsl:variable name="value-of-template_294">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_294),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_294"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_294"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:Identifying">
																						<xsl:variable name="value-of-template_295">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_295),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_295"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_295"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:Identifying">
																						<xsl:variable name="value-of-template_296">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_296),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_296"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_296"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:Identifying">
																						<xsl:variable name="value-of-template_297">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_297),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_297"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_297"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:Transferable">
																						<xsl:variable name="value-of-template_298">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_298),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_298"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_298"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:Transferable) &gt; 0">
																							<xsl:for-each select="n1:Transferable">
																								<xsl:variable name="value-of-template_299">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_299),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_299"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_299"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:Transferable">
																						<xsl:variable name="value-of-template_300">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_300),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_300"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_300"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:Transferable">
																						<xsl:variable name="value-of-template_301">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_301),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_301"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_301"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:Transferable">
																						<xsl:variable name="value-of-template_302">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_302),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_302"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_302"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
								<xsl:if test="count( n1:IncomingProcessesCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Incoming Processes</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:IncomingProcessesCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="7.500cm"/>
											<fo:table-column column-width="7.500cm"/>
											<fo:table-column column-width="2.500cm"/>
											<fo:table-column column-width="7.500cm"/>
											<xsl:variable name="altova:CurrContextGrid_303" select="."/>
											<fo:table-header background-color="#d9f5ff" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Process Name</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Flow Name</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>CRUD Code</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>DFD Name</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:IncomingProcessesCollection">
														<xsl:for-each select="n1:IncomingProcessDetails">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:IncomingProcessName">
																						<xsl:variable name="value-of-template_304">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_304),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_304"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_304"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:IncomingProcessName) &gt; 0">
																							<xsl:for-each select="n1:IncomingProcessName">
																								<xsl:variable name="value-of-template_305">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_305),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_305"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_305"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:IncomingProcessName">
																						<xsl:variable name="value-of-template_306">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_306),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_306"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_306"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:IncomingProcessName">
																						<xsl:variable name="value-of-template_307">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_307),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_307"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_307"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:IncomingProcessName">
																						<xsl:variable name="value-of-template_308">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_308),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_308"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_308"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:IncomingFlowName">
																						<xsl:variable name="value-of-template_309">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_309),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_309"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_309"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:IncomingFlowName) &gt; 0">
																							<xsl:for-each select="n1:IncomingFlowName">
																								<xsl:variable name="value-of-template_310">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_310),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_310"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_310"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:IncomingFlowName">
																						<xsl:variable name="value-of-template_311">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_311),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_311"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_311"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:IncomingFlowName">
																						<xsl:variable name="value-of-template_312">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_312),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_312"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_312"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:IncomingFlowName">
																						<xsl:variable name="value-of-template_313">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_313),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_313"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_313"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:IncomingCRUDCode">
																						<xsl:variable name="value-of-template_314">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_314),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_314"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_314"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:IncomingCRUDCode) &gt; 0">
																							<xsl:for-each select="n1:IncomingCRUDCode">
																								<xsl:variable name="value-of-template_315">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_315),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_315"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_315"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:IncomingCRUDCode">
																						<xsl:variable name="value-of-template_316">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_316),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_316"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_316"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:IncomingCRUDCode">
																						<xsl:variable name="value-of-template_317">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_317),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_317"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_317"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:IncomingCRUDCode">
																						<xsl:variable name="value-of-template_318">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_318),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_318"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_318"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:IncomingDFDName">
																						<xsl:variable name="value-of-template_319">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_319),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_319"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_319"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:IncomingDFDName) &gt; 0">
																							<xsl:for-each select="n1:IncomingDFDName">
																								<xsl:variable name="value-of-template_320">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_320),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_320"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_320"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:IncomingDFDName">
																						<xsl:variable name="value-of-template_321">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_321),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_321"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_321"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:IncomingDFDName">
																						<xsl:variable name="value-of-template_322">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_322),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_322"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_322"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:IncomingDFDName">
																						<xsl:variable name="value-of-template_323">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_323),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_323"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_323"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
								<xsl:if test="count( n1:OutgoingProcessesCollection ) !=0">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Outgoing Processes</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:OutgoingProcessesCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="7.500cm"/>
											<fo:table-column column-width="7.500cm"/>
											<fo:table-column column-width="2.500cm"/>
											<fo:table-column column-width="7.500cm"/>
											<xsl:variable name="altova:CurrContextGrid_324" select="."/>
											<fo:table-header background-color="#d9f5ff" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Process Name</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>Flow Name</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>CRUD Code</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="center">
																	<fo:inline>
																		<xsl:text>DFD Name</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:OutgoingProcessesCollection">
														<xsl:for-each select="n1:OugoingProcessDetails">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:OutgoingProcessName">
																						<xsl:variable name="value-of-template_325">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_325),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_325"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_325"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:OutgoingProcessName) &gt; 0">
																							<xsl:for-each select="n1:OutgoingProcessName">
																								<xsl:variable name="value-of-template_326">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_326),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_326"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_326"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:OutgoingProcessName">
																						<xsl:variable name="value-of-template_327">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_327),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_327"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_327"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:OutgoingProcessName">
																						<xsl:variable name="value-of-template_328">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_328),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_328"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_328"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:OutgoingProcessName">
																						<xsl:variable name="value-of-template_329">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_329),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_329"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_329"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:OutgoingFlowName">
																						<xsl:variable name="value-of-template_330">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_330),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_330"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_330"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:OutgoingFlowName) &gt; 0">
																							<xsl:for-each select="n1:OutgoingFlowName">
																								<xsl:variable name="value-of-template_331">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_331),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_331"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_331"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:OutgoingFlowName">
																						<xsl:variable name="value-of-template_332">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_332),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_332"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_332"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:OutgoingFlowName">
																						<xsl:variable name="value-of-template_333">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_333),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_333"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_333"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:OutgoingFlowName">
																						<xsl:variable name="value-of-template_334">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_334),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_334"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_334"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:OutgoingCRUDCode">
																						<xsl:variable name="value-of-template_335">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_335),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_335"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_335"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:OutgoingCRUDCode) &gt; 0">
																							<xsl:for-each select="n1:OutgoingCRUDCode">
																								<xsl:variable name="value-of-template_336">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_336),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_336"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_336"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:OutgoingCRUDCode">
																						<xsl:variable name="value-of-template_337">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_337),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_337"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_337"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:OutgoingCRUDCode">
																						<xsl:variable name="value-of-template_338">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_338),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_338"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_338"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:OutgoingCRUDCode">
																						<xsl:variable name="value-of-template_339">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_339),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_339"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_339"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:OutgoingDFDName">
																						<xsl:variable name="value-of-template_340">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_340),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_340"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_340"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:OutgoingDFDName) &gt; 0">
																							<xsl:for-each select="n1:OutgoingDFDName">
																								<xsl:variable name="value-of-template_341">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_341),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_341"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_341"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:OutgoingDFDName">
																						<xsl:variable name="value-of-template_342">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_342),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_342"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_342"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:OutgoingDFDName">
																						<xsl:variable name="value-of-template_343">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_343),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_343"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_343"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:OutgoingDFDName">
																						<xsl:variable name="value-of-template_344">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_344),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_344"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_344"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
							</xsl:for-each>
						</xsl:for-each>
					</fo:block>
					<fo:block id="SV_RefID_PageTotal"/>
				</fo:flow>
			</fo:page-sequence>
		</fo:root>
	</xsl:template>
	<xsl:template name="altova:double-backslash">
		<xsl:param name="text"/>
		<xsl:param name="text-length"/>
		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
		<xsl:choose>
			<xsl:when test="$text-after-bs-length = 0">
				<xsl:choose>
					<xsl:when test="substring($text, $text-length) = '\'">
						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$text"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
				<xsl:call-template name="altova:double-backslash">
					<xsl:with-param name="text" select="$text-after-bs"/>
					<xsl:with-param name="text-length" select="$text-after-bs-length"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:MakeValueAbsoluteIfPixels">
		<xsl:param name="sValue"/>
		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>
		<xsl:choose>
			<xsl:when test="$sBeforePx">
				<xsl:variable name="nLengthOfInteger">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="$sBeforePx"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>
				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>
				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:nPxPerIn)"/>
				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>
				<xsl:variable name="sRest">
					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$sValue"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">
		<xsl:param name="sText"/>
		<xsl:variable name="sLen" select="string-length($sText)"/>
		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>
		<xsl:choose>
			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">
				<xsl:variable name="nResultOfRest">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="$nResultOfRest + 1"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>0</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>
