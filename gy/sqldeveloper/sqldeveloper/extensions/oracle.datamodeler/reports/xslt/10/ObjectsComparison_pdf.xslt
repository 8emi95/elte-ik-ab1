<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2013 sp1 (x64) - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="osdm_oc" xmlns:n2="osdm_ad" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="altova altovaext clitype fn iso4217 ix java link n1 n2 sps xbrldi xbrli xlink xs xsd xsi">
	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>
	<xsl:param name="SV_OutputFormat" select="'PDF'"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="fo:layout-master-set">
		<fo:layout-master-set>
			<fo:simple-page-master master-name="page-master-0-even" margin-left="2cm" margin-right="2cm" page-height="29.70cm" page-width="21cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-odd" margin-left="2cm" margin-right="2cm" page-height="29.70cm" page-width="21cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-even-first" margin-left="2cm" margin-right="2cm" page-height="29.70cm" page-width="21cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-odd-first" margin-left="2cm" margin-right="2cm" page-height="29.70cm" page-width="21cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-even-last" margin-left="2cm" margin-right="2cm" page-height="29.70cm" page-width="21cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-odd-last" margin-left="2cm" margin-right="2cm" page-height="29.70cm" page-width="21cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:page-sequence-master master-name="page-master-0">
				<fo:repeatable-page-master-alternatives>
					<fo:conditional-page-master-reference master-reference="page-master-0-even-first" odd-or-even="even" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-odd-first" odd-or-even="odd" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-even-last" odd-or-even="even" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-odd-last" odd-or-even="odd" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-even" odd-or-even="even"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-odd" odd-or-even="odd"/>
				</fo:repeatable-page-master-alternatives>
			</fo:page-sequence-master>
		</fo:layout-master-set>
	</xsl:variable>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:template match="/">
		<fo:root>
			<xsl:copy-of select="$fo:layout-master-set"/>
			<fo:declarations>
				<x:xmpmeta xmlns:x="adobe:ns:meta/">
					<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
						<rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
							<xmp:CreatorTool>Altova StyleVision Enterprise Edition 2013 sp1 (x64) (http://www.altova.com)</xmp:CreatorTool>
						</rdf:Description>
					</rdf:RDF>
				</x:xmpmeta>
			</fo:declarations>
			<fo:page-sequence force-page-count="no-force" master-reference="page-master-0" initial-page-number="auto" format="1">
				<fo:flow flow-name="xsl-region-body">
					<fo:block font-family="Tahoma" font-size="xx-small" empty-cells="show" text-align="left" display-align="before">
						<xsl:for-each select="$XML">
							<xsl:for-each select="n1:root">
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<fo:block margin-right="100% - 100%" text-align="center" space-before="0" space-after="0" margin="0pt">
									<xsl:for-each select="n1:ReportCaption">
										<xsl:variable name="value-of-template_1">
											<xsl:apply-templates/>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="contains(string($value-of-template_1),'&#x200B;')">
												<fo:block font-size="medium" font-weight="bold">
													<xsl:copy-of select="$value-of-template_1"/>
												</fo:block>
											</xsl:when>
											<xsl:otherwise>
												<fo:inline font-size="medium" font-weight="bold">
													<xsl:copy-of select="$value-of-template_1"/>
												</fo:inline>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</fo:block>
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<xsl:if test="string-length(n1:DesignName) &gt; 0">
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<fo:table width="17cm" table-layout="fixed" border-spacing="0">
										<fo:table-column column-width="4cm"/>
										<fo:table-column column-width="13cm"/>
										<xsl:variable name="altova:CurrContextGrid_2" select="."/>
										<fo:table-body start-indent="0pt">
											<xsl:variable name="altova:tablerows">
												<fo:table-row>
													<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
														<fo:block-container overflow="hidden">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Design Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:block-container>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
														<fo:block-container overflow="hidden">
															<fo:block text-align="left">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:DesignName">
																			<xsl:variable name="value-of-template_3">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_3),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_3"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_3"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:DesignName) &gt; 0">
																				<xsl:for-each select="n1:DesignName">
																					<xsl:variable name="value-of-template_4">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_4),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_4"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_4"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:DesignName">
																			<xsl:variable name="value-of-template_5">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_5),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_5"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_5"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:DesignName">
																			<xsl:variable name="value-of-template_6">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_6),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_6"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_6"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:DesignName">
																			<xsl:variable name="value-of-template_7">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_7),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_7"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_7"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:block-container>
													</fo:table-cell>
												</fo:table-row>
												<fo:table-row>
													<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
														<fo:block-container overflow="hidden">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Source Model</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:block-container>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
														<fo:block-container overflow="hidden">
															<fo:block text-align="left">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:SourceModelName">
																			<xsl:variable name="value-of-template_8">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_8),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_8"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_8"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:SourceModelName) &gt; 0">
																				<xsl:for-each select="n1:SourceModelName">
																					<xsl:variable name="value-of-template_9">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_9),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_9"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_9"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:SourceModelName">
																			<xsl:variable name="value-of-template_10">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_10),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_10"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_10"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:SourceModelName">
																			<xsl:variable name="value-of-template_11">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_11),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_11"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_11"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:SourceModelName">
																			<xsl:variable name="value-of-template_12">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_12),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_12"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_12"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:block-container>
													</fo:table-cell>
												</fo:table-row>
												<fo:table-row>
													<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
														<fo:block-container overflow="hidden">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Target Model</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:block-container>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
														<fo:block-container overflow="hidden">
															<fo:block text-align="left">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:TargetModelName">
																			<xsl:variable name="value-of-template_13">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_13),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_13"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_13"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:TargetModelName) &gt; 0">
																				<xsl:for-each select="n1:TargetModelName">
																					<xsl:variable name="value-of-template_14">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_14),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_14"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_14"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:choose>
																			<xsl:when test="count(n1:VersionComment/n1:VersionCommentDetails/n1:VersionCommentRow) &gt; 0">
																				<xsl:for-each select="n1:TargetModelName">
																					<xsl:variable name="value-of-template_15">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_15),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_15"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_15"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise/>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:TargetModelName">
																			<xsl:variable name="value-of-template_16">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_16),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_16"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_16"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:TargetModelName">
																			<xsl:variable name="value-of-template_17">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_17),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_17"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_17"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:block-container>
													</fo:table-cell>
												</fo:table-row>
											</xsl:variable>
											<xsl:choose>
												<xsl:when test="string($altova:tablerows)">
													<xsl:copy-of select="$altova:tablerows"/>
												</xsl:when>
												<xsl:otherwise>
													<fo:table-row>
														<fo:table-cell>
															<fo:block/>
														</fo:table-cell>
													</fo:table-row>
												</xsl:otherwise>
											</xsl:choose>
										</fo:table-body>
									</fo:table>
								</xsl:if>
								<fo:block/>
								<xsl:choose>
									<xsl:when test="n1:SeparateObjByStatus = &apos;Y&apos;">
										<xsl:choose>
											<xsl:when test="n1:IsDMDImport = &apos;Y&apos;">
												<xsl:if test="count(//n1:Object[@Status=&apos;Modified&apos;]) &gt; 0">
													<fo:block>
														<fo:leader leader-pattern="space"/>
													</fo:block>
													<fo:inline font-family="Tahoma" font-size="x-small" font-style="italic">
														<xsl:text>Modified objects</xsl:text>
													</fo:inline>
													<fo:inline-container>
														<fo:block>
															<xsl:text>&#x200B;</xsl:text>
														</fo:block>
													</fo:inline-container>
													<xsl:if test="n1:ObjectsCollection">
														<fo:table table-layout="fixed" width="100%" border-spacing="0">
															<fo:table-column column-width="4cm"/>
															<fo:table-column column-width="4cm"/>
															<fo:table-column column-width="4cm"/>
															<fo:table-column column-width="3cm"/>
															<fo:table-column column-width="2cm"/>
															<xsl:variable name="altova:CurrContextGrid_18" select="."/>
															<fo:table-header background-color="#d9f5ff" white-space-collapse="true" linefeed-treatment="treat-as-space" wrap-option="no-wrap" white-space-treatment="ignore-if-surrounding-linefeed" start-indent="0pt">
																<xsl:variable name="altova:tablerows">
																	<fo:table-row>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Model Name</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Sorce Name</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Target Name</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Type</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Status</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																	</fo:table-row>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="string($altova:tablerows)">
																		<xsl:copy-of select="$altova:tablerows"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:table-row>
																			<fo:table-cell>
																				<fo:block/>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:otherwise>
																</xsl:choose>
															</fo:table-header>
															<fo:table-body start-indent="0pt">
																<xsl:variable name="altova:tablerows">
																	<xsl:for-each select="n1:ObjectsCollection">
																		<xsl:for-each select="n1:ObjectDetails">
																			<xsl:for-each select="n1:Object[@Status = &apos;Modified&apos;]">
																				<fo:table-row>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:for-each select="@DMDImpModelName">
																									<fo:inline>
																										<xsl:value-of select="string(.)"/>
																									</fo:inline>
																								</xsl:for-each>
																								<fo:block/>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell background-color="#ecfefa" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@SourceValue) &gt; 0">
																												<xsl:for-each select="@SourceValue">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@TargetValue) &gt; 0">
																												<xsl:for-each select="@TargetValue">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@Type) &gt; 0">
																												<xsl:for-each select="@Type">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@Status) &gt; 0">
																												<xsl:for-each select="@Status">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																				</fo:table-row>
																				<xsl:for-each select="n1:PropertiesCollection">
																					<xsl:choose>
																						<xsl:when test="count( n1:PropertyDetails ) &gt;0">
																							<fo:table-row>
																								<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" padding="3" display-align="center">
																									<fo:block-container overflow="hidden">
																										<fo:block text-align="left"/>
																									</fo:block-container>
																								</fo:table-cell>
																								<fo:table-cell number-columns-spanned="4" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																									<fo:block-container overflow="hidden">
																										<fo:block text-align="left">
																											<fo:inline-container>
																												<fo:block>
																													<xsl:text>&#x200B;</xsl:text>
																												</fo:block>
																											</fo:inline-container>
																											<fo:table table-layout="fixed" width="100%" border-spacing="0">
																												<fo:table-column column-width="3cm"/>
																												<fo:table-column column-width="13cm"/>
																												<xsl:variable name="altova:CurrContextGrid_40" select="."/>
																												<fo:table-body start-indent="0pt">
																													<xsl:variable name="altova:tablerows">
																														<fo:table-row>
																															<fo:table-cell padding="0" display-align="center">
																																<fo:block-container overflow="hidden">
																																	<fo:block text-align="left"/>
																																</fo:block-container>
																															</fo:table-cell>
																															<fo:table-cell padding="0" display-align="center">
																																<fo:block-container overflow="hidden">
																																	<fo:block text-align="left">
																																		<fo:inline-container>
																																			<fo:block>
																																				<xsl:text>&#x200B;</xsl:text>
																																			</fo:block>
																																		</fo:inline-container>
																																		<fo:table font-style="italic" width="12cm" table-layout="fixed" border-spacing="0">
																																			<fo:table-column column-width="4cm"/>
																																			<fo:table-column column-width="4cm"/>
																																			<fo:table-column column-width="4cm"/>
																																			<xsl:variable name="altova:CurrContextGrid_41" select="."/>
																																			<fo:table-body start-indent="0pt">
																																				<xsl:variable name="altova:tablerows">
																																					<fo:table-row height="0.01cm">
																																						<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" padding="3" display-align="center">
																																							<fo:block-container overflow="hidden">
																																								<fo:block text-align="left"/>
																																							</fo:block-container>
																																						</fo:table-cell>
																																						<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" padding="3" display-align="center">
																																							<fo:block-container overflow="hidden">
																																								<fo:block text-align="left"/>
																																							</fo:block-container>
																																						</fo:table-cell>
																																						<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" padding="3" display-align="center">
																																							<fo:block-container overflow="hidden">
																																								<fo:block text-align="left"/>
																																							</fo:block-container>
																																						</fo:table-cell>
																																					</fo:table-row>
																																					<xsl:for-each select="n1:PropertyDetails">
																																						<fo:table-row>
																																							<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" border-left-color="black" border-left-style="dotted" border-left-width="thin" border-right-color="black" border-right-style="dotted" border-right-width="thin" padding="3" display-align="center">
																																								<fo:block-container overflow="hidden">
																																									<fo:block text-align="left">
																																										<xsl:choose>
																																											<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																												<xsl:for-each select="n1:PropertyName">
																																													<xsl:variable name="value-of-template_42">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_42),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_42"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_42"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																												<xsl:choose>
																																													<xsl:when test="string-length(n1:PropertyName) &gt; 0">
																																														<xsl:for-each select="n1:PropertyName">
																																															<xsl:variable name="value-of-template_43">
																																																<xsl:apply-templates/>
																																															</xsl:variable>
																																															<xsl:choose>
																																																<xsl:when test="contains(string($value-of-template_43),'&#x200B;')">
																																																	<fo:block>
																																																		<xsl:copy-of select="$value-of-template_43"/>
																																																	</fo:block>
																																																</xsl:when>
																																																<xsl:otherwise>
																																																	<fo:inline>
																																																		<xsl:copy-of select="$value-of-template_43"/>
																																																	</fo:inline>
																																																</xsl:otherwise>
																																															</xsl:choose>
																																															<fo:block/>
																																														</xsl:for-each>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:text>&#160;</xsl:text>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																												<xsl:for-each select="n1:PropertyName">
																																													<xsl:variable name="value-of-template_44">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_44),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_44"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_44"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																												<xsl:for-each select="n1:PropertyName">
																																													<xsl:variable name="value-of-template_45">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_45),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_45"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_45"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																												<xsl:for-each select="n1:PropertyName">
																																													<xsl:variable name="value-of-template_46">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_46),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_46"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_46"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																										</xsl:choose>
																																									</fo:block>
																																								</fo:block-container>
																																							</fo:table-cell>
																																							<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" border-right-color="black" border-right-style="dotted" border-right-width="thin" padding="3" display-align="center">
																																								<fo:block-container overflow="hidden">
																																									<fo:block text-align="left">
																																										<xsl:choose>
																																											<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																												<xsl:for-each select="n1:PropertyOldValue">
																																													<xsl:variable name="value-of-template_47">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_47),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_47"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_47"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																												<xsl:choose>
																																													<xsl:when test="string-length(n1:PropertyOldValue) &gt; 0">
																																														<xsl:for-each select="n1:PropertyOldValue">
																																															<xsl:variable name="value-of-template_48">
																																																<xsl:apply-templates/>
																																															</xsl:variable>
																																															<xsl:choose>
																																																<xsl:when test="contains(string($value-of-template_48),'&#x200B;')">
																																																	<fo:block>
																																																		<xsl:copy-of select="$value-of-template_48"/>
																																																	</fo:block>
																																																</xsl:when>
																																																<xsl:otherwise>
																																																	<fo:inline>
																																																		<xsl:copy-of select="$value-of-template_48"/>
																																																	</fo:inline>
																																																</xsl:otherwise>
																																															</xsl:choose>
																																															<fo:block/>
																																														</xsl:for-each>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:text>&#160;</xsl:text>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																												<xsl:for-each select="n1:PropertyOldValue">
																																													<xsl:variable name="value-of-template_49">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_49),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_49"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_49"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																												<xsl:for-each select="n1:PropertyOldValue">
																																													<xsl:variable name="value-of-template_50">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_50),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_50"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_50"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																												<xsl:for-each select="n1:PropertyOldValue">
																																													<xsl:variable name="value-of-template_51">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_51),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_51"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_51"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																										</xsl:choose>
																																									</fo:block>
																																								</fo:block-container>
																																							</fo:table-cell>
																																							<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" border-right-color="black" border-right-style="dotted" border-right-width="thin" padding="3" display-align="center">
																																								<fo:block-container overflow="hidden">
																																									<fo:block text-align="left">
																																										<xsl:choose>
																																											<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																												<xsl:for-each select="n1:PropertyNewValue">
																																													<xsl:variable name="value-of-template_52">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_52),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_52"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_52"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																												<xsl:choose>
																																													<xsl:when test="string-length(n1:PropertyNewValue) &gt; 0">
																																														<xsl:for-each select="n1:PropertyNewValue">
																																															<xsl:variable name="value-of-template_53">
																																																<xsl:apply-templates/>
																																															</xsl:variable>
																																															<xsl:choose>
																																																<xsl:when test="contains(string($value-of-template_53),'&#x200B;')">
																																																	<fo:block>
																																																		<xsl:copy-of select="$value-of-template_53"/>
																																																	</fo:block>
																																																</xsl:when>
																																																<xsl:otherwise>
																																																	<fo:inline>
																																																		<xsl:copy-of select="$value-of-template_53"/>
																																																	</fo:inline>
																																																</xsl:otherwise>
																																															</xsl:choose>
																																															<fo:block/>
																																														</xsl:for-each>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:text>&#160;</xsl:text>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																												<xsl:for-each select="n1:PropertyNewValue">
																																													<xsl:variable name="value-of-template_54">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_54),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_54"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_54"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																												<xsl:for-each select="n1:PropertyNewValue">
																																													<xsl:variable name="value-of-template_55">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_55),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_55"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_55"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																												<xsl:for-each select="n1:PropertyNewValue">
																																													<xsl:variable name="value-of-template_56">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_56),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_56"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_56"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																										</xsl:choose>
																																									</fo:block>
																																								</fo:block-container>
																																							</fo:table-cell>
																																						</fo:table-row>
																																					</xsl:for-each>
																																				</xsl:variable>
																																				<xsl:choose>
																																					<xsl:when test="string($altova:tablerows)">
																																						<xsl:copy-of select="$altova:tablerows"/>
																																					</xsl:when>
																																					<xsl:otherwise>
																																						<fo:table-row>
																																							<fo:table-cell>
																																								<fo:block/>
																																							</fo:table-cell>
																																						</fo:table-row>
																																					</xsl:otherwise>
																																				</xsl:choose>
																																			</fo:table-body>
																																		</fo:table>
																																	</fo:block>
																																</fo:block-container>
																															</fo:table-cell>
																														</fo:table-row>
																													</xsl:variable>
																													<xsl:choose>
																														<xsl:when test="string($altova:tablerows)">
																															<xsl:copy-of select="$altova:tablerows"/>
																														</xsl:when>
																														<xsl:otherwise>
																															<fo:table-row>
																																<fo:table-cell>
																																	<fo:block/>
																																</fo:table-cell>
																															</fo:table-row>
																														</xsl:otherwise>
																													</xsl:choose>
																												</fo:table-body>
																											</fo:table>
																										</fo:block>
																									</fo:block-container>
																								</fo:table-cell>
																							</fo:table-row>
																						</xsl:when>
																						<xsl:otherwise/>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="string($altova:tablerows)">
																		<xsl:copy-of select="$altova:tablerows"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:table-row>
																			<fo:table-cell>
																				<fo:block/>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:otherwise>
																</xsl:choose>
															</fo:table-body>
														</fo:table>
													</xsl:if>
												</xsl:if>
												<xsl:if test="count(//n1:Object[@Status=&apos;New&apos;]) &gt; 0">
													<fo:block>
														<fo:leader leader-pattern="space"/>
													</fo:block>
													<fo:inline font-family="Tahoma" font-size="x-small" font-style="italic">
														<xsl:text>New objects</xsl:text>
													</fo:inline>
													<fo:inline-container>
														<fo:block>
															<xsl:text>&#x200B;</xsl:text>
														</fo:block>
													</fo:inline-container>
													<xsl:if test="n1:ObjectsCollection">
														<fo:table table-layout="fixed" width="100%" border-spacing="0">
															<fo:table-column column-width="4cm"/>
															<fo:table-column column-width="4cm"/>
															<fo:table-column column-width="4cm"/>
															<fo:table-column column-width="3cm"/>
															<fo:table-column column-width="2cm"/>
															<xsl:variable name="altova:CurrContextGrid_57" select="."/>
															<fo:table-header background-color="#d9f5ff" white-space-collapse="true" linefeed-treatment="treat-as-space" wrap-option="no-wrap" white-space-treatment="ignore-if-surrounding-linefeed" start-indent="0pt">
																<xsl:variable name="altova:tablerows">
																	<fo:table-row>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Model Name</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Sorce Name</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Target Name</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Type</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Status</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																	</fo:table-row>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="string($altova:tablerows)">
																		<xsl:copy-of select="$altova:tablerows"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:table-row>
																			<fo:table-cell>
																				<fo:block/>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:otherwise>
																</xsl:choose>
															</fo:table-header>
															<fo:table-body start-indent="0pt">
																<xsl:variable name="altova:tablerows">
																	<xsl:for-each select="n1:ObjectsCollection">
																		<xsl:for-each select="n1:ObjectDetails">
																			<xsl:for-each select="n1:Object[@Status = &apos;New&apos;]">
																				<fo:table-row>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:for-each select="@DMDImpModelName">
																									<fo:inline>
																										<xsl:value-of select="string(.)"/>
																									</fo:inline>
																								</xsl:for-each>
																								<fo:block/>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@SourceValue) &gt; 0">
																												<xsl:for-each select="@SourceValue">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@TargetValue) &gt; 0">
																												<xsl:for-each select="@TargetValue">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@Type) &gt; 0">
																												<xsl:for-each select="@Type">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@Status) &gt; 0">
																												<xsl:for-each select="@Status">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																				</fo:table-row>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="string($altova:tablerows)">
																		<xsl:copy-of select="$altova:tablerows"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:table-row>
																			<fo:table-cell>
																				<fo:block/>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:otherwise>
																</xsl:choose>
															</fo:table-body>
														</fo:table>
													</xsl:if>
												</xsl:if>
												<xsl:if test="count(//n1:Object[@Status=&apos;Deleted&apos;]) &gt; 0">
													<fo:block>
														<fo:leader leader-pattern="space"/>
													</fo:block>
													<fo:inline font-family="Tahoma" font-size="x-small" font-style="italic">
														<xsl:text>Deleted objects</xsl:text>
													</fo:inline>
													<fo:inline-container>
														<fo:block>
															<xsl:text>&#x200B;</xsl:text>
														</fo:block>
													</fo:inline-container>
													<xsl:if test="n1:ObjectsCollection">
														<fo:table table-layout="fixed" width="100%" border-spacing="0">
															<fo:table-column column-width="4cm"/>
															<fo:table-column column-width="4cm"/>
															<fo:table-column column-width="4cm"/>
															<fo:table-column column-width="3cm"/>
															<fo:table-column column-width="2cm"/>
															<xsl:variable name="altova:CurrContextGrid_79" select="."/>
															<fo:table-header background-color="#d9f5ff" white-space-collapse="true" linefeed-treatment="treat-as-space" wrap-option="no-wrap" white-space-treatment="ignore-if-surrounding-linefeed" start-indent="0pt">
																<xsl:variable name="altova:tablerows">
																	<fo:table-row>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Model Name</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Sorce Name</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Target Name</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Type</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Status</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																	</fo:table-row>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="string($altova:tablerows)">
																		<xsl:copy-of select="$altova:tablerows"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:table-row>
																			<fo:table-cell>
																				<fo:block/>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:otherwise>
																</xsl:choose>
															</fo:table-header>
															<fo:table-body start-indent="0pt">
																<xsl:variable name="altova:tablerows">
																	<xsl:for-each select="n1:ObjectsCollection">
																		<xsl:for-each select="n1:ObjectDetails">
																			<xsl:for-each select="n1:Object[@Status = &apos;Deleted&apos;]">
																				<fo:table-row>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:for-each select="@DMDImpModelName">
																									<fo:inline>
																										<xsl:value-of select="string(.)"/>
																									</fo:inline>
																								</xsl:for-each>
																								<fo:block/>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@SourceValue) &gt; 0">
																												<xsl:for-each select="@SourceValue">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@TargetValue) &gt; 0">
																												<xsl:for-each select="@TargetValue">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@Type) &gt; 0">
																												<xsl:for-each select="@Type">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@Status) &gt; 0">
																												<xsl:for-each select="@Status">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																				</fo:table-row>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="string($altova:tablerows)">
																		<xsl:copy-of select="$altova:tablerows"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:table-row>
																			<fo:table-cell>
																				<fo:block/>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:otherwise>
																</xsl:choose>
															</fo:table-body>
														</fo:table>
													</xsl:if>
												</xsl:if>
											</xsl:when>
											<xsl:otherwise>
												<xsl:if test="count(//n1:Object[@Status=&apos;Modified&apos;]) &gt; 0">
													<fo:block>
														<fo:leader leader-pattern="space"/>
													</fo:block>
													<fo:inline font-family="Tahoma" font-size="x-small" font-style="italic">
														<xsl:text>Modified objects</xsl:text>
													</fo:inline>
													<fo:inline-container>
														<fo:block>
															<xsl:text>&#x200B;</xsl:text>
														</fo:block>
													</fo:inline-container>
													<xsl:if test="n1:ObjectsCollection">
														<fo:table table-layout="fixed" width="100%" border-spacing="0">
															<fo:table-column column-width="6cm"/>
															<fo:table-column column-width="6cm"/>
															<fo:table-column column-width="3cm"/>
															<fo:table-column column-width="2cm"/>
															<xsl:variable name="altova:CurrContextGrid_101" select="."/>
															<fo:table-header background-color="#d9f5ff" white-space-collapse="true" linefeed-treatment="treat-as-space" wrap-option="no-wrap" white-space-treatment="ignore-if-surrounding-linefeed" start-indent="0pt">
																<xsl:variable name="altova:tablerows">
																	<fo:table-row>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Sorce Name</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Target Name</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Type</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Status</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																	</fo:table-row>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="string($altova:tablerows)">
																		<xsl:copy-of select="$altova:tablerows"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:table-row>
																			<fo:table-cell>
																				<fo:block/>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:otherwise>
																</xsl:choose>
															</fo:table-header>
															<fo:table-body start-indent="0pt">
																<xsl:variable name="altova:tablerows">
																	<xsl:for-each select="n1:ObjectsCollection">
																		<xsl:for-each select="n1:ObjectDetails">
																			<xsl:for-each select="n1:Object[@Status = &apos;Modified&apos;]">
																				<fo:table-row>
																					<fo:table-cell background-color="#ecfefa" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@SourceValue) &gt; 0">
																												<xsl:for-each select="@SourceValue">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@TargetValue) &gt; 0">
																												<xsl:for-each select="@TargetValue">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@Type) &gt; 0">
																												<xsl:for-each select="@Type">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@Status) &gt; 0">
																												<xsl:for-each select="@Status">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																				</fo:table-row>
																				<xsl:for-each select="n1:PropertiesCollection">
																					<xsl:choose>
																						<xsl:when test="count( n1:PropertyDetails ) &gt;0">
																							<fo:table-row>
																								<fo:table-cell number-columns-spanned="4" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																									<fo:block-container overflow="hidden">
																										<fo:block text-align="left">
																											<fo:inline-container>
																												<fo:block>
																													<xsl:text>&#x200B;</xsl:text>
																												</fo:block>
																											</fo:inline-container>
																											<fo:table font-size="xx-small" table-layout="fixed" width="100%" border-spacing="0">
																												<fo:table-column column-width="3cm"/>
																												<fo:table-column column-width="13cm"/>
																												<xsl:variable name="altova:CurrContextGrid_122" select="."/>
																												<fo:table-body start-indent="0pt">
																													<xsl:variable name="altova:tablerows">
																														<fo:table-row>
																															<fo:table-cell padding="0" display-align="center">
																																<fo:block-container overflow="hidden">
																																	<fo:block text-align="left"/>
																																</fo:block-container>
																															</fo:table-cell>
																															<fo:table-cell padding="0" display-align="center">
																																<fo:block-container overflow="hidden">
																																	<fo:block text-align="left">
																																		<fo:inline-container>
																																			<fo:block>
																																				<xsl:text>&#x200B;</xsl:text>
																																			</fo:block>
																																		</fo:inline-container>
																																		<xsl:if test="n1:PropertyDetails">
																																			<fo:table font-style="italic" width="12cm" table-layout="fixed" border-spacing="0">
																																				<fo:table-column column-width="4cm"/>
																																				<fo:table-column column-width="4cm"/>
																																				<fo:table-column column-width="4cm"/>
																																				<xsl:variable name="altova:CurrContextGrid_123" select="."/>
																																				<fo:table-body start-indent="0pt">
																																					<xsl:variable name="altova:tablerows">
																																						<xsl:for-each select="n1:PropertyDetails">
																																							<fo:table-row>
																																								<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" border-left-color="black" border-left-style="dotted" border-left-width="thin" border-right-color="black" border-right-style="dotted" border-right-width="thin" border-top-color="black" border-top-style="dotted" border-top-width="thin" padding="3" display-align="center">
																																									<fo:block-container overflow="hidden">
																																										<fo:block text-align="left">
																																											<xsl:choose>
																																												<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																													<xsl:for-each select="n1:PropertyName">
																																														<xsl:variable name="value-of-template_124">
																																															<xsl:apply-templates/>
																																														</xsl:variable>
																																														<xsl:choose>
																																															<xsl:when test="contains(string($value-of-template_124),'&#x200B;')">
																																																<fo:block>
																																																	<xsl:copy-of select="$value-of-template_124"/>
																																																</fo:block>
																																															</xsl:when>
																																															<xsl:otherwise>
																																																<fo:inline>
																																																	<xsl:copy-of select="$value-of-template_124"/>
																																																</fo:inline>
																																															</xsl:otherwise>
																																														</xsl:choose>
																																														<fo:block/>
																																													</xsl:for-each>
																																												</xsl:when>
																																												<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																													<xsl:choose>
																																														<xsl:when test="string-length(n1:PropertyName) &gt; 0">
																																															<xsl:for-each select="n1:PropertyName">
																																																<xsl:variable name="value-of-template_125">
																																																	<xsl:apply-templates/>
																																																</xsl:variable>
																																																<xsl:choose>
																																																	<xsl:when test="contains(string($value-of-template_125),'&#x200B;')">
																																																		<fo:block>
																																																			<xsl:copy-of select="$value-of-template_125"/>
																																																		</fo:block>
																																																	</xsl:when>
																																																	<xsl:otherwise>
																																																		<fo:inline>
																																																			<xsl:copy-of select="$value-of-template_125"/>
																																																		</fo:inline>
																																																	</xsl:otherwise>
																																																</xsl:choose>
																																																<fo:block/>
																																															</xsl:for-each>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:text>&#160;</xsl:text>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																												</xsl:when>
																																												<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																													<xsl:for-each select="n1:PropertyName">
																																														<xsl:variable name="value-of-template_126">
																																															<xsl:apply-templates/>
																																														</xsl:variable>
																																														<xsl:choose>
																																															<xsl:when test="contains(string($value-of-template_126),'&#x200B;')">
																																																<fo:block>
																																																	<xsl:copy-of select="$value-of-template_126"/>
																																																</fo:block>
																																															</xsl:when>
																																															<xsl:otherwise>
																																																<fo:inline>
																																																	<xsl:copy-of select="$value-of-template_126"/>
																																																</fo:inline>
																																															</xsl:otherwise>
																																														</xsl:choose>
																																														<fo:block/>
																																													</xsl:for-each>
																																												</xsl:when>
																																												<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																													<xsl:for-each select="n1:PropertyName">
																																														<xsl:variable name="value-of-template_127">
																																															<xsl:apply-templates/>
																																														</xsl:variable>
																																														<xsl:choose>
																																															<xsl:when test="contains(string($value-of-template_127),'&#x200B;')">
																																																<fo:block>
																																																	<xsl:copy-of select="$value-of-template_127"/>
																																																</fo:block>
																																															</xsl:when>
																																															<xsl:otherwise>
																																																<fo:inline>
																																																	<xsl:copy-of select="$value-of-template_127"/>
																																																</fo:inline>
																																															</xsl:otherwise>
																																														</xsl:choose>
																																														<fo:block/>
																																													</xsl:for-each>
																																												</xsl:when>
																																												<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																													<xsl:for-each select="n1:PropertyName">
																																														<xsl:variable name="value-of-template_128">
																																															<xsl:apply-templates/>
																																														</xsl:variable>
																																														<xsl:choose>
																																															<xsl:when test="contains(string($value-of-template_128),'&#x200B;')">
																																																<fo:block>
																																																	<xsl:copy-of select="$value-of-template_128"/>
																																																</fo:block>
																																															</xsl:when>
																																															<xsl:otherwise>
																																																<fo:inline>
																																																	<xsl:copy-of select="$value-of-template_128"/>
																																																</fo:inline>
																																															</xsl:otherwise>
																																														</xsl:choose>
																																														<fo:block/>
																																													</xsl:for-each>
																																												</xsl:when>
																																											</xsl:choose>
																																										</fo:block>
																																									</fo:block-container>
																																								</fo:table-cell>
																																								<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" border-right-color="black" border-right-style="dotted" border-right-width="thin" border-top-color="black" border-top-style="dotted" border-top-width="thin" padding="3" display-align="center">
																																									<fo:block-container overflow="hidden">
																																										<fo:block text-align="left">
																																											<xsl:choose>
																																												<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																													<xsl:for-each select="n1:PropertyOldValue">
																																														<xsl:variable name="value-of-template_129">
																																															<xsl:apply-templates/>
																																														</xsl:variable>
																																														<xsl:choose>
																																															<xsl:when test="contains(string($value-of-template_129),'&#x200B;')">
																																																<fo:block>
																																																	<xsl:copy-of select="$value-of-template_129"/>
																																																</fo:block>
																																															</xsl:when>
																																															<xsl:otherwise>
																																																<fo:inline>
																																																	<xsl:copy-of select="$value-of-template_129"/>
																																																</fo:inline>
																																															</xsl:otherwise>
																																														</xsl:choose>
																																														<fo:block/>
																																													</xsl:for-each>
																																												</xsl:when>
																																												<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																													<xsl:choose>
																																														<xsl:when test="string-length(n1:PropertyOldValue) &gt; 0">
																																															<xsl:for-each select="n1:PropertyOldValue">
																																																<xsl:variable name="value-of-template_130">
																																																	<xsl:apply-templates/>
																																																</xsl:variable>
																																																<xsl:choose>
																																																	<xsl:when test="contains(string($value-of-template_130),'&#x200B;')">
																																																		<fo:block>
																																																			<xsl:copy-of select="$value-of-template_130"/>
																																																		</fo:block>
																																																	</xsl:when>
																																																	<xsl:otherwise>
																																																		<fo:inline>
																																																			<xsl:copy-of select="$value-of-template_130"/>
																																																		</fo:inline>
																																																	</xsl:otherwise>
																																																</xsl:choose>
																																																<fo:block/>
																																															</xsl:for-each>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:text>&#160;</xsl:text>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																												</xsl:when>
																																												<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																													<xsl:for-each select="n1:PropertyOldValue">
																																														<xsl:variable name="value-of-template_131">
																																															<xsl:apply-templates/>
																																														</xsl:variable>
																																														<xsl:choose>
																																															<xsl:when test="contains(string($value-of-template_131),'&#x200B;')">
																																																<fo:block>
																																																	<xsl:copy-of select="$value-of-template_131"/>
																																																</fo:block>
																																															</xsl:when>
																																															<xsl:otherwise>
																																																<fo:inline>
																																																	<xsl:copy-of select="$value-of-template_131"/>
																																																</fo:inline>
																																															</xsl:otherwise>
																																														</xsl:choose>
																																														<fo:block/>
																																													</xsl:for-each>
																																												</xsl:when>
																																												<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																													<xsl:for-each select="n1:PropertyOldValue">
																																														<xsl:variable name="value-of-template_132">
																																															<xsl:apply-templates/>
																																														</xsl:variable>
																																														<xsl:choose>
																																															<xsl:when test="contains(string($value-of-template_132),'&#x200B;')">
																																																<fo:block>
																																																	<xsl:copy-of select="$value-of-template_132"/>
																																																</fo:block>
																																															</xsl:when>
																																															<xsl:otherwise>
																																																<fo:inline>
																																																	<xsl:copy-of select="$value-of-template_132"/>
																																																</fo:inline>
																																															</xsl:otherwise>
																																														</xsl:choose>
																																														<fo:block/>
																																													</xsl:for-each>
																																												</xsl:when>
																																												<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																													<xsl:for-each select="n1:PropertyOldValue">
																																														<xsl:variable name="value-of-template_133">
																																															<xsl:apply-templates/>
																																														</xsl:variable>
																																														<xsl:choose>
																																															<xsl:when test="contains(string($value-of-template_133),'&#x200B;')">
																																																<fo:block>
																																																	<xsl:copy-of select="$value-of-template_133"/>
																																																</fo:block>
																																															</xsl:when>
																																															<xsl:otherwise>
																																																<fo:inline>
																																																	<xsl:copy-of select="$value-of-template_133"/>
																																																</fo:inline>
																																															</xsl:otherwise>
																																														</xsl:choose>
																																														<fo:block/>
																																													</xsl:for-each>
																																												</xsl:when>
																																											</xsl:choose>
																																										</fo:block>
																																									</fo:block-container>
																																								</fo:table-cell>
																																								<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" border-right-color="black" border-right-style="dotted" border-right-width="thin" border-top-color="black" border-top-style="dotted" border-top-width="thin" padding="3" display-align="center">
																																									<fo:block-container overflow="hidden">
																																										<fo:block text-align="left">
																																											<xsl:choose>
																																												<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																													<xsl:for-each select="n1:PropertyNewValue">
																																														<xsl:variable name="value-of-template_134">
																																															<xsl:apply-templates/>
																																														</xsl:variable>
																																														<xsl:choose>
																																															<xsl:when test="contains(string($value-of-template_134),'&#x200B;')">
																																																<fo:block>
																																																	<xsl:copy-of select="$value-of-template_134"/>
																																																</fo:block>
																																															</xsl:when>
																																															<xsl:otherwise>
																																																<fo:inline>
																																																	<xsl:copy-of select="$value-of-template_134"/>
																																																</fo:inline>
																																															</xsl:otherwise>
																																														</xsl:choose>
																																														<fo:block/>
																																													</xsl:for-each>
																																												</xsl:when>
																																												<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																													<xsl:choose>
																																														<xsl:when test="string-length(n1:PropertyNewValue) &gt; 0">
																																															<xsl:for-each select="n1:PropertyNewValue">
																																																<xsl:variable name="value-of-template_135">
																																																	<xsl:apply-templates/>
																																																</xsl:variable>
																																																<xsl:choose>
																																																	<xsl:when test="contains(string($value-of-template_135),'&#x200B;')">
																																																		<fo:block>
																																																			<xsl:copy-of select="$value-of-template_135"/>
																																																		</fo:block>
																																																	</xsl:when>
																																																	<xsl:otherwise>
																																																		<fo:inline>
																																																			<xsl:copy-of select="$value-of-template_135"/>
																																																		</fo:inline>
																																																	</xsl:otherwise>
																																																</xsl:choose>
																																																<fo:block/>
																																															</xsl:for-each>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:text>&#160;</xsl:text>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																												</xsl:when>
																																												<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																													<xsl:for-each select="n1:PropertyNewValue">
																																														<xsl:variable name="value-of-template_136">
																																															<xsl:apply-templates/>
																																														</xsl:variable>
																																														<xsl:choose>
																																															<xsl:when test="contains(string($value-of-template_136),'&#x200B;')">
																																																<fo:block>
																																																	<xsl:copy-of select="$value-of-template_136"/>
																																																</fo:block>
																																															</xsl:when>
																																															<xsl:otherwise>
																																																<fo:inline>
																																																	<xsl:copy-of select="$value-of-template_136"/>
																																																</fo:inline>
																																															</xsl:otherwise>
																																														</xsl:choose>
																																														<fo:block/>
																																													</xsl:for-each>
																																												</xsl:when>
																																												<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																													<xsl:for-each select="n1:PropertyNewValue">
																																														<xsl:variable name="value-of-template_137">
																																															<xsl:apply-templates/>
																																														</xsl:variable>
																																														<xsl:choose>
																																															<xsl:when test="contains(string($value-of-template_137),'&#x200B;')">
																																																<fo:block>
																																																	<xsl:copy-of select="$value-of-template_137"/>
																																																</fo:block>
																																															</xsl:when>
																																															<xsl:otherwise>
																																																<fo:inline>
																																																	<xsl:copy-of select="$value-of-template_137"/>
																																																</fo:inline>
																																															</xsl:otherwise>
																																														</xsl:choose>
																																														<fo:block/>
																																													</xsl:for-each>
																																												</xsl:when>
																																												<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																													<xsl:for-each select="n1:PropertyNewValue">
																																														<xsl:variable name="value-of-template_138">
																																															<xsl:apply-templates/>
																																														</xsl:variable>
																																														<xsl:choose>
																																															<xsl:when test="contains(string($value-of-template_138),'&#x200B;')">
																																																<fo:block>
																																																	<xsl:copy-of select="$value-of-template_138"/>
																																																</fo:block>
																																															</xsl:when>
																																															<xsl:otherwise>
																																																<fo:inline>
																																																	<xsl:copy-of select="$value-of-template_138"/>
																																																</fo:inline>
																																															</xsl:otherwise>
																																														</xsl:choose>
																																														<fo:block/>
																																													</xsl:for-each>
																																												</xsl:when>
																																											</xsl:choose>
																																										</fo:block>
																																									</fo:block-container>
																																								</fo:table-cell>
																																							</fo:table-row>
																																						</xsl:for-each>
																																					</xsl:variable>
																																					<xsl:choose>
																																						<xsl:when test="string($altova:tablerows)">
																																							<xsl:copy-of select="$altova:tablerows"/>
																																						</xsl:when>
																																						<xsl:otherwise>
																																							<fo:table-row>
																																								<fo:table-cell>
																																									<fo:block/>
																																								</fo:table-cell>
																																							</fo:table-row>
																																						</xsl:otherwise>
																																					</xsl:choose>
																																				</fo:table-body>
																																			</fo:table>
																																		</xsl:if>
																																	</fo:block>
																																</fo:block-container>
																															</fo:table-cell>
																														</fo:table-row>
																													</xsl:variable>
																													<xsl:choose>
																														<xsl:when test="string($altova:tablerows)">
																															<xsl:copy-of select="$altova:tablerows"/>
																														</xsl:when>
																														<xsl:otherwise>
																															<fo:table-row>
																																<fo:table-cell>
																																	<fo:block/>
																																</fo:table-cell>
																															</fo:table-row>
																														</xsl:otherwise>
																													</xsl:choose>
																												</fo:table-body>
																											</fo:table>
																										</fo:block>
																									</fo:block-container>
																								</fo:table-cell>
																							</fo:table-row>
																						</xsl:when>
																						<xsl:otherwise/>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="string($altova:tablerows)">
																		<xsl:copy-of select="$altova:tablerows"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:table-row>
																			<fo:table-cell>
																				<fo:block/>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:otherwise>
																</xsl:choose>
															</fo:table-body>
														</fo:table>
													</xsl:if>
												</xsl:if>
												<xsl:if test="count(//n1:Object[@Status=&apos;New&apos;]) &gt; 0">
													<fo:block>
														<fo:leader leader-pattern="space"/>
													</fo:block>
													<fo:inline font-family="Tahoma" font-size="x-small" font-style="italic">
														<xsl:text>New objects</xsl:text>
													</fo:inline>
													<fo:inline-container>
														<fo:block>
															<xsl:text>&#x200B;</xsl:text>
														</fo:block>
													</fo:inline-container>
													<xsl:if test="n1:ObjectsCollection">
														<fo:table table-layout="fixed" width="100%" border-spacing="0">
															<fo:table-column column-width="6cm"/>
															<fo:table-column column-width="6cm"/>
															<fo:table-column column-width="3cm"/>
															<fo:table-column column-width="2cm"/>
															<xsl:variable name="altova:CurrContextGrid_139" select="."/>
															<fo:table-header background-color="#d9f5ff" white-space-collapse="true" linefeed-treatment="treat-as-space" wrap-option="no-wrap" white-space-treatment="ignore-if-surrounding-linefeed" start-indent="0pt">
																<xsl:variable name="altova:tablerows">
																	<fo:table-row>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Sorce Name</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Target Name</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Type</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Status</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																	</fo:table-row>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="string($altova:tablerows)">
																		<xsl:copy-of select="$altova:tablerows"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:table-row>
																			<fo:table-cell>
																				<fo:block/>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:otherwise>
																</xsl:choose>
															</fo:table-header>
															<fo:table-body start-indent="0pt">
																<xsl:variable name="altova:tablerows">
																	<xsl:for-each select="n1:ObjectsCollection">
																		<xsl:for-each select="n1:ObjectDetails">
																			<xsl:for-each select="n1:Object[@Status = &apos;New&apos;]">
																				<fo:table-row>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@SourceValue) &gt; 0">
																												<xsl:for-each select="@SourceValue">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@TargetValue) &gt; 0">
																												<xsl:for-each select="@TargetValue">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@Type) &gt; 0">
																												<xsl:for-each select="@Type">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@Status) &gt; 0">
																												<xsl:for-each select="@Status">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																				</fo:table-row>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="string($altova:tablerows)">
																		<xsl:copy-of select="$altova:tablerows"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:table-row>
																			<fo:table-cell>
																				<fo:block/>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:otherwise>
																</xsl:choose>
															</fo:table-body>
														</fo:table>
													</xsl:if>
												</xsl:if>
												<xsl:if test="count(//n1:Object[@Status=&apos;Deleted&apos;]) &gt; 0">
													<fo:block>
														<fo:leader leader-pattern="space"/>
													</fo:block>
													<fo:inline font-family="Tahoma" font-size="x-small" font-style="italic">
														<xsl:text>Deleted objects</xsl:text>
													</fo:inline>
													<fo:inline-container>
														<fo:block>
															<xsl:text>&#x200B;</xsl:text>
														</fo:block>
													</fo:inline-container>
													<xsl:if test="n1:ObjectsCollection">
														<fo:table table-layout="fixed" width="100%" border-spacing="0">
															<fo:table-column column-width="6cm"/>
															<fo:table-column column-width="6cm"/>
															<fo:table-column column-width="3cm"/>
															<fo:table-column column-width="2cm"/>
															<xsl:variable name="altova:CurrContextGrid_160" select="."/>
															<fo:table-header white-space-collapse="true" linefeed-treatment="treat-as-space" wrap-option="no-wrap" white-space-treatment="ignore-if-surrounding-linefeed" start-indent="0pt">
																<xsl:variable name="altova:tablerows">
																	<fo:table-row>
																		<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Sorce Name</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Target Name</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Type</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="center">
																					<fo:inline>
																						<xsl:text>Status</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																	</fo:table-row>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="string($altova:tablerows)">
																		<xsl:copy-of select="$altova:tablerows"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:table-row>
																			<fo:table-cell>
																				<fo:block/>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:otherwise>
																</xsl:choose>
															</fo:table-header>
															<fo:table-body start-indent="0pt">
																<xsl:variable name="altova:tablerows">
																	<xsl:for-each select="n1:ObjectsCollection">
																		<xsl:for-each select="n1:ObjectDetails">
																			<xsl:for-each select="n1:Object[@Status = &apos;Deleted&apos;]">
																				<fo:table-row>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@SourceValue) &gt; 0">
																												<xsl:for-each select="@SourceValue">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@SourceValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@TargetValue) &gt; 0">
																												<xsl:for-each select="@TargetValue">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@TargetValue">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@Type) &gt; 0">
																												<xsl:for-each select="@Type">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@Type">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																					<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:choose>
																									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																										<xsl:choose>
																											<xsl:when test="string-length(@Status) &gt; 0">
																												<xsl:for-each select="@Status">
																													<fo:inline>
																														<xsl:value-of select="string(.)"/>
																													</fo:inline>
																												</xsl:for-each>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:text>&#160;</xsl:text>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																									<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																										<xsl:for-each select="@Status">
																											<fo:inline>
																												<xsl:value-of select="string(.)"/>
																											</fo:inline>
																										</xsl:for-each>
																									</xsl:when>
																								</xsl:choose>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																				</fo:table-row>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="string($altova:tablerows)">
																		<xsl:copy-of select="$altova:tablerows"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:table-row>
																			<fo:table-cell>
																				<fo:block/>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:otherwise>
																</xsl:choose>
															</fo:table-body>
														</fo:table>
													</xsl:if>
												</xsl:if>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<fo:inline font-size="xx-small" font-style="italic">
											<xsl:text>O</xsl:text>
										</fo:inline>
										<fo:inline font-family="Tahoma" font-size="xx-small" font-style="italic">
											<xsl:text>bject</xsl:text>
										</fo:inline>
										<fo:inline font-size="xx-small" font-style="italic">
											<xsl:text>s</xsl:text>
										</fo:inline>
										<xsl:choose>
											<xsl:when test="n1:IsDMDImport = &apos;Y&apos;">
												<fo:inline-container>
													<fo:block>
														<xsl:text>&#x200B;</xsl:text>
													</fo:block>
												</fo:inline-container>
												<xsl:if test="n1:ObjectsCollection">
													<fo:table table-layout="fixed" width="100%" border-spacing="0">
														<fo:table-column column-width="4cm"/>
														<fo:table-column column-width="4cm"/>
														<fo:table-column column-width="4cm"/>
														<fo:table-column column-width="3cm"/>
														<fo:table-column column-width="2cm"/>
														<xsl:variable name="altova:CurrContextGrid_181" select="."/>
														<fo:table-header background-color="#d9f5ff" white-space-collapse="true" linefeed-treatment="treat-as-space" wrap-option="no-wrap" white-space-treatment="ignore-if-surrounding-linefeed" start-indent="0pt">
															<xsl:variable name="altova:tablerows">
																<fo:table-row>
																	<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																		<fo:block-container overflow="hidden">
																			<fo:block text-align="center">
																				<fo:inline>
																					<xsl:text>Model Name</xsl:text>
																				</fo:inline>
																			</fo:block>
																		</fo:block-container>
																	</fo:table-cell>
																	<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																		<fo:block-container overflow="hidden">
																			<fo:block text-align="center">
																				<fo:inline>
																					<xsl:text>Sorce Name</xsl:text>
																				</fo:inline>
																			</fo:block>
																		</fo:block-container>
																	</fo:table-cell>
																	<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																		<fo:block-container overflow="hidden">
																			<fo:block text-align="center">
																				<fo:inline>
																					<xsl:text>Target Name</xsl:text>
																				</fo:inline>
																			</fo:block>
																		</fo:block-container>
																	</fo:table-cell>
																	<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																		<fo:block-container overflow="hidden">
																			<fo:block text-align="center">
																				<fo:inline>
																					<xsl:text>Type</xsl:text>
																				</fo:inline>
																			</fo:block>
																		</fo:block-container>
																	</fo:table-cell>
																	<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																		<fo:block-container overflow="hidden">
																			<fo:block text-align="center">
																				<fo:inline>
																					<xsl:text>Status</xsl:text>
																				</fo:inline>
																			</fo:block>
																		</fo:block-container>
																	</fo:table-cell>
																</fo:table-row>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="string($altova:tablerows)">
																	<xsl:copy-of select="$altova:tablerows"/>
																</xsl:when>
																<xsl:otherwise>
																	<fo:table-row>
																		<fo:table-cell>
																			<fo:block/>
																		</fo:table-cell>
																	</fo:table-row>
																</xsl:otherwise>
															</xsl:choose>
														</fo:table-header>
														<fo:table-body start-indent="0pt">
															<xsl:variable name="altova:tablerows">
																<xsl:for-each select="n1:ObjectsCollection">
																	<xsl:for-each select="n1:ObjectDetails">
																		<xsl:for-each select="n1:Object">
																			<fo:table-row>
																				<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																					<fo:block-container overflow="hidden">
																						<fo:block text-align="left">
																							<xsl:for-each select="@DMDImpModelName">
																								<fo:inline>
																									<xsl:value-of select="string(.)"/>
																								</fo:inline>
																							</xsl:for-each>
																							<fo:block/>
																						</fo:block>
																					</fo:block-container>
																				</fo:table-cell>
																				<fo:table-cell background-color="#ecfefa" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																					<fo:block-container overflow="hidden">
																						<fo:block text-align="left">
																							<xsl:choose>
																								<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																									<xsl:for-each select="@SourceValue">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																									<xsl:choose>
																										<xsl:when test="string-length(@SourceValue) &gt; 0">
																											<xsl:for-each select="@SourceValue">
																												<fo:inline>
																													<xsl:value-of select="string(.)"/>
																												</fo:inline>
																											</xsl:for-each>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:text>&#160;</xsl:text>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																									<xsl:for-each select="@SourceValue">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																									<xsl:for-each select="@SourceValue">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																									<xsl:for-each select="@SourceValue">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																							</xsl:choose>
																						</fo:block>
																					</fo:block-container>
																				</fo:table-cell>
																				<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																					<fo:block-container overflow="hidden">
																						<fo:block text-align="left">
																							<xsl:choose>
																								<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																									<xsl:for-each select="@TargetValue">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																									<xsl:choose>
																										<xsl:when test="string-length(@TargetValue) &gt; 0">
																											<xsl:for-each select="@TargetValue">
																												<fo:inline>
																													<xsl:value-of select="string(.)"/>
																												</fo:inline>
																											</xsl:for-each>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:text>&#160;</xsl:text>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																									<xsl:for-each select="@TargetValue">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																									<xsl:for-each select="@TargetValue">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																									<xsl:for-each select="@TargetValue">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																							</xsl:choose>
																						</fo:block>
																					</fo:block-container>
																				</fo:table-cell>
																				<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																					<fo:block-container overflow="hidden">
																						<fo:block text-align="left">
																							<xsl:choose>
																								<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																									<xsl:for-each select="@Type">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																									<xsl:choose>
																										<xsl:when test="string-length(@Type) &gt; 0">
																											<xsl:for-each select="@Type">
																												<fo:inline>
																													<xsl:value-of select="string(.)"/>
																												</fo:inline>
																											</xsl:for-each>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:text>&#160;</xsl:text>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																									<xsl:for-each select="@Type">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																									<xsl:for-each select="@Type">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																									<xsl:for-each select="@Type">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																							</xsl:choose>
																						</fo:block>
																					</fo:block-container>
																				</fo:table-cell>
																				<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																					<fo:block-container overflow="hidden">
																						<fo:block text-align="left">
																							<xsl:choose>
																								<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																									<xsl:for-each select="@Status">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																									<xsl:choose>
																										<xsl:when test="string-length(@Status) &gt; 0">
																											<xsl:for-each select="@Status">
																												<fo:inline>
																													<xsl:value-of select="string(.)"/>
																												</fo:inline>
																											</xsl:for-each>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:text>&#160;</xsl:text>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																									<xsl:for-each select="@Status">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																									<xsl:for-each select="@Status">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																									<xsl:for-each select="@Status">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																							</xsl:choose>
																						</fo:block>
																					</fo:block-container>
																				</fo:table-cell>
																			</fo:table-row>
																			<xsl:for-each select="n1:PropertiesCollection">
																				<xsl:choose>
																					<xsl:when test="count( n1:PropertyDetails ) &gt;0">
																						<fo:table-row>
																							<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" padding="3" display-align="center">
																								<fo:block-container overflow="hidden">
																									<fo:block text-align="left"/>
																								</fo:block-container>
																							</fo:table-cell>
																							<fo:table-cell number-columns-spanned="4" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																								<fo:block-container overflow="hidden">
																									<fo:block text-align="left">
																										<fo:inline-container>
																											<fo:block>
																												<xsl:text>&#x200B;</xsl:text>
																											</fo:block>
																										</fo:inline-container>
																										<fo:table table-layout="fixed" width="100%" border-spacing="0">
																											<fo:table-column column-width="3cm"/>
																											<fo:table-column column-width="13cm"/>
																											<xsl:variable name="altova:CurrContextGrid_203" select="."/>
																											<fo:table-body start-indent="0pt">
																												<xsl:variable name="altova:tablerows">
																													<fo:table-row>
																														<fo:table-cell padding="0" display-align="center">
																															<fo:block-container overflow="hidden">
																																<fo:block text-align="left"/>
																															</fo:block-container>
																														</fo:table-cell>
																														<fo:table-cell padding="0" display-align="center">
																															<fo:block-container overflow="hidden">
																																<fo:block text-align="left">
																																	<fo:inline-container>
																																		<fo:block>
																																			<xsl:text>&#x200B;</xsl:text>
																																		</fo:block>
																																	</fo:inline-container>
																																	<fo:table font-style="italic" width="12cm" table-layout="fixed" border-spacing="0">
																																		<fo:table-column column-width="4cm"/>
																																		<fo:table-column column-width="4cm"/>
																																		<fo:table-column column-width="4cm"/>
																																		<xsl:variable name="altova:CurrContextGrid_204" select="."/>
																																		<fo:table-body start-indent="0pt">
																																			<xsl:variable name="altova:tablerows">
																																				<fo:table-row height="0.01cm">
																																					<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" padding="3" display-align="center">
																																						<fo:block-container overflow="hidden">
																																							<fo:block text-align="left"/>
																																						</fo:block-container>
																																					</fo:table-cell>
																																					<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" padding="3" display-align="center">
																																						<fo:block-container overflow="hidden">
																																							<fo:block text-align="left"/>
																																						</fo:block-container>
																																					</fo:table-cell>
																																					<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" padding="3" display-align="center">
																																						<fo:block-container overflow="hidden">
																																							<fo:block text-align="left"/>
																																						</fo:block-container>
																																					</fo:table-cell>
																																				</fo:table-row>
																																				<xsl:for-each select="n1:PropertyDetails">
																																					<fo:table-row>
																																						<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" border-left-color="black" border-left-style="dotted" border-left-width="thin" border-right-color="black" border-right-style="dotted" border-right-width="thin" padding="3" display-align="center">
																																							<fo:block-container overflow="hidden">
																																								<fo:block text-align="left">
																																									<xsl:choose>
																																										<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																											<xsl:for-each select="n1:PropertyName">
																																												<xsl:variable name="value-of-template_205">
																																													<xsl:apply-templates/>
																																												</xsl:variable>
																																												<xsl:choose>
																																													<xsl:when test="contains(string($value-of-template_205),'&#x200B;')">
																																														<fo:block>
																																															<xsl:copy-of select="$value-of-template_205"/>
																																														</fo:block>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:copy-of select="$value-of-template_205"/>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																												<fo:block/>
																																											</xsl:for-each>
																																										</xsl:when>
																																										<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																											<xsl:choose>
																																												<xsl:when test="string-length(n1:PropertyName) &gt; 0">
																																													<xsl:for-each select="n1:PropertyName">
																																														<xsl:variable name="value-of-template_206">
																																															<xsl:apply-templates/>
																																														</xsl:variable>
																																														<xsl:choose>
																																															<xsl:when test="contains(string($value-of-template_206),'&#x200B;')">
																																																<fo:block>
																																																	<xsl:copy-of select="$value-of-template_206"/>
																																																</fo:block>
																																															</xsl:when>
																																															<xsl:otherwise>
																																																<fo:inline>
																																																	<xsl:copy-of select="$value-of-template_206"/>
																																																</fo:inline>
																																															</xsl:otherwise>
																																														</xsl:choose>
																																														<fo:block/>
																																													</xsl:for-each>
																																												</xsl:when>
																																												<xsl:otherwise>
																																													<fo:inline>
																																														<xsl:text>&#160;</xsl:text>
																																													</fo:inline>
																																												</xsl:otherwise>
																																											</xsl:choose>
																																										</xsl:when>
																																										<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																											<xsl:for-each select="n1:PropertyName">
																																												<xsl:variable name="value-of-template_207">
																																													<xsl:apply-templates/>
																																												</xsl:variable>
																																												<xsl:choose>
																																													<xsl:when test="contains(string($value-of-template_207),'&#x200B;')">
																																														<fo:block>
																																															<xsl:copy-of select="$value-of-template_207"/>
																																														</fo:block>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:copy-of select="$value-of-template_207"/>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																												<fo:block/>
																																											</xsl:for-each>
																																										</xsl:when>
																																										<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																											<xsl:for-each select="n1:PropertyName">
																																												<xsl:variable name="value-of-template_208">
																																													<xsl:apply-templates/>
																																												</xsl:variable>
																																												<xsl:choose>
																																													<xsl:when test="contains(string($value-of-template_208),'&#x200B;')">
																																														<fo:block>
																																															<xsl:copy-of select="$value-of-template_208"/>
																																														</fo:block>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:copy-of select="$value-of-template_208"/>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																												<fo:block/>
																																											</xsl:for-each>
																																										</xsl:when>
																																										<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																											<xsl:for-each select="n1:PropertyName">
																																												<xsl:variable name="value-of-template_209">
																																													<xsl:apply-templates/>
																																												</xsl:variable>
																																												<xsl:choose>
																																													<xsl:when test="contains(string($value-of-template_209),'&#x200B;')">
																																														<fo:block>
																																															<xsl:copy-of select="$value-of-template_209"/>
																																														</fo:block>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:copy-of select="$value-of-template_209"/>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																												<fo:block/>
																																											</xsl:for-each>
																																										</xsl:when>
																																									</xsl:choose>
																																								</fo:block>
																																							</fo:block-container>
																																						</fo:table-cell>
																																						<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" border-right-color="black" border-right-style="dotted" border-right-width="thin" padding="3" display-align="center">
																																							<fo:block-container overflow="hidden">
																																								<fo:block text-align="left">
																																									<xsl:choose>
																																										<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																											<xsl:for-each select="n1:PropertyOldValue">
																																												<xsl:variable name="value-of-template_210">
																																													<xsl:apply-templates/>
																																												</xsl:variable>
																																												<xsl:choose>
																																													<xsl:when test="contains(string($value-of-template_210),'&#x200B;')">
																																														<fo:block>
																																															<xsl:copy-of select="$value-of-template_210"/>
																																														</fo:block>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:copy-of select="$value-of-template_210"/>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																												<fo:block/>
																																											</xsl:for-each>
																																										</xsl:when>
																																										<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																											<xsl:choose>
																																												<xsl:when test="string-length(n1:PropertyOldValue) &gt; 0">
																																													<xsl:for-each select="n1:PropertyOldValue">
																																														<xsl:variable name="value-of-template_211">
																																															<xsl:apply-templates/>
																																														</xsl:variable>
																																														<xsl:choose>
																																															<xsl:when test="contains(string($value-of-template_211),'&#x200B;')">
																																																<fo:block>
																																																	<xsl:copy-of select="$value-of-template_211"/>
																																																</fo:block>
																																															</xsl:when>
																																															<xsl:otherwise>
																																																<fo:inline>
																																																	<xsl:copy-of select="$value-of-template_211"/>
																																																</fo:inline>
																																															</xsl:otherwise>
																																														</xsl:choose>
																																														<fo:block/>
																																													</xsl:for-each>
																																												</xsl:when>
																																												<xsl:otherwise>
																																													<fo:inline>
																																														<xsl:text>&#160;</xsl:text>
																																													</fo:inline>
																																												</xsl:otherwise>
																																											</xsl:choose>
																																										</xsl:when>
																																										<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																											<xsl:for-each select="n1:PropertyOldValue">
																																												<xsl:variable name="value-of-template_212">
																																													<xsl:apply-templates/>
																																												</xsl:variable>
																																												<xsl:choose>
																																													<xsl:when test="contains(string($value-of-template_212),'&#x200B;')">
																																														<fo:block>
																																															<xsl:copy-of select="$value-of-template_212"/>
																																														</fo:block>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:copy-of select="$value-of-template_212"/>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																												<fo:block/>
																																											</xsl:for-each>
																																										</xsl:when>
																																										<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																											<xsl:for-each select="n1:PropertyOldValue">
																																												<xsl:variable name="value-of-template_213">
																																													<xsl:apply-templates/>
																																												</xsl:variable>
																																												<xsl:choose>
																																													<xsl:when test="contains(string($value-of-template_213),'&#x200B;')">
																																														<fo:block>
																																															<xsl:copy-of select="$value-of-template_213"/>
																																														</fo:block>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:copy-of select="$value-of-template_213"/>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																												<fo:block/>
																																											</xsl:for-each>
																																										</xsl:when>
																																										<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																											<xsl:for-each select="n1:PropertyOldValue">
																																												<xsl:variable name="value-of-template_214">
																																													<xsl:apply-templates/>
																																												</xsl:variable>
																																												<xsl:choose>
																																													<xsl:when test="contains(string($value-of-template_214),'&#x200B;')">
																																														<fo:block>
																																															<xsl:copy-of select="$value-of-template_214"/>
																																														</fo:block>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:copy-of select="$value-of-template_214"/>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																												<fo:block/>
																																											</xsl:for-each>
																																										</xsl:when>
																																									</xsl:choose>
																																								</fo:block>
																																							</fo:block-container>
																																						</fo:table-cell>
																																						<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" border-right-color="black" border-right-style="dotted" border-right-width="thin" padding="3" display-align="center">
																																							<fo:block-container overflow="hidden">
																																								<fo:block text-align="left">
																																									<xsl:choose>
																																										<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																											<xsl:for-each select="n1:PropertyNewValue">
																																												<xsl:variable name="value-of-template_215">
																																													<xsl:apply-templates/>
																																												</xsl:variable>
																																												<xsl:choose>
																																													<xsl:when test="contains(string($value-of-template_215),'&#x200B;')">
																																														<fo:block>
																																															<xsl:copy-of select="$value-of-template_215"/>
																																														</fo:block>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:copy-of select="$value-of-template_215"/>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																												<fo:block/>
																																											</xsl:for-each>
																																										</xsl:when>
																																										<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																											<xsl:choose>
																																												<xsl:when test="string-length(n1:PropertyNewValue) &gt; 0">
																																													<xsl:for-each select="n1:PropertyNewValue">
																																														<xsl:variable name="value-of-template_216">
																																															<xsl:apply-templates/>
																																														</xsl:variable>
																																														<xsl:choose>
																																															<xsl:when test="contains(string($value-of-template_216),'&#x200B;')">
																																																<fo:block>
																																																	<xsl:copy-of select="$value-of-template_216"/>
																																																</fo:block>
																																															</xsl:when>
																																															<xsl:otherwise>
																																																<fo:inline>
																																																	<xsl:copy-of select="$value-of-template_216"/>
																																																</fo:inline>
																																															</xsl:otherwise>
																																														</xsl:choose>
																																														<fo:block/>
																																													</xsl:for-each>
																																												</xsl:when>
																																												<xsl:otherwise>
																																													<fo:inline>
																																														<xsl:text>&#160;</xsl:text>
																																													</fo:inline>
																																												</xsl:otherwise>
																																											</xsl:choose>
																																										</xsl:when>
																																										<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																											<xsl:for-each select="n1:PropertyNewValue">
																																												<xsl:variable name="value-of-template_217">
																																													<xsl:apply-templates/>
																																												</xsl:variable>
																																												<xsl:choose>
																																													<xsl:when test="contains(string($value-of-template_217),'&#x200B;')">
																																														<fo:block>
																																															<xsl:copy-of select="$value-of-template_217"/>
																																														</fo:block>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:copy-of select="$value-of-template_217"/>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																												<fo:block/>
																																											</xsl:for-each>
																																										</xsl:when>
																																										<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																											<xsl:for-each select="n1:PropertyNewValue">
																																												<xsl:variable name="value-of-template_218">
																																													<xsl:apply-templates/>
																																												</xsl:variable>
																																												<xsl:choose>
																																													<xsl:when test="contains(string($value-of-template_218),'&#x200B;')">
																																														<fo:block>
																																															<xsl:copy-of select="$value-of-template_218"/>
																																														</fo:block>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:copy-of select="$value-of-template_218"/>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																												<fo:block/>
																																											</xsl:for-each>
																																										</xsl:when>
																																										<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																											<xsl:for-each select="n1:PropertyNewValue">
																																												<xsl:variable name="value-of-template_219">
																																													<xsl:apply-templates/>
																																												</xsl:variable>
																																												<xsl:choose>
																																													<xsl:when test="contains(string($value-of-template_219),'&#x200B;')">
																																														<fo:block>
																																															<xsl:copy-of select="$value-of-template_219"/>
																																														</fo:block>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:copy-of select="$value-of-template_219"/>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																												<fo:block/>
																																											</xsl:for-each>
																																										</xsl:when>
																																									</xsl:choose>
																																								</fo:block>
																																							</fo:block-container>
																																						</fo:table-cell>
																																					</fo:table-row>
																																				</xsl:for-each>
																																			</xsl:variable>
																																			<xsl:choose>
																																				<xsl:when test="string($altova:tablerows)">
																																					<xsl:copy-of select="$altova:tablerows"/>
																																				</xsl:when>
																																				<xsl:otherwise>
																																					<fo:table-row>
																																						<fo:table-cell>
																																							<fo:block/>
																																						</fo:table-cell>
																																					</fo:table-row>
																																				</xsl:otherwise>
																																			</xsl:choose>
																																		</fo:table-body>
																																	</fo:table>
																																</fo:block>
																															</fo:block-container>
																														</fo:table-cell>
																													</fo:table-row>
																												</xsl:variable>
																												<xsl:choose>
																													<xsl:when test="string($altova:tablerows)">
																														<xsl:copy-of select="$altova:tablerows"/>
																													</xsl:when>
																													<xsl:otherwise>
																														<fo:table-row>
																															<fo:table-cell>
																																<fo:block/>
																															</fo:table-cell>
																														</fo:table-row>
																													</xsl:otherwise>
																												</xsl:choose>
																											</fo:table-body>
																										</fo:table>
																									</fo:block>
																								</fo:block-container>
																							</fo:table-cell>
																						</fo:table-row>
																					</xsl:when>
																					<xsl:otherwise/>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="string($altova:tablerows)">
																	<xsl:copy-of select="$altova:tablerows"/>
																</xsl:when>
																<xsl:otherwise>
																	<fo:table-row>
																		<fo:table-cell>
																			<fo:block/>
																		</fo:table-cell>
																	</fo:table-row>
																</xsl:otherwise>
															</xsl:choose>
														</fo:table-body>
													</fo:table>
												</xsl:if>
											</xsl:when>
											<xsl:otherwise>
												<fo:inline-container>
													<fo:block>
														<xsl:text>&#x200B;</xsl:text>
													</fo:block>
												</fo:inline-container>
												<xsl:if test="n1:ObjectsCollection">
													<fo:table table-layout="fixed" width="100%" border-spacing="0">
														<fo:table-column column-width="6cm"/>
														<fo:table-column column-width="6cm"/>
														<fo:table-column column-width="3cm"/>
														<fo:table-column column-width="2cm"/>
														<xsl:variable name="altova:CurrContextGrid_220" select="."/>
														<fo:table-header background-color="#d9f5ff" white-space-collapse="true" linefeed-treatment="treat-as-space" wrap-option="no-wrap" white-space-treatment="ignore-if-surrounding-linefeed" start-indent="0pt">
															<xsl:variable name="altova:tablerows">
																<fo:table-row>
																	<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																		<fo:block-container overflow="hidden">
																			<fo:block text-align="center">
																				<fo:inline>
																					<xsl:text>Sorce Name</xsl:text>
																				</fo:inline>
																			</fo:block>
																		</fo:block-container>
																	</fo:table-cell>
																	<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																		<fo:block-container overflow="hidden">
																			<fo:block text-align="center">
																				<fo:inline>
																					<xsl:text>Target Name</xsl:text>
																				</fo:inline>
																			</fo:block>
																		</fo:block-container>
																	</fo:table-cell>
																	<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																		<fo:block-container overflow="hidden">
																			<fo:block text-align="center">
																				<fo:inline>
																					<xsl:text>Type</xsl:text>
																				</fo:inline>
																			</fo:block>
																		</fo:block-container>
																	</fo:table-cell>
																	<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" padding="3" display-align="center">
																		<fo:block-container overflow="hidden">
																			<fo:block text-align="center">
																				<fo:inline>
																					<xsl:text>Status</xsl:text>
																				</fo:inline>
																			</fo:block>
																		</fo:block-container>
																	</fo:table-cell>
																</fo:table-row>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="string($altova:tablerows)">
																	<xsl:copy-of select="$altova:tablerows"/>
																</xsl:when>
																<xsl:otherwise>
																	<fo:table-row>
																		<fo:table-cell>
																			<fo:block/>
																		</fo:table-cell>
																	</fo:table-row>
																</xsl:otherwise>
															</xsl:choose>
														</fo:table-header>
														<fo:table-body start-indent="0pt">
															<xsl:variable name="altova:tablerows">
																<xsl:for-each select="n1:ObjectsCollection">
																	<xsl:for-each select="n1:ObjectDetails">
																		<xsl:for-each select="n1:Object">
																			<fo:table-row>
																				<fo:table-cell background-color="#ecfefa" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																					<fo:block-container overflow="hidden">
																						<fo:block text-align="left">
																							<xsl:choose>
																								<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																									<xsl:for-each select="@SourceValue">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																									<xsl:choose>
																										<xsl:when test="string-length(@SourceValue) &gt; 0">
																											<xsl:for-each select="@SourceValue">
																												<fo:inline>
																													<xsl:value-of select="string(.)"/>
																												</fo:inline>
																											</xsl:for-each>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:text>&#160;</xsl:text>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																									<xsl:for-each select="@SourceValue">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																									<xsl:for-each select="@SourceValue">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																									<xsl:for-each select="@SourceValue">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																							</xsl:choose>
																						</fo:block>
																					</fo:block-container>
																				</fo:table-cell>
																				<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																					<fo:block-container overflow="hidden">
																						<fo:block text-align="left">
																							<xsl:choose>
																								<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																									<xsl:for-each select="@TargetValue">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																									<xsl:choose>
																										<xsl:when test="string-length(@TargetValue) &gt; 0">
																											<xsl:for-each select="@TargetValue">
																												<fo:inline>
																													<xsl:value-of select="string(.)"/>
																												</fo:inline>
																											</xsl:for-each>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:text>&#160;</xsl:text>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																									<xsl:for-each select="@TargetValue">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																									<xsl:for-each select="@TargetValue">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																									<xsl:for-each select="@TargetValue">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																							</xsl:choose>
																						</fo:block>
																					</fo:block-container>
																				</fo:table-cell>
																				<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																					<fo:block-container overflow="hidden">
																						<fo:block text-align="left">
																							<xsl:choose>
																								<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																									<xsl:for-each select="@Type">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																									<xsl:choose>
																										<xsl:when test="string-length(@Type) &gt; 0">
																											<xsl:for-each select="@Type">
																												<fo:inline>
																													<xsl:value-of select="string(.)"/>
																												</fo:inline>
																											</xsl:for-each>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:text>&#160;</xsl:text>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																									<xsl:for-each select="@Type">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																									<xsl:for-each select="@Type">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																									<xsl:for-each select="@Type">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																							</xsl:choose>
																						</fo:block>
																					</fo:block-container>
																				</fo:table-cell>
																				<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																					<fo:block-container overflow="hidden">
																						<fo:block text-align="left">
																							<xsl:choose>
																								<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																									<xsl:for-each select="@Status">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																									<xsl:choose>
																										<xsl:when test="string-length(@Status) &gt; 0">
																											<xsl:for-each select="@Status">
																												<fo:inline>
																													<xsl:value-of select="string(.)"/>
																												</fo:inline>
																											</xsl:for-each>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:text>&#160;</xsl:text>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																									<xsl:for-each select="@Status">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																									<xsl:for-each select="@Status">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																									<xsl:for-each select="@Status">
																										<fo:inline>
																											<xsl:value-of select="string(.)"/>
																										</fo:inline>
																									</xsl:for-each>
																								</xsl:when>
																							</xsl:choose>
																						</fo:block>
																					</fo:block-container>
																				</fo:table-cell>
																			</fo:table-row>
																			<xsl:for-each select="n1:PropertiesCollection">
																				<xsl:choose>
																					<xsl:when test="count( n1:PropertyDetails ) &gt;0">
																						<fo:table-row>
																							<fo:table-cell number-columns-spanned="4" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																								<fo:block-container overflow="hidden">
																									<fo:block text-align="left">
																										<fo:inline-container>
																											<fo:block>
																												<xsl:text>&#x200B;</xsl:text>
																											</fo:block>
																										</fo:inline-container>
																										<fo:table font-size="xx-small" table-layout="fixed" width="100%" border-spacing="0">
																											<fo:table-column column-width="3cm"/>
																											<fo:table-column column-width="13cm"/>
																											<xsl:variable name="altova:CurrContextGrid_241" select="."/>
																											<fo:table-body start-indent="0pt">
																												<xsl:variable name="altova:tablerows">
																													<fo:table-row>
																														<fo:table-cell padding="0" display-align="center">
																															<fo:block-container overflow="hidden">
																																<fo:block text-align="left"/>
																															</fo:block-container>
																														</fo:table-cell>
																														<fo:table-cell padding="0" display-align="center">
																															<fo:block-container overflow="hidden">
																																<fo:block text-align="left">
																																	<fo:inline-container>
																																		<fo:block>
																																			<xsl:text>&#x200B;</xsl:text>
																																		</fo:block>
																																	</fo:inline-container>
																																	<xsl:if test="n1:PropertyDetails">
																																		<fo:table font-style="italic" width="12cm" table-layout="fixed" border-spacing="0">
																																			<fo:table-column column-width="4cm"/>
																																			<fo:table-column column-width="4cm"/>
																																			<fo:table-column column-width="4cm"/>
																																			<xsl:variable name="altova:CurrContextGrid_242" select="."/>
																																			<fo:table-body start-indent="0pt">
																																				<xsl:variable name="altova:tablerows">
																																					<xsl:for-each select="n1:PropertyDetails">
																																						<fo:table-row>
																																							<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" border-left-color="black" border-left-style="dotted" border-left-width="thin" border-right-color="black" border-right-style="dotted" border-right-width="thin" border-top-color="black" border-top-style="dotted" border-top-width="thin" padding="3" display-align="center">
																																								<fo:block-container overflow="hidden">
																																									<fo:block text-align="left">
																																										<xsl:choose>
																																											<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																												<xsl:for-each select="n1:PropertyName">
																																													<xsl:variable name="value-of-template_243">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_243),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_243"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_243"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																												<xsl:choose>
																																													<xsl:when test="string-length(n1:PropertyName) &gt; 0">
																																														<xsl:for-each select="n1:PropertyName">
																																															<xsl:variable name="value-of-template_244">
																																																<xsl:apply-templates/>
																																															</xsl:variable>
																																															<xsl:choose>
																																																<xsl:when test="contains(string($value-of-template_244),'&#x200B;')">
																																																	<fo:block>
																																																		<xsl:copy-of select="$value-of-template_244"/>
																																																	</fo:block>
																																																</xsl:when>
																																																<xsl:otherwise>
																																																	<fo:inline>
																																																		<xsl:copy-of select="$value-of-template_244"/>
																																																	</fo:inline>
																																																</xsl:otherwise>
																																															</xsl:choose>
																																															<fo:block/>
																																														</xsl:for-each>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:text>&#160;</xsl:text>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																												<xsl:for-each select="n1:PropertyName">
																																													<xsl:variable name="value-of-template_245">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_245),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_245"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_245"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																												<xsl:for-each select="n1:PropertyName">
																																													<xsl:variable name="value-of-template_246">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_246),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_246"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_246"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																												<xsl:for-each select="n1:PropertyName">
																																													<xsl:variable name="value-of-template_247">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_247),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_247"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_247"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																										</xsl:choose>
																																									</fo:block>
																																								</fo:block-container>
																																							</fo:table-cell>
																																							<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" border-right-color="black" border-right-style="dotted" border-right-width="thin" border-top-color="black" border-top-style="dotted" border-top-width="thin" padding="3" display-align="center">
																																								<fo:block-container overflow="hidden">
																																									<fo:block text-align="left">
																																										<xsl:choose>
																																											<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																												<xsl:for-each select="n1:PropertyOldValue">
																																													<xsl:variable name="value-of-template_248">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_248),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_248"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_248"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																												<xsl:choose>
																																													<xsl:when test="string-length(n1:PropertyOldValue) &gt; 0">
																																														<xsl:for-each select="n1:PropertyOldValue">
																																															<xsl:variable name="value-of-template_249">
																																																<xsl:apply-templates/>
																																															</xsl:variable>
																																															<xsl:choose>
																																																<xsl:when test="contains(string($value-of-template_249),'&#x200B;')">
																																																	<fo:block>
																																																		<xsl:copy-of select="$value-of-template_249"/>
																																																	</fo:block>
																																																</xsl:when>
																																																<xsl:otherwise>
																																																	<fo:inline>
																																																		<xsl:copy-of select="$value-of-template_249"/>
																																																	</fo:inline>
																																																</xsl:otherwise>
																																															</xsl:choose>
																																															<fo:block/>
																																														</xsl:for-each>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:text>&#160;</xsl:text>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																												<xsl:for-each select="n1:PropertyOldValue">
																																													<xsl:variable name="value-of-template_250">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_250),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_250"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_250"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																												<xsl:for-each select="n1:PropertyOldValue">
																																													<xsl:variable name="value-of-template_251">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_251),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_251"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_251"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																												<xsl:for-each select="n1:PropertyOldValue">
																																													<xsl:variable name="value-of-template_252">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_252),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_252"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_252"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																										</xsl:choose>
																																									</fo:block>
																																								</fo:block-container>
																																							</fo:table-cell>
																																							<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" border-right-color="black" border-right-style="dotted" border-right-width="thin" border-top-color="black" border-top-style="dotted" border-top-width="thin" padding="3" display-align="center">
																																								<fo:block-container overflow="hidden">
																																									<fo:block text-align="left">
																																										<xsl:choose>
																																											<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																																												<xsl:for-each select="n1:PropertyNewValue">
																																													<xsl:variable name="value-of-template_253">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_253),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_253"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_253"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																																												<xsl:choose>
																																													<xsl:when test="string-length(n1:PropertyNewValue) &gt; 0">
																																														<xsl:for-each select="n1:PropertyNewValue">
																																															<xsl:variable name="value-of-template_254">
																																																<xsl:apply-templates/>
																																															</xsl:variable>
																																															<xsl:choose>
																																																<xsl:when test="contains(string($value-of-template_254),'&#x200B;')">
																																																	<fo:block>
																																																		<xsl:copy-of select="$value-of-template_254"/>
																																																	</fo:block>
																																																</xsl:when>
																																																<xsl:otherwise>
																																																	<fo:inline>
																																																		<xsl:copy-of select="$value-of-template_254"/>
																																																	</fo:inline>
																																																</xsl:otherwise>
																																															</xsl:choose>
																																															<fo:block/>
																																														</xsl:for-each>
																																													</xsl:when>
																																													<xsl:otherwise>
																																														<fo:inline>
																																															<xsl:text>&#160;</xsl:text>
																																														</fo:inline>
																																													</xsl:otherwise>
																																												</xsl:choose>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																																												<xsl:for-each select="n1:PropertyNewValue">
																																													<xsl:variable name="value-of-template_255">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_255),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_255"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_255"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																																												<xsl:for-each select="n1:PropertyNewValue">
																																													<xsl:variable name="value-of-template_256">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_256),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_256"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_256"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																											<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																																												<xsl:for-each select="n1:PropertyNewValue">
																																													<xsl:variable name="value-of-template_257">
																																														<xsl:apply-templates/>
																																													</xsl:variable>
																																													<xsl:choose>
																																														<xsl:when test="contains(string($value-of-template_257),'&#x200B;')">
																																															<fo:block>
																																																<xsl:copy-of select="$value-of-template_257"/>
																																															</fo:block>
																																														</xsl:when>
																																														<xsl:otherwise>
																																															<fo:inline>
																																																<xsl:copy-of select="$value-of-template_257"/>
																																															</fo:inline>
																																														</xsl:otherwise>
																																													</xsl:choose>
																																													<fo:block/>
																																												</xsl:for-each>
																																											</xsl:when>
																																										</xsl:choose>
																																									</fo:block>
																																								</fo:block-container>
																																							</fo:table-cell>
																																						</fo:table-row>
																																					</xsl:for-each>
																																				</xsl:variable>
																																				<xsl:choose>
																																					<xsl:when test="string($altova:tablerows)">
																																						<xsl:copy-of select="$altova:tablerows"/>
																																					</xsl:when>
																																					<xsl:otherwise>
																																						<fo:table-row>
																																							<fo:table-cell>
																																								<fo:block/>
																																							</fo:table-cell>
																																						</fo:table-row>
																																					</xsl:otherwise>
																																				</xsl:choose>
																																			</fo:table-body>
																																		</fo:table>
																																	</xsl:if>
																																</fo:block>
																															</fo:block-container>
																														</fo:table-cell>
																													</fo:table-row>
																												</xsl:variable>
																												<xsl:choose>
																													<xsl:when test="string($altova:tablerows)">
																														<xsl:copy-of select="$altova:tablerows"/>
																													</xsl:when>
																													<xsl:otherwise>
																														<fo:table-row>
																															<fo:table-cell>
																																<fo:block/>
																															</fo:table-cell>
																														</fo:table-row>
																													</xsl:otherwise>
																												</xsl:choose>
																											</fo:table-body>
																										</fo:table>
																									</fo:block>
																								</fo:block-container>
																							</fo:table-cell>
																						</fo:table-row>
																					</xsl:when>
																					<xsl:otherwise/>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="string($altova:tablerows)">
																	<xsl:copy-of select="$altova:tablerows"/>
																</xsl:when>
																<xsl:otherwise>
																	<fo:table-row>
																		<fo:table-cell>
																			<fo:block/>
																		</fo:table-cell>
																	</fo:table-row>
																</xsl:otherwise>
															</xsl:choose>
														</fo:table-body>
													</fo:table>
												</xsl:if>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
						<fo:block/>
					</fo:block>
					<fo:block id="SV_RefID_PageTotal"/>
				</fo:flow>
			</fo:page-sequence>
		</fo:root>
	</xsl:template>
	<xsl:template name="altova:double-backslash">
		<xsl:param name="text"/>
		<xsl:param name="text-length"/>
		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
		<xsl:choose>
			<xsl:when test="$text-after-bs-length = 0">
				<xsl:choose>
					<xsl:when test="substring($text, $text-length) = '\'">
						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$text"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
				<xsl:call-template name="altova:double-backslash">
					<xsl:with-param name="text" select="$text-after-bs"/>
					<xsl:with-param name="text-length" select="$text-after-bs-length"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:MakeValueAbsoluteIfPixels">
		<xsl:param name="sValue"/>
		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>
		<xsl:choose>
			<xsl:when test="$sBeforePx">
				<xsl:variable name="nLengthOfInteger">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="$sBeforePx"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>
				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>
				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:nPxPerIn)"/>
				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>
				<xsl:variable name="sRest">
					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$sValue"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">
		<xsl:param name="sText"/>
		<xsl:variable name="sLen" select="string-length($sText)"/>
		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>
		<xsl:choose>
			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">
				<xsl:variable name="nResultOfRest">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="$nResultOfRest + 1"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>0</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>
