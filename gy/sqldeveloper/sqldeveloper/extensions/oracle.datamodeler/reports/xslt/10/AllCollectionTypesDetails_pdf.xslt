<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2013 (x64) - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="osdm_a_ct" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="altova altovaext clitype fn iso4217 ix java link n1 sps xbrldi xbrli xlink xs xsd xsi">
	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>
	<xsl:param name="SV_OutputFormat" select="'PDF'"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="fo:layout-master-set">
		<fo:layout-master-set>
			<fo:simple-page-master master-name="page-master-0-even" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-odd" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-even-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-odd-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-even-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-odd-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:page-sequence-master master-name="page-master-0">
				<fo:repeatable-page-master-alternatives>
					<fo:conditional-page-master-reference master-reference="page-master-0-even-first" odd-or-even="even" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-odd-first" odd-or-even="odd" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-even-last" odd-or-even="even" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-odd-last" odd-or-even="odd" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-even" odd-or-even="even"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-odd" odd-or-even="odd"/>
				</fo:repeatable-page-master-alternatives>
			</fo:page-sequence-master>
			<fo:simple-page-master master-name="page-master-1-even" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-1-odd" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-1-even-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-1-odd-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-1-even-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-1-odd-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:page-sequence-master master-name="page-master-1">
				<fo:repeatable-page-master-alternatives>
					<fo:conditional-page-master-reference master-reference="page-master-1-even-first" odd-or-even="even" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-1-odd-first" odd-or-even="odd" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-1-even-last" odd-or-even="even" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-1-odd-last" odd-or-even="odd" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-1-even" odd-or-even="even"/>
					<fo:conditional-page-master-reference master-reference="page-master-1-odd" odd-or-even="odd"/>
				</fo:repeatable-page-master-alternatives>
			</fo:page-sequence-master>
		</fo:layout-master-set>
	</xsl:variable>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:template match="/">
		<fo:root>
			<xsl:copy-of select="$fo:layout-master-set"/>
			<fo:declarations>
				<x:xmpmeta xmlns:x="adobe:ns:meta/">
					<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
						<rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
							<xmp:CreatorTool>Altova StyleVision Enterprise Edition 2013 (x64) (http://www.altova.com)</xmp:CreatorTool>
						</rdf:Description>
					</rdf:RDF>
				</x:xmpmeta>
			</fo:declarations>
			<fo:bookmark-tree>
				<xsl:for-each select="$XML">
					<xsl:for-each select="n1:root">
						<xsl:for-each select="n1:CTCollection">
							<xsl:for-each select="n1:CTDetails">
								<xsl:for-each select="n1:CTName">
									<fo:bookmark>
										<xsl:choose>
											<xsl:when test="starts-with(string(concat(&apos;#&apos;,.)),'#')">
												<xsl:attribute name="internal-destination">
													<xsl:value-of select="substring(string(concat(&apos;#&apos;,.)),2)"/>
												</xsl:attribute>
											</xsl:when>
											<xsl:otherwise>
												<xsl:message terminate="yes">
													<xsl:value-of select="concat('Error: External bookmark destinations (',string(concat(&apos;#&apos;,.)),') are not supported by FOP 0.93/1.0!')"/>
												</xsl:message>
												<xsl:attribute name="external-destination">
													<xsl:value-of select="string(concat(&apos;#&apos;,.))"/>
												</xsl:attribute>
											</xsl:otherwise>
										</xsl:choose>
										<fo:bookmark-title>
											<xsl:variable name="altova:bookmark-title">
												<xsl:variable name="value-of-template_2">
													<xsl:apply-templates/>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="contains(string($value-of-template_2),'&#x200B;')">
														<fo:block>
															<xsl:copy-of select="$value-of-template_2"/>
														</fo:block>
													</xsl:when>
													<xsl:otherwise>
														<fo:inline>
															<xsl:copy-of select="$value-of-template_2"/>
														</fo:inline>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:value-of select="string($altova:bookmark-title)"/>
										</fo:bookmark-title>
									</fo:bookmark>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</fo:bookmark-tree>
			<fo:page-sequence force-page-count="no-force" master-reference="page-master-0" initial-page-number="auto" format="1">
				<fo:static-content flow-name="odd-page-footer">
					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">
						<fo:block font-family="Tahoma" font-size="xx-small">
							<fo:inline-container>
								<fo:block>
									<xsl:text>&#x200B;</xsl:text>
								</fo:block>
							</fo:inline-container>
							<fo:table width="25cm" table-layout="fixed" border-spacing="0">
								<fo:table-column column-width="18cm"/>
								<fo:table-column column-width="7cm"/>
								<xsl:variable name="altova:CurrContextGrid_3" select="."/>
								<fo:table-body start-indent="0pt">
									<xsl:variable name="altova:tablerows">
										<fo:table-row>
											<fo:table-cell font-size="xx-small" padding="3" display-align="center">
												<fo:block-container overflow="hidden">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Oracle Data Modeler</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:block-container>
											</fo:table-cell>
											<fo:table-cell font-size="xx-small" padding="3" display-align="center">
												<fo:block-container overflow="hidden">
													<fo:block text-align="right">
														<fo:inline>
															<xsl:text>Page: </xsl:text>
														</fo:inline>
														<fo:page-number/>
														<fo:inline>
															<xsl:text> / </xsl:text>
														</fo:inline>
														<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>
													</fo:block>
												</fo:block-container>
											</fo:table-cell>
										</fo:table-row>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="string($altova:tablerows)">
											<xsl:copy-of select="$altova:tablerows"/>
										</xsl:when>
										<xsl:otherwise>
											<fo:table-row>
												<fo:table-cell>
													<fo:block/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-body>
							</fo:table>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:static-content flow-name="even-page-footer">
					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">
						<fo:block font-family="Tahoma" font-size="xx-small">
							<fo:inline-container>
								<fo:block>
									<xsl:text>&#x200B;</xsl:text>
								</fo:block>
							</fo:inline-container>
							<fo:table width="25cm" table-layout="fixed" border-spacing="0">
								<fo:table-column column-width="18cm"/>
								<fo:table-column column-width="7cm"/>
								<xsl:variable name="altova:CurrContextGrid_3" select="."/>
								<fo:table-body start-indent="0pt">
									<xsl:variable name="altova:tablerows">
										<fo:table-row>
											<fo:table-cell font-size="xx-small" padding="3" display-align="center">
												<fo:block-container overflow="hidden">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Oracle Data Modeler</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:block-container>
											</fo:table-cell>
											<fo:table-cell font-size="xx-small" padding="3" display-align="center">
												<fo:block-container overflow="hidden">
													<fo:block text-align="right">
														<fo:inline>
															<xsl:text>Page: </xsl:text>
														</fo:inline>
														<fo:page-number/>
														<fo:inline>
															<xsl:text> / </xsl:text>
														</fo:inline>
														<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>
													</fo:block>
												</fo:block-container>
											</fo:table-cell>
										</fo:table-row>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="string($altova:tablerows)">
											<xsl:copy-of select="$altova:tablerows"/>
										</xsl:when>
										<xsl:otherwise>
											<fo:table-row>
												<fo:table-cell>
													<fo:block/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-body>
							</fo:table>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:flow flow-name="xsl-region-body">
					<fo:block font-family="Tahoma" font-size="xx-small" empty-cells="show" text-align="left" display-align="before">
						<xsl:for-each select="$XML">
							<xsl:for-each select="n1:root">
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<fo:block margin-right="100% - 100%" text-align="center" space-before="0" space-after="0" margin="0pt">
									<xsl:for-each select="n1:ReportCaption">
										<xsl:variable name="value-of-template_4">
											<xsl:apply-templates/>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="contains(string($value-of-template_4),'&#x200B;')">
												<fo:block font-size="medium" font-weight="bold">
													<xsl:copy-of select="$value-of-template_4"/>
												</fo:block>
											</xsl:when>
											<xsl:otherwise>
												<fo:inline font-size="medium" font-weight="bold">
													<xsl:copy-of select="$value-of-template_4"/>
												</fo:inline>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</fo:block>
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<fo:table width="20cm" table-layout="fixed" border-spacing="0">
									<fo:table-column column-width="4cm"/>
									<fo:table-column column-width="16cm"/>
									<xsl:variable name="altova:CurrContextGrid_5" select="."/>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<fo:inline>
																<xsl:text>Design Name</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<xsl:choose>
																<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																	<xsl:for-each select="n1:DesignName">
																		<xsl:variable name="value-of-template_6">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_6),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_6"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_6"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																	<xsl:choose>
																		<xsl:when test="string-length(n1:DesignName) &gt; 0">
																			<xsl:for-each select="n1:DesignName">
																				<xsl:variable name="value-of-template_7">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_7),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_7"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_7"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:text>&#160;</xsl:text>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																	<xsl:for-each select="n1:DesignName">
																		<xsl:variable name="value-of-template_8">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_8),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_8"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_8"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																	<xsl:for-each select="n1:DesignName">
																		<xsl:variable name="value-of-template_9">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_9),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_9"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_9"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																	<xsl:for-each select="n1:DesignName">
																		<xsl:variable name="value-of-template_10">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_10),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_10"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_10"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
															</xsl:choose>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<fo:inline>
																<xsl:text>Version Date</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<xsl:choose>
																<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																	<xsl:for-each select="n1:VersionDate">
																		<xsl:variable name="value-of-template_11">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_11),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_11"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_11"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																	<xsl:choose>
																		<xsl:when test="string-length(n1:VersionDate) &gt; 0">
																			<xsl:for-each select="n1:VersionDate">
																				<xsl:variable name="value-of-template_12">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_12),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_12"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_12"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:text>&#160;</xsl:text>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																	<xsl:for-each select="n1:VersionDate">
																		<xsl:variable name="value-of-template_13">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_13),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_13"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_13"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																	<xsl:for-each select="n1:VersionDate">
																		<xsl:variable name="value-of-template_14">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_14),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_14"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_14"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																	<xsl:for-each select="n1:VersionDate">
																		<xsl:variable name="value-of-template_15">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_15),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_15"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_15"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
															</xsl:choose>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<fo:inline>
																<xsl:text>Version Comment</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<xsl:choose>
																<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																	<xsl:for-each select="n1:VersionComment">
																		<xsl:for-each select="n1:VersionCommentDetails">
																			<xsl:for-each select="n1:VersionCommentRow">
																				<xsl:variable name="value-of-template_16">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_16),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_16"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_16"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																				<fo:block/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																	<xsl:choose>
																		<xsl:when test="count(n1:VersionComment) &gt; 0">
																			<xsl:for-each select="n1:VersionComment">
																				<xsl:for-each select="n1:VersionCommentDetails">
																					<xsl:for-each select="n1:VersionCommentRow">
																						<xsl:variable name="value-of-template_17">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_17),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_17"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_17"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																						<fo:block/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:text>&#160;</xsl:text>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																	<xsl:choose>
																		<xsl:when test="count(n1:VersionComment/n1:VersionCommentDetails/n1:VersionCommentRow) &gt; 0">
																			<xsl:for-each select="n1:VersionComment">
																				<xsl:for-each select="n1:VersionCommentDetails">
																					<xsl:for-each select="n1:VersionCommentRow">
																						<xsl:variable name="value-of-template_18">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_18),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_18"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_18"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																						<fo:block/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:otherwise/>
																	</xsl:choose>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																	<xsl:for-each select="n1:VersionComment">
																		<xsl:for-each select="n1:VersionCommentDetails">
																			<xsl:for-each select="n1:VersionCommentRow">
																				<xsl:variable name="value-of-template_19">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_19),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_19"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_19"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																				<fo:block/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																	<xsl:for-each select="n1:VersionComment">
																		<xsl:for-each select="n1:VersionCommentDetails">
																			<xsl:for-each select="n1:VersionCommentRow">
																				<xsl:variable name="value-of-template_20">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_20),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_20"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_20"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																				<fo:block/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
															</xsl:choose>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<fo:inline>
																<xsl:text>Model Name</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<xsl:choose>
																<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																	<xsl:for-each select="n1:ModelName">
																		<xsl:variable name="value-of-template_21">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_21),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_21"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_21"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																	<xsl:choose>
																		<xsl:when test="string-length(n1:ModelName) &gt; 0">
																			<xsl:for-each select="n1:ModelName">
																				<xsl:variable name="value-of-template_22">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_22),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_22"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_22"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:text>&#160;</xsl:text>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																	<xsl:for-each select="n1:ModelName">
																		<xsl:variable name="value-of-template_23">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_23),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_23"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_23"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																	<xsl:for-each select="n1:ModelName">
																		<xsl:variable name="value-of-template_24">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_24),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_24"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_24"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																	<xsl:for-each select="n1:ModelName">
																		<xsl:variable name="value-of-template_25">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_25),'&#x200B;')">
																				<fo:block>
																					<xsl:copy-of select="$value-of-template_25"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:copy-of select="$value-of-template_25"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:when>
															</xsl:choose>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows)">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
								<xsl:for-each select="n1:CTCollection">
									<xsl:for-each select="n1:CTDetails">
										<fo:block>
											<fo:leader leader-pattern="space"/>
										</fo:block>
										<fo:block break-after="page">
											<fo:leader leader-pattern="space"/>
										</fo:block>
										<fo:inline-container>
											<fo:block>
												<xsl:text>&#x200B;</xsl:text>
											</fo:block>
										</fo:inline-container>
										<fo:table width="15cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="4cm"/>
											<fo:table-column column-width="11cm"/>
											<xsl:variable name="altova:CurrContextGrid_26" select="."/>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<fo:inline>
																		<xsl:text>Collection Type Name</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell background-color="#a5e7ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<fo:inline-container>
																		<fo:block>
																			<xsl:text>&#x200B;</xsl:text>
																		</fo:block>
																	</fo:inline-container>
																	<fo:block margin-right="100% - 100%" font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																		<fo:block>
																			<xsl:attribute name="id">
																				<xsl:value-of select="n1:CTName"/>
																			</xsl:attribute>
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:CTName">
																						<xsl:variable name="value-of-template_27">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_27),'&#x200B;')">
																								<fo:block font-size="xx-small">
																									<xsl:copy-of select="$value-of-template_27"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline font-size="xx-small">
																									<xsl:copy-of select="$value-of-template_27"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:CTName) &gt; 0">
																							<xsl:for-each select="n1:CTName">
																								<xsl:variable name="value-of-template_28">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_28),'&#x200B;')">
																										<fo:block font-size="xx-small">
																											<xsl:copy-of select="$value-of-template_28"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline font-size="xx-small">
																											<xsl:copy-of select="$value-of-template_28"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:CTName">
																						<xsl:variable name="value-of-template_29">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_29),'&#x200B;')">
																								<fo:block font-size="xx-small">
																									<xsl:copy-of select="$value-of-template_29"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline font-size="xx-small">
																									<xsl:copy-of select="$value-of-template_29"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:CTName">
																						<xsl:variable name="value-of-template_30">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_30),'&#x200B;')">
																								<fo:block font-size="xx-small">
																									<xsl:copy-of select="$value-of-template_30"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline font-size="xx-small">
																									<xsl:copy-of select="$value-of-template_30"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:CTName">
																						<xsl:variable name="value-of-template_31">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_31),'&#x200B;')">
																								<fo:block font-size="xx-small">
																									<xsl:copy-of select="$value-of-template_31"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline font-size="xx-small">
																									<xsl:copy-of select="$value-of-template_31"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<fo:inline>
																		<xsl:text>Type</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:CTType">
																				<xsl:variable name="value-of-template_32">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_32),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_32"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_32"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:CTType) &gt; 0">
																					<xsl:for-each select="n1:CTType">
																						<xsl:variable name="value-of-template_33">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_33),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_33"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_33"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:CTType">
																				<xsl:variable name="value-of-template_34">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_34),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_34"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_34"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:CTType">
																				<xsl:variable name="value-of-template_35">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_35),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_35"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_35"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:CTType">
																				<xsl:variable name="value-of-template_36">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_36),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_36"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_36"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<fo:inline>
																		<xsl:text>Max Elements</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:CTMaxElements">
																				<xsl:variable name="value-of-template_37">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_37),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_37"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_37"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:CTMaxElements) &gt; 0">
																					<xsl:for-each select="n1:CTMaxElements">
																						<xsl:variable name="value-of-template_38">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_38),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_38"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_38"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:CTMaxElements">
																				<xsl:variable name="value-of-template_39">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_39),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_39"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_39"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:CTMaxElements">
																				<xsl:variable name="value-of-template_40">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_40),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_40"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_40"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:CTMaxElements">
																				<xsl:variable name="value-of-template_41">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_41),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_41"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_41"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<fo:inline>
																		<xsl:text>Data Type</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:CTDataType">
																				<xsl:variable name="value-of-template_42">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_42),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_42"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_42"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:CTDataType) &gt; 0">
																					<xsl:for-each select="n1:CTDataType">
																						<xsl:variable name="value-of-template_43">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_43),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_43"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_43"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:CTDataType">
																				<xsl:variable name="value-of-template_44">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_44),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_44"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_44"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:CTDataType">
																				<xsl:variable name="value-of-template_45">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_45),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_45"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_45"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:CTDataType">
																				<xsl:variable name="value-of-template_46">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_46),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_46"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_46"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<fo:inline>
																		<xsl:text>Data Type Kind</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:CTDataTypeKind">
																				<xsl:variable name="value-of-template_47">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_47),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_47"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_47"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:CTDataTypeKind) &gt; 0">
																					<xsl:for-each select="n1:CTDataTypeKind">
																						<xsl:variable name="value-of-template_48">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_48),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_48"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_48"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:CTDataTypeKind">
																				<xsl:variable name="value-of-template_49">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_49),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_49"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_49"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:CTDataTypeKind">
																				<xsl:variable name="value-of-template_50">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_50),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_50"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_50"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:CTDataTypeKind">
																				<xsl:variable name="value-of-template_51">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_51),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_51"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_51"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<fo:inline>
																		<xsl:text>Domain Name</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:CTDomainName">
																				<xsl:variable name="value-of-template_52">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_52),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_52"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_52"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:CTDomainName) &gt; 0">
																					<xsl:for-each select="n1:CTDomainName">
																						<xsl:variable name="value-of-template_53">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_53),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_53"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_53"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:CTDomainName">
																				<xsl:variable name="value-of-template_54">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_54),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_54"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_54"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:CTDomainName">
																				<xsl:variable name="value-of-template_55">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_55),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_55"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_55"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:CTDomainName">
																				<xsl:variable name="value-of-template_56">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_56),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_56"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_56"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
										<fo:inline>
											<xsl:text>&#160;</xsl:text>
										</fo:inline>
										<xsl:if test="count( n1:DescriptionNotes )">
											<fo:block>
												<fo:leader leader-pattern="space"/>
											</fo:block>
											<xsl:for-each select="n1:DescriptionNotes">
												<fo:inline-container>
													<fo:block>
														<xsl:text>&#x200B;</xsl:text>
													</fo:block>
												</fo:inline-container>
												<fo:table width="20cm" table-layout="fixed" border-spacing="0">
													<fo:table-column column-width="4cm"/>
													<fo:table-column column-width="16cm"/>
													<xsl:variable name="altova:CurrContextGrid_57" select="."/>
													<fo:table-body start-indent="0pt">
														<xsl:variable name="altova:tablerows">
															<fo:table-row>
																<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<fo:inline>
																				<xsl:text>Description</xsl:text>
																			</fo:inline>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:Description">
																						<xsl:for-each select="n1:DescriptionDetails">
																							<xsl:for-each select="n1:DescriptionRow">
																								<xsl:variable name="value-of-template_58">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_58),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_58"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_58"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="count(n1:Description/n1:DescriptionDetails/n1:DescriptionRow) &gt; 0">
																							<xsl:for-each select="n1:Description">
																								<xsl:for-each select="n1:DescriptionDetails">
																									<xsl:for-each select="n1:DescriptionRow">
																										<xsl:variable name="value-of-template_59">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_59),'&#x200B;')">
																												<fo:block>
																													<xsl:copy-of select="$value-of-template_59"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:copy-of select="$value-of-template_59"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																										<fo:block/>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:choose>
																						<xsl:when test="count(n1:Description/n1:DescriptionDetails/n1:DescriptionRow) &gt; 0">
																							<xsl:for-each select="n1:Description">
																								<xsl:for-each select="n1:DescriptionDetails">
																									<xsl:for-each select="n1:DescriptionRow">
																										<xsl:variable name="value-of-template_60">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_60),'&#x200B;')">
																												<fo:block>
																													<xsl:copy-of select="$value-of-template_60"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:copy-of select="$value-of-template_60"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																										<fo:block/>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise/>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:Description">
																						<xsl:for-each select="n1:DescriptionDetails">
																							<xsl:for-each select="n1:DescriptionRow">
																								<xsl:variable name="value-of-template_61">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_61),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_61"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_61"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:Description">
																						<xsl:for-each select="n1:DescriptionDetails">
																							<xsl:for-each select="n1:DescriptionRow">
																								<xsl:variable name="value-of-template_62">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_62),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_62"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_62"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
															</fo:table-row>
															<fo:table-row>
																<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<fo:inline>
																				<xsl:text>Notes</xsl:text>
																			</fo:inline>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:Notes">
																						<xsl:for-each select="n1:NotesDetails">
																							<xsl:for-each select="n1:NoteRow">
																								<xsl:variable name="value-of-template_63">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_63),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_63"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_63"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="count(n1:Notes/n1:NotesDetails/n1:NoteRow) &gt; 0">
																							<xsl:for-each select="n1:Notes">
																								<xsl:for-each select="n1:NotesDetails">
																									<xsl:for-each select="n1:NoteRow">
																										<xsl:variable name="value-of-template_64">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_64),'&#x200B;')">
																												<fo:block>
																													<xsl:copy-of select="$value-of-template_64"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:copy-of select="$value-of-template_64"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																										<fo:block/>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:choose>
																						<xsl:when test="count(n1:Notes/n1:NotesDetails/n1:NoteRow) &gt; 0">
																							<xsl:for-each select="n1:Notes">
																								<xsl:for-each select="n1:NotesDetails">
																									<xsl:for-each select="n1:NoteRow">
																										<xsl:variable name="value-of-template_65">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_65),'&#x200B;')">
																												<fo:block>
																													<xsl:copy-of select="$value-of-template_65"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:copy-of select="$value-of-template_65"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																										<fo:block/>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise/>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:Notes">
																						<xsl:for-each select="n1:NotesDetails">
																							<xsl:for-each select="n1:NoteRow">
																								<xsl:variable name="value-of-template_66">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_66),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_66"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_66"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:Notes">
																						<xsl:for-each select="n1:NotesDetails">
																							<xsl:for-each select="n1:NoteRow">
																								<xsl:variable name="value-of-template_67">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_67),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_67"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_67"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
															</fo:table-row>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="string($altova:tablerows)">
																<xsl:copy-of select="$altova:tablerows"/>
															</xsl:when>
															<xsl:otherwise>
																<fo:table-row>
																	<fo:table-cell>
																		<fo:block/>
																	</fo:table-cell>
																</fo:table-row>
															</xsl:otherwise>
														</xsl:choose>
													</fo:table-body>
												</fo:table>
											</xsl:for-each>
										</xsl:if>
										<xsl:if test="count( n1:TablesCollection )">
											<fo:block>
												<fo:leader leader-pattern="space"/>
											</fo:block>
											<fo:inline font-size="xx-small" font-style="italic">
												<xsl:text>Used In Tables</xsl:text>
											</fo:inline>
											<fo:inline-container>
												<fo:block>
													<xsl:text>&#x200B;</xsl:text>
												</fo:block>
											</fo:inline-container>
											<xsl:if test="n1:TablesCollection">
												<fo:table width="25cm" table-layout="fixed" border-spacing="0">
													<fo:table-column column-width="8cm"/>
													<fo:table-column column-width="8.500cm"/>
													<fo:table-column column-width="8.500cm"/>
													<xsl:variable name="altova:CurrContextGrid_68" select="."/>
													<fo:table-header background-color="#d9f5ff" start-indent="0pt">
														<xsl:variable name="altova:tablerows">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<fo:inline>
																				<xsl:text>Model Name</xsl:text>
																			</fo:inline>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<fo:inline>
																				<xsl:text>Table Name</xsl:text>
																			</fo:inline>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<fo:inline>
																				<xsl:text>Column Name</xsl:text>
																			</fo:inline>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
															</fo:table-row>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="string($altova:tablerows)">
																<xsl:copy-of select="$altova:tablerows"/>
															</xsl:when>
															<xsl:otherwise>
																<fo:table-row>
																	<fo:table-cell>
																		<fo:block/>
																	</fo:table-cell>
																</fo:table-row>
															</xsl:otherwise>
														</xsl:choose>
													</fo:table-header>
													<fo:table-body start-indent="0pt">
														<xsl:variable name="altova:tablerows">
															<xsl:for-each select="n1:TablesCollection">
																<xsl:for-each select="n1:TableDetails">
																	<fo:table-row>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="left">
																					<xsl:choose>
																						<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																							<xsl:for-each select="n1:ModelName">
																								<xsl:variable name="value-of-template_69">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_69),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_69"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_69"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																							<xsl:choose>
																								<xsl:when test="string-length(n1:ModelName) &gt; 0">
																									<xsl:for-each select="n1:ModelName">
																										<xsl:variable name="value-of-template_70">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_70),'&#x200B;')">
																												<fo:block>
																													<xsl:copy-of select="$value-of-template_70"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:copy-of select="$value-of-template_70"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:text>&#160;</xsl:text>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																							<xsl:for-each select="n1:ModelName">
																								<xsl:variable name="value-of-template_71">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_71),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_71"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_71"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																							<xsl:for-each select="n1:ModelName">
																								<xsl:variable name="value-of-template_72">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_72),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_72"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_72"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																							<xsl:for-each select="n1:ModelName">
																								<xsl:variable name="value-of-template_73">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_73),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_73"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_73"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																					</xsl:choose>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="left">
																					<xsl:choose>
																						<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																							<xsl:for-each select="n1:TableName">
																								<xsl:variable name="value-of-template_74">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_74),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_74"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_74"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																							<xsl:choose>
																								<xsl:when test="string-length(n1:TableName) &gt; 0">
																									<xsl:for-each select="n1:TableName">
																										<xsl:variable name="value-of-template_75">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_75),'&#x200B;')">
																												<fo:block>
																													<xsl:copy-of select="$value-of-template_75"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:copy-of select="$value-of-template_75"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:text>&#160;</xsl:text>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																							<xsl:for-each select="n1:TableName">
																								<xsl:variable name="value-of-template_76">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_76),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_76"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_76"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																							<xsl:for-each select="n1:TableName">
																								<xsl:variable name="value-of-template_77">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_77),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_77"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_77"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																							<xsl:for-each select="n1:TableName">
																								<xsl:variable name="value-of-template_78">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_78),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_78"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_78"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																					</xsl:choose>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="left">
																					<xsl:choose>
																						<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																							<xsl:for-each select="n1:ColumnName">
																								<xsl:variable name="value-of-template_79">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_79),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_79"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_79"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																							<xsl:choose>
																								<xsl:when test="string-length(n1:ColumnName) &gt; 0">
																									<xsl:for-each select="n1:ColumnName">
																										<xsl:variable name="value-of-template_80">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_80),'&#x200B;')">
																												<fo:block>
																													<xsl:copy-of select="$value-of-template_80"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:copy-of select="$value-of-template_80"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:text>&#160;</xsl:text>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																							<xsl:for-each select="n1:ColumnName">
																								<xsl:variable name="value-of-template_81">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_81),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_81"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_81"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																							<xsl:for-each select="n1:ColumnName">
																								<xsl:variable name="value-of-template_82">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_82),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_82"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_82"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																							<xsl:for-each select="n1:ColumnName">
																								<xsl:variable name="value-of-template_83">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_83),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_83"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_83"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																					</xsl:choose>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																	</fo:table-row>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="string($altova:tablerows)">
																<xsl:copy-of select="$altova:tablerows"/>
															</xsl:when>
															<xsl:otherwise>
																<fo:table-row>
																	<fo:table-cell>
																		<fo:block/>
																	</fo:table-cell>
																</fo:table-row>
															</xsl:otherwise>
														</xsl:choose>
													</fo:table-body>
												</fo:table>
											</xsl:if>
										</xsl:if>
										<xsl:if test="count( n1:EntitiesCollection )">
											<fo:block>
												<fo:leader leader-pattern="space"/>
											</fo:block>
											<fo:inline font-size="xx-small" font-style="italic">
												<xsl:text>Used In Entities</xsl:text>
											</fo:inline>
											<fo:inline-container>
												<fo:block>
													<xsl:text>&#x200B;</xsl:text>
												</fo:block>
											</fo:inline-container>
											<xsl:if test="n1:EntitiesCollection">
												<fo:table width="25cm" table-layout="fixed" border-spacing="0">
													<fo:table-column column-width="12.500cm"/>
													<fo:table-column column-width="12.500cm"/>
													<xsl:variable name="altova:CurrContextGrid_84" select="."/>
													<fo:table-header background-color="#d9f5ff" start-indent="0pt">
														<xsl:variable name="altova:tablerows">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<fo:inline>
																				<xsl:text>Entity Name</xsl:text>
																			</fo:inline>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block-container overflow="hidden">
																		<fo:block text-align="center">
																			<fo:inline>
																				<xsl:text>Attribute Name</xsl:text>
																			</fo:inline>
																		</fo:block>
																	</fo:block-container>
																</fo:table-cell>
															</fo:table-row>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="string($altova:tablerows)">
																<xsl:copy-of select="$altova:tablerows"/>
															</xsl:when>
															<xsl:otherwise>
																<fo:table-row>
																	<fo:table-cell>
																		<fo:block/>
																	</fo:table-cell>
																</fo:table-row>
															</xsl:otherwise>
														</xsl:choose>
													</fo:table-header>
													<fo:table-body start-indent="0pt">
														<xsl:variable name="altova:tablerows">
															<xsl:for-each select="n1:EntitiesCollection">
																<xsl:for-each select="n1:EntityDetails">
																	<fo:table-row>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="left">
																					<xsl:choose>
																						<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																							<xsl:for-each select="n1:EntityName">
																								<xsl:variable name="value-of-template_85">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_85),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_85"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_85"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																							<xsl:choose>
																								<xsl:when test="string-length(n1:EntityName) &gt; 0">
																									<xsl:for-each select="n1:EntityName">
																										<xsl:variable name="value-of-template_86">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_86),'&#x200B;')">
																												<fo:block>
																													<xsl:copy-of select="$value-of-template_86"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:copy-of select="$value-of-template_86"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:text>&#160;</xsl:text>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																							<xsl:for-each select="n1:EntityName">
																								<xsl:variable name="value-of-template_87">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_87),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_87"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_87"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																							<xsl:for-each select="n1:EntityName">
																								<xsl:variable name="value-of-template_88">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_88),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_88"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_88"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																							<xsl:for-each select="n1:EntityName">
																								<xsl:variable name="value-of-template_89">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_89),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_89"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_89"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																					</xsl:choose>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																			<fo:block-container overflow="hidden">
																				<fo:block text-align="left">
																					<xsl:choose>
																						<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																							<xsl:for-each select="n1:AttributeName">
																								<xsl:variable name="value-of-template_90">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_90),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_90"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_90"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																							<xsl:choose>
																								<xsl:when test="string-length(n1:AttributeName) &gt; 0">
																									<xsl:for-each select="n1:AttributeName">
																										<xsl:variable name="value-of-template_91">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_91),'&#x200B;')">
																												<fo:block>
																													<xsl:copy-of select="$value-of-template_91"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:copy-of select="$value-of-template_91"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																									</xsl:for-each>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:text>&#160;</xsl:text>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																							<xsl:for-each select="n1:AttributeName">
																								<xsl:variable name="value-of-template_92">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_92),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_92"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_92"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																							<xsl:for-each select="n1:AttributeName">
																								<xsl:variable name="value-of-template_93">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_93),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_93"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_93"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																							<xsl:for-each select="n1:AttributeName">
																								<xsl:variable name="value-of-template_94">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_94),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_94"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_94"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																					</xsl:choose>
																				</fo:block>
																			</fo:block-container>
																		</fo:table-cell>
																	</fo:table-row>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="string($altova:tablerows)">
																<xsl:copy-of select="$altova:tablerows"/>
															</xsl:when>
															<xsl:otherwise>
																<fo:table-row>
																	<fo:table-cell>
																		<fo:block/>
																	</fo:table-cell>
																</fo:table-row>
															</xsl:otherwise>
														</xsl:choose>
													</fo:table-body>
												</fo:table>
											</xsl:if>
										</xsl:if>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</fo:block>
					<fo:block id="SV_RefID_PageTotal"/>
				</fo:flow>
			</fo:page-sequence>
		</fo:root>
	</xsl:template>
	<xsl:template name="altova:double-backslash">
		<xsl:param name="text"/>
		<xsl:param name="text-length"/>
		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
		<xsl:choose>
			<xsl:when test="$text-after-bs-length = 0">
				<xsl:choose>
					<xsl:when test="substring($text, $text-length) = '\'">
						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$text"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
				<xsl:call-template name="altova:double-backslash">
					<xsl:with-param name="text" select="$text-after-bs"/>
					<xsl:with-param name="text-length" select="$text-after-bs-length"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:MakeValueAbsoluteIfPixels">
		<xsl:param name="sValue"/>
		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>
		<xsl:choose>
			<xsl:when test="$sBeforePx">
				<xsl:variable name="nLengthOfInteger">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="$sBeforePx"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>
				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>
				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:nPxPerIn)"/>
				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>
				<xsl:variable name="sRest">
					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$sValue"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">
		<xsl:param name="sText"/>
		<xsl:variable name="sLen" select="string-length($sText)"/>
		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>
		<xsl:choose>
			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">
				<xsl:variable name="nResultOfRest">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="$nResultOfRest + 1"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>0</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>
